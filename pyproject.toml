[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "eko"
version = "0.0.0"
description = "Evolution Kernel Operators"
readme = "README.md"
authors = [
  "A. Barontini <andrea.barontini@mi.infn.it>",
  "A. Candido <alessandro.candido@mi.infn.it>",
  "F. Hekhorn <felix.hekhorn@mi.infn.it>",
  "N. Laurenti <niccolo.laurenti@mi.infn.it>",
  "G. Magni <gmagni@nikhef.nl>",
  "T. Sharma <tanishq.sharma@alumni.cern>",
]
classifiers = [
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Topic :: Scientific/Engineering",
  "Topic :: Scientific/Engineering :: Physics",
  "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
]
repository = "https://github.com/NNPDF/eko"
include = [
  "doc/source/img/Logo.png",
  "src/ekobox/genpdf/templatePDF.info",
  "src/ekobox/genpdf/Toy.info",
  "src/ekomark/benchmark/external/LHA.yaml",
]
packages = [
  { include = "eko", from = "src" },
  { include = "ekomark", from = "src" },
  { include = "ekobox", from = "src" },
  { include = "ekore", from = "src" },
]

[tool.poetry.dependencies]
python = "^3.8,<3.12"
numpy = "^1.24"
scipy = "^1.10.1"
PyYAML = "^6.0"
lz4 = "^4.0.2"
numba = "^0.57.0"
# ekomark
banana-hep = { version = "^0.6.8", optional = true }
sqlalchemy = { version = "^1.4.21", optional = true }
pandas = { version = "^1.3.0", optional = true }
matplotlib = { version = "^3.5.1", optional = true }
rich = { version = "^12.6.0", optional = true }

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
Sphinx = "^4.3.2"
sphinx-rtd-theme = "^1.0.0"
sphinxcontrib-bibtex = "^2.4.1"
nbsphinx = "^0.8.8"
ipykernel = "^6.13.0"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
pytest = "^7.1.3"
pytest-cov = "4.0.0"
pytest-env = "^0.6.2"
pylint = "^2.12.2"

[tool.poetry.group.dev.dependencies]
pdbpp = "^0.10.3"
ipython = "^8.0"
# benchmark
asv = "^0.4.2"
virtualenv = "^20.13.2"
devtools = "^0.10.0"

[tool.poetry.extras]
mark = ["banana-hep", "sqlalchemy", "pandas", "matplotlib"]
box = ["rich"]

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
style = "semver"
dirty = true

[tool.poetry-dynamic-versioning.substitution]
files = ["src/eko/version.py"]

[tool.poetry.scripts]
ekonav = "ekomark.navigator:launch_navigator"
genpdf = "ekobox.genpdf.cli:cli"
eko = "ekobox.cli:command"

[tool.poe.tasks]
test = "pytest tests"
coverage = "$BROWSER htmlcov/index.html"
test-cov = ["test", "coverage"]
bench = ["bench-iso", "bench-run"]
bench-iso.cmd = "pytest benchmarks -m isolated"
bench-iso.env.NUMBA_DISABLE_JIT.default = "0"
bench-run.cmd = "pytest benchmarks -m 'not isolated'"
bench-run.env.NUMBA_DISABLE_JIT.default = "0"
lint = "pylint src/**/*.py -E"
lint-warnings = "pylint src/**/*.py --exit-zero"
sandbox = "python benchmarks/sandbox.py"
lha.cmd = "pytest benchmarks/lha_paper_bench.py -s"
lha.env.NUMBA_DISABLE_JIT.default = "0"
nav = "ekonav --config benchmarks/banana.yaml"
navigator = "ekonav --config benchmarks/banana.yaml"
docs = { "shell" = "cd doc; make html" }
docs-view = { "shell" = "cd doc; make view" }
docs-server = { "shell" = "cd doc; make server" }
docs-clean = { "shell" = "cd doc; make clean" }
docs-cleanall = { "shell" = "cd doc; make cleanall" }
docs-install-nb = { "shell" = "python -m ipykernel install --user --name=$(basename $(poetry env info -p))" }
asv-run = "asv run --config benchmarks/asv.conf.json master..HEAD"
asv-preview = "asv preview --config benchmarks/asv.conf.json"
asv-publish = "asv publish --config benchmarks/asv.conf.json"
asv-show = "asv show --config benchmarks/asv.conf.json"
asv-clean = { "shell" = "rm -rf benchmarks/env benchmarks/html benchmarks/results" }
asv = ["asv-run", "asv-publish", "asv-preview"]

[tool.pytest.ini_options]
testpaths = ['tests/', 'benchmarks/']
python_files = ['test_*.py', 'benchmark_*.py', 'regression.py']
python_classes = ['Test*', 'Benchmark*']
python_functions = ['test_*', 'benchmark_*']
addopts = [
  '--cov=eko',
  '--cov=ekobox',
  '--cov=ekore',
  '--cov-report=html',
  '--cov-report=xml',
  '--strict-markers',
]
env = ["D:NUMBA_DISABLE_JIT=1"]
markers = [
  "isolated: marks benchmarks as isolated",
  "ffns: Fixed flavor configuration",
  "ffns_pol: Polarized fixed flavor configuration",
  "vfns: Variable flavor configuration",
  "lo: Leading order",
  "nlo: Next-to-leading order",
  "nnlo: Next-to-next-to-leading order",
  "sv: Scale variations",
]

[tool.pylint.master]
# extensions not to check
extension-pkg-whitelist = ["numpy", "numba", "lhapdf", "pegasus"]
ignore-paths = ["benchmarks/", "doc/", "tests/"]
# has to be 1 as pylint is NOT threadsafe
jobs = 1
[tool.pylint.messages_control]
disable = ["invalid-name", "fixme"]
[tool.pylint.reports]
# Available formats are:
# text, parseable, colorized, json and msvs (visual studio).
output-format = "colorized"
[tool.pylint.format]
# Maximum number of characters on a single line.
max-line-length = 100
[tool.pylint.design]
# Maximum number of arguments for function / method
max-args = 10

[tool.pydocstyle]
convention = "numpy"
