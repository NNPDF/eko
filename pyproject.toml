[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "eko"
version = "0.0.0"
description = "Evolution Kernel Operator"
readme = "README.md"
authors = [
  "A. Candido <alessandro.candido@mi.infn.it>",
  "F. Hekhorn <felix.hekhorn@mi.infn.it>",
  "G. Magni <gmagni@nikhef.nl>",
]
classifiers = [
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Topic :: Scientific/Engineering",
  "Topic :: Scientific/Engineering :: Physics",
  "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
]
repository = "https://github.com/N3PDF/eko"
include = ["src/ekomark/benchmark/external/LHA.yaml", "doc/source/img/Logo.png"]
packages = [
  { include = "eko", from = "src" },
  { include = "ekomark", from = "src" },
  { include = "ekobox", from = "src" },
]

[tool.poetry.dependencies]
python = "^3.8,<3.11"
numpy = "^1.21.0"
scipy = "^1.7.3"
PyYAML = "^6.0"
lz4 = "^3.1.10"
numba = "^0.55.0"
# docs dependencies (for readthedocs, https://github.com/readthedocs/readthedocs.org/issues/4912#issuecomment-664002569)
Sphinx = { version = "^4.3.2", optional = true }
sphinx-rtd-theme = { version = "^1.0.0", optional = true }
sphinxcontrib-bibtex = { version = "^2.4.1", optional = true }
# ekomark
banana-hep = { version = "^0.6.4", optional = true }
sqlalchemy = { version = "^1.4.21", optional = true }
pandas = { version = "^1.3.0", optional = true }
matplotlib = { version = "^3.5.1", optional = true }

[tool.poetry.dev-dependencies]
pylint = "^2.12.2"
pre-commit = "^2.16.0"
pdbpp = "^0.10.3"
pytest = "^6.2.5"
pytest-cov = "^3.0.0"
pytest-env = "^0.6.2"
a3b2bbc3ced97675ac3a71df45f55ba = "^6.4.0" # = lhapdf
# benchmark
Sphinx = "^4.3.2"
sphinx-rtd-theme = "^1.0.0"
sphinxcontrib-bibtex = "^2.4.1"

[tool.poetry.extras]
docs = ["sphinx", "sphinx-rtd-theme", "sphinxcontrib-bibtex"]
mark = ["banana-hep", "sqlalchemy", "pandas", "matplotlib"]
box = ["banana-hep", "sqlalchemy", "pandas", "matplotlib"]

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
style = "semver"
dirty = true

[tool.poetry-dynamic-versioning.substitution]
files = ["src/eko/version.py"]

[tool.poetry.scripts]
ekonav = "ekomark.navigator:launch_navigator"

[tool.poe.tasks]
test = "pytest tests"
coverage = "$BROWSER htmlcov/index.html"
test-cov = ["test", "coverage"]
bench = ["bench-iso", "bench-run"]
bench-iso.cmd = "pytest benchmarks -m isolated"
bench-iso.env.NUMBA_DISABLE_JIT.default = "0"
bench-run.cmd = "pytest benchmarks -m 'not isolated'"
bench-run.env.NUMBA_DISABLE_JIT.default = "0"
lint = "pylint src/**/*.py -E"
lint-warnings = "pylint src/**/*.py --exit-zero"
sandbox = "python benchmarks/sandbox.py"
nav = "ekonav --config benchmarks/banana.yaml"
navigator = "ekonav --config benchmarks/banana.yaml"
docs = { "shell" = "cd doc; make html" }
docs-view = { "shell" = "cd doc; make view" }
docs-server = { "shell" = "cd doc; make server" }
docs-clean = { "shell" = "cd doc; make clean" }
docs-cleanall = { "shell" = "cd doc; make cleanall" }

[tool.pytest.ini_options]
testpaths = ['tests/', 'benchmarks/']
python_files = ['test_*.py', 'benchmark_*.py', 'regression.py']
python_classes = ['Test*', 'Benchmark*']
python_functions = ['test_*', 'benchmark_*']
addopts = [
  '--cov=eko',
  # '--cov=ekobox',
  '--cov-report=html',
  '--cov-report=xml',
  '--strict-markers',
]
env = ["D:NUMBA_DISABLE_JIT=1"]
markers = ["isolated: marks benchmarks as isolated"]

[tool.pylint.master]
# extensions not to check
extension-pkg-whitelist = ["numpy", "numba", "lhapdf", "pegasus"]
ignore-paths = ["benchmarks/", "doc/", "tests/"]
# jobs has to be 1 as pylint is NOT threadsafe
jobs = 1
[tool.pylint.messages_control]
disable = ["invalid-name", "fixme"]
[tool.pylint.reports]
# Available formats are:
# text, parseable, colorized, json and msvs (visual studio).
output-format = "colorized"
[tool.pylint.format]
# Maximum number of characters on a single line.
max-line-length = 100
[tool.pylint.design]
# Maximum number of arguments for function / method
max-args = 10
