# pylint: skip-file
# fmt: off
r"""The anomalous dimension :math:`\gamma_{qg}^{(3)}`."""
import numba as nb
import numpy as np

from ...harmonics.log_functions import lm11, lm12, lm13, lm14, lm15


@nb.njit(cache=True)
def gamma_qg_nf3(n, sx):
    r"""Implement the part proportional to :math:`nf^3` of :math:`\gamma_{qg}^{(3)}`.

    The expression is copied exact from Eq. 3.12 of :cite:`Davies:2016jie`.

    Parameters
    ----------
    n : complex
        Mellin moment
    sx : list
        harmonic sums cache

    Returns
    -------
    complex
        |N3LO| non-singlet anomalous dimension :math:`\gamma_{qg}^{(3)}|_{nf^3}`

    """
    S1 = sx[0][0]
    S2, Sm2 = sx[1]
    S3, S21, _, _, _, Sm3 = sx[2]
    S4, S31, S211, _, _, _, Sm4 = sx[3]
    return 1.3333333333333333 * (
        44.56685134331718 / (-1.0 + n)
        - 82.37037037037037 / np.power(n, 5)
        + 95.30864197530865 / np.power(n, 4)
        - 298.6951686088834 / np.power(n, 3)
        + 334.4519003852186 / np.power(n, 2)
        - 576.1641081960868 / n
        - 156.44444444444446 / np.power(1.0 + n, 6)
        + 271.4074074074074 / np.power(1.0 + n, 5)
        - 142.6172839506173 / np.power(1.0 + n, 4)
        + 49.20926725891911 / np.power(1.0 + n, 3)
        + 242.3162373306182 / np.power(1.0 + n, 2)
        + 383.95514040473176 / (1.0 + n)
        + 75.85185185185185 / np.power(2.0 + n, 5)
        - 18.962962962962962 / np.power(2.0 + n, 4)
        - 28.97119341563786 / np.power(2.0 + n, 3)
        + 57.904384241653375 / np.power(2.0 + n, 2)
        + 153.56036440484917 / (2.0 + n)
        - (7.725651577503429 * S1) / (-1.0 + n)
        + (35.55555555555556 * S1) / np.power(n, 5)
        - (53.333333333333336 * S1) / np.power(n, 4)
        + (149.7283950617284 * S1) / np.power(n, 3)
        - (189.49794238683128 * S1) / np.power(n, 2)
        + (219.77429764880566 * S1) / n
        - (71.11111111111111 * S1) / np.power(1.0 + n, 5)
        + (75.85185185185185 * S1) / np.power(1.0 + n, 4)
        + (45.4320987654321 * S1) / np.power(1.0 + n, 3)
        - (24.691358024691358 * S1) / np.power(1.0 + n, 2)
        - (242.01773110008048 * S1) / (1.0 + n)
        + (37.925925925925924 * S1) / np.power(2.0 + n, 4)
        + (53.72839506172839 * S1) / np.power(2.0 + n, 3)
        + (39.76954732510288 * S1) / np.power(2.0 + n, 2)
        + (33.84214810968268 * S1) / (2.0 + n)
        - (8.954732510288066 * S2) / (-1.0 + n)
        + (28.444444444444443 * S2) / np.power(n, 4)
        - (47.407407407407405 * S2) / np.power(n, 3)
        + (117.33333333333333 * S2) / np.power(n, 2)
        - (128.52674897119343 * S2) / n
        - (71.11111111111111 * S2) / np.power(1.0 + n, 4)
        + (9.481481481481481 * S2) / np.power(1.0 + n, 3)
        + (60.44444444444444 * S2) / np.power(1.0 + n, 2)
        - (11.588477366255145 * S2) / (1.0 + n)
        + (56.888888888888886 * S2) / np.power(2.0 + n, 3)
        + (112.19753086419753 * S2) / np.power(2.0 + n, 2)
        + (144.98765432098764 * S2) / (2.0 + n)
        - (2.3703703703703702 * (np.power(S1, 2) + S2)) / (-1.0 + n)
        + (2.3703703703703702 * (np.power(S1, 2) + S2)) / np.power(n, 3)
        + (3.3580246913580245 * (np.power(S1, 2) + S2)) / np.power(n, 2)
        - (13.695473251028806 * (np.power(S1, 2) + S2)) / n
        + (7.111111111111111 * (np.power(S1, 2) + S2)) / np.power(1.0 + n, 4)
        + (9.481481481481481 * (np.power(S1, 2) + S2)) / np.power(1.0 + n, 3)
        - (2.962962962962963 * (np.power(S1, 2) + S2)) / np.power(1.0 + n, 2)
        + (53.76131687242798 * (np.power(S1, 2) + S2)) / (1.0 + n)
        - (9.481481481481481 * (np.power(S1, 2) + S2)) / np.power(2.0 + n, 3)
        - (21.333333333333332 * (np.power(S1, 2) + S2)) / np.power(2.0 + n, 2)
        - (38.650205761316876 * (np.power(S1, 2) + S2)) / (2.0 + n)
        - (3.1604938271604937 * S21) / (-1.0 + n)
        + (7.111111111111111 * S21) / np.power(n, 3)
        - (10.666666666666666 * S21) / np.power(n, 2)
        + (32.0 * S21) / n
        - (14.222222222222221 * S21) / np.power(1.0 + n, 3)
        - (53.333333333333336 * S21) / (1.0 + n)
        + (9.481481481481481 * S21) / np.power(2.0 + n, 2)
        + (24.493827160493826 * S21) / (2.0 + n)
        - (3.1604938271604937 * S3) / (-1.0 + n)
        + (7.111111111111111 * S3) / np.power(n, 3)
        - (10.666666666666666 * S3) / np.power(n, 2)
        + (28.049382716049383 * S3) / n
        - (14.222222222222221 * S3) / np.power(1.0 + n, 3)
        - (43.06172839506173 * S3) / (1.0 + n)
        + (9.481481481481481 * S3) / np.power(2.0 + n, 2)
        + (14.222222222222221 * S3) / (2.0 + n)
        - (3.1604938271604937 * (S1 * S2 - 1.0 * S21 + S3)) / (-1.0 + n)
        + (7.111111111111111 * (S1 * S2 - 1.0 * S21 + S3)) / np.power(n, 3)
        - (10.666666666666666 * (S1 * S2 - 1.0 * S21 + S3)) / np.power(n, 2)
        + (32.0 * (S1 * S2 - 1.0 * S21 + S3)) / n
        - (14.222222222222221 * (S1 * S2 - 1.0 * S21 + S3)) / np.power(1.0 + n, 3)
        - (53.333333333333336 * (S1 * S2 - 1.0 * S21 + S3)) / (1.0 + n)
        + (9.481481481481481 * (S1 * S2 - 1.0 * S21 + S3)) / np.power(2.0 + n, 2)
        + (24.493827160493826 * (S1 * S2 - 1.0 * S21 + S3)) / (2.0 + n)
        + (0.5267489711934157 * (np.power(S1, 3) + 3.0 * S1 * S2 + 2.0 * S3))
        / (-1.0 + n)
        - (1.1851851851851851 * (np.power(S1, 3) + 3.0 * S1 * S2 + 2.0 * S3))
        / np.power(n, 3)
        + (1.9753086419753085 * (np.power(S1, 3) + 3.0 * S1 * S2 + 2.0 * S3))
        / np.power(n, 2)
        - (4.674897119341564 * (np.power(S1, 3) + 3.0 * S1 * S2 + 2.0 * S3)) / n
        + (2.3703703703703702 * (np.power(S1, 3) + 3.0 * S1 * S2 + 2.0 * S3))
        / np.power(1.0 + n, 3)
        + (7.57201646090535 * (np.power(S1, 3) + 3.0 * S1 * S2 + 2.0 * S3)) / (1.0 + n)
        - (1.5802469135802468 * (np.power(S1, 3) + 3.0 * S1 * S2 + 2.0 * S3))
        / np.power(2.0 + n, 2)
        - (2.765432098765432 * (np.power(S1, 3) + 3.0 * S1 * S2 + 2.0 * S3)) / (2.0 + n)
        - (
            1.1851851851851851
            * (
                0.041666666666666664 * np.power(S1, 4)
                + 0.25 * np.power(S1, 2) * S2
                + 0.125 * np.power(S2, 2)
                + 0.3333333333333333 * S1 * S3
                + 0.25 * S4
            )
        )
        / n
        + (
            2.3703703703703702
            * (
                0.041666666666666664 * np.power(S1, 4)
                + 0.25 * np.power(S1, 2) * S2
                + 0.125 * np.power(S2, 2)
                + 0.3333333333333333 * S1 * S3
                + 0.25 * S4
            )
        )
        / (1.0 + n)
        - (
            2.3703703703703702
            * (
                0.041666666666666664 * np.power(S1, 4)
                + 0.25 * np.power(S1, 2) * S2
                + 0.125 * np.power(S2, 2)
                + 0.3333333333333333 * S1 * S3
                + 0.25 * S4
            )
        )
        / (2.0 + n)
        + (3.5555555555555554 * S4) / n
        - (7.111111111111111 * S4) / (1.0 + n)
        + (7.111111111111111 * S4) / (2.0 + n)
    ) + 3.0 * (
        2.5381463063368415 / (-1.0 + n)
        + 3.5555555555555554 / np.power(n, 5)
        + 5.728395061728395 / np.power(n, 4)
        + 4.559670781893004 / np.power(n, 3)
        + 2.036401939671693 / np.power(n, 2)
        - 1.1169664019346115 / n
        + 26.074074074074073 / np.power(1.0 + n, 5)
        - 56.098765432098766 / np.power(1.0 + n, 4)
        + 70.0246913580247 / np.power(1.0 + n, 3)
        - 56.58563233464838 / np.power(1.0 + n, 2)
        + 23.268759906664844 / (1.0 + n)
        + 18.962962962962962 / np.power(2.0 + n, 5)
        - 37.925925925925924 / np.power(2.0 + n, 4)
        + 22.386831275720166 / np.power(2.0 + n, 3)
        + 25.899964373170548 / np.power(2.0 + n, 2)
        - 33.71051594275432 / (2.0 + n)
        + (0.3511659807956104 * S1) / (-1.0 + n)
        - (9.481481481481481 * S1) / np.power(n, 4)
        + (8.938271604938272 * S1) / np.power(n, 3)
        - (17.432098765432098 * S1) / np.power(n, 2)
        + (15.015825807984449 * S1) / n
        + (14.222222222222221 * S1) / np.power(1.0 + n, 4)
        - (1.7777777777777777 * S1) / np.power(1.0 + n, 3)
        - (14.534979423868313 * S1) / np.power(1.0 + n, 2)
        + (48.28933603835209 * S1) / (1.0 + n)
        + (9.481481481481481 * S1) / np.power(2.0 + n, 4)
        - (46.617283950617285 * S1) / np.power(2.0 + n, 3)
        - (42.27160493827161 * S1) / np.power(2.0 + n, 2)
        - (64.96148967346869 * S1) / (2.0 + n)
        + (1.7119341563786008 * S2) / (-1.0 + n)
        - (2.3703703703703702 * S2) / np.power(n, 3)
        + (0.7407407407407407 * S2) / np.power(n, 2)
        - (7.703703703703703 * S2) / n
        + (9.481481481481481 * S2) / np.power(1.0 + n, 3)
        - (15.012345679012345 * S2) / np.power(1.0 + n, 2)
        + (27.308641975308642 * S2) / (1.0 + n)
        - (4.7407407407407405 * S2) / np.power(2.0 + n, 3)
        + (2.765432098765432 * S2) / np.power(2.0 + n, 2)
        - (21.020576131687243 * S2) / (2.0 + n)
        + (0.8559670781893004 * (np.power(S1, 2) + S2)) / (-1.0 + n)
        - (1.1851851851851851 * (np.power(S1, 2) + S2)) / np.power(n, 3)
        + (0.37037037037037035 * (np.power(S1, 2) + S2)) / np.power(n, 2)
        - (2.60082304526749 * (np.power(S1, 2) + S2)) / n
        + (2.9135802469135803 * (np.power(S1, 2) + S2)) / np.power(1.0 + n, 2)
        + (5.275720164609053 * (np.power(S1, 2) + S2)) / (1.0 + n)
        + (2.3703703703703702 * (np.power(S1, 2) + S2)) / np.power(2.0 + n, 3)
        - (6.518518518518518 * (np.power(S1, 2) + S2)) / np.power(2.0 + n, 2)
        - (2.8724279835390947 * (np.power(S1, 2) + S2)) / (2.0 + n)
        - (3.950617283950617 * S21) / n
        - (2.3703703703703702 * S21) / np.power(1.0 + n, 2)
        + (7.901234567901234 * S21) / (1.0 + n)
        + (2.3703703703703702 * S21) / np.power(2.0 + n, 2)
        - (7.901234567901234 * S21) / (2.0 + n)
        + (1.1851851851851851 * S211) / n
        - (2.3703703703703702 * S211) / (1.0 + n)
        + (2.3703703703703702 * S211) / (2.0 + n)
        - (3.950617283950617 * S3) / n
        + (2.3703703703703702 * S3) / np.power(1.0 + n, 2)
        + (3.1604938271604937 * S3) / (1.0 + n)
        - (2.3703703703703702 * S3) / np.power(2.0 + n, 2)
        - (3.1604938271604937 * S3) / (2.0 + n)
        + (3.950617283950617 * (S1 * S2 - 1.0 * S21 + S3)) / n
        + (2.3703703703703702 * (S1 * S2 - 1.0 * S21 + S3)) / np.power(1.0 + n, 2)
        - (7.901234567901234 * (S1 * S2 - 1.0 * S21 + S3)) / (1.0 + n)
        - (2.3703703703703702 * (S1 * S2 - 1.0 * S21 + S3)) / np.power(2.0 + n, 2)
        + (7.901234567901234 * (S1 * S2 - 1.0 * S21 + S3)) / (2.0 + n)
        - (0.6584362139917695 * (np.power(S1, 3) + 3.0 * S1 * S2 + 2.0 * S3)) / n
        - (0.3950617283950617 * (np.power(S1, 3) + 3.0 * S1 * S2 + 2.0 * S3))
        / np.power(1.0 + n, 2)
        + (1.316872427983539 * (np.power(S1, 3) + 3.0 * S1 * S2 + 2.0 * S3)) / (1.0 + n)
        + (0.3950617283950617 * (np.power(S1, 3) + 3.0 * S1 * S2 + 2.0 * S3))
        / np.power(2.0 + n, 2)
        - (1.316872427983539 * (np.power(S1, 3) + 3.0 * S1 * S2 + 2.0 * S3)) / (2.0 + n)
        + (1.1851851851851851 * S31) / n
        - (2.3703703703703702 * S31) / (1.0 + n)
        + (2.3703703703703702 * S31) / (2.0 + n)
        + (
            1.1851851851851851
            * (
                0.041666666666666664 * np.power(S1, 4)
                + 0.25 * np.power(S1, 2) * S2
                + 0.125 * np.power(S2, 2)
                + 0.3333333333333333 * S1 * S3
                + 0.25 * S4
            )
        )
        / n
        - (
            2.3703703703703702
            * (
                0.041666666666666664 * np.power(S1, 4)
                + 0.25 * np.power(S1, 2) * S2
                + 0.125 * np.power(S2, 2)
                + 0.3333333333333333 * S1 * S3
                + 0.25 * S4
            )
        )
        / (1.0 + n)
        + (
            2.3703703703703702
            * (
                0.041666666666666664 * np.power(S1, 4)
                + 0.25 * np.power(S1, 2) * S2
                + 0.125 * np.power(S2, 2)
                + 0.3333333333333333 * S1 * S3
                + 0.25 * S4
            )
        )
        / (2.0 + n)
        + (3.5555555555555554 * S4) / n
        - (7.111111111111111 * S4) / (1.0 + n)
        + (7.111111111111111 * S4) / (2.0 + n)
        - (0.5925925925925926 * (np.power(S2, 2) + S4)) / n
        + (1.1851851851851851 * (np.power(S2, 2) + S4)) / (1.0 + n)
        - (1.1851851851851851 * (np.power(S2, 2) + S4)) / (2.0 + n)
        - (1.1851851851851851 * (S1 * S3 - 1.0 * S31 + S4)) / n
        + (2.3703703703703702 * (S1 * S3 - 1.0 * S31 + S4)) / (1.0 + n)
        - (2.3703703703703702 * (S1 * S3 - 1.0 * S31 + S4)) / (2.0 + n)
        + (
            1.1851851851851851
            * (S1 * S21 - 2.0 * S211 + S31 + 0.5 * (np.power(S2, 2) + S4))
        )
        / n
        - (
            2.3703703703703702
            * (S1 * S21 - 2.0 * S211 + S31 + 0.5 * (np.power(S2, 2) + S4))
        )
        / (1.0 + n)
        + (
            2.3703703703703702
            * (S1 * S21 - 2.0 * S211 + S31 + 0.5 * (np.power(S2, 2) + S4))
        )
        / (2.0 + n)
        - (
            1.1851851851851851
            * (
                S211
                + 0.5 * (S1 * S3 + S1 * (S1 * S2 - 2.0 * S21 + S3) - 2.0 * S31 + S4)
            )
        )
        / n
        + (
            2.3703703703703702
            * (
                S211
                + 0.5 * (S1 * S3 + S1 * (S1 * S2 - 2.0 * S21 + S3) - 2.0 * S31 + S4)
            )
        )
        / (1.0 + n)
        - (
            2.3703703703703702
            * (
                S211
                + 0.5 * (S1 * S3 + S1 * (S1 * S2 - 2.0 * S21 + S3) - 2.0 * S31 + S4)
            )
        )
        / (2.0 + n)
        + (2.5020576131687244 * Sm2) / n
        + (0.5925925925925926 * Sm2) / np.power(1.0 + n, 2)
        - (0.6584362139917695 * Sm2) / (1.0 + n)
        + (1.8436213991769548 * Sm2) / (2.0 + n)
        - (7.901234567901234 * Sm3) / n
        + (11.061728395061728 * Sm3) / (1.0 + n)
        - (11.061728395061728 * Sm3) / (2.0 + n)
        + (4.7407407407407405 * Sm4) / n
        - (9.481481481481481 * Sm4) / (1.0 + n)
        + (9.481481481481481 * Sm4) / (2.0 + n)
    )


@nb.njit(cache=True)
def gamma_qg_nf1(n, sx, variation):
    r"""Implement the part proportional to :math:`nf^1` of :math:`\gamma_{qg}^{(3)}`.

    Parameters
    ----------
    n : complex
        Mellin moment
    sx : list
        harmonic sums cache
    variation : int
        |N3LO| anomalous dimension variation

    Returns
    -------
    complex
        |N3LO| non-singlet anomalous dimension :math:`\gamma_{qg}^{(3)}|_{nf^1}`

    """
    S1 = sx[0][0]
    S2 = sx[1][0]
    S3 = sx[2][0]
    S4 = sx[3][0]
    S5 = sx[4][0]
    S1m2 = ((1 - 2 * n)/((-1 + n) * n) + S1)/n
    common = -7871.5226542038545/np.power(-1. + n,3) + 14103.703703703704/np.power(n,7) + 2588.8395061728397/np.power(n,6) + 68802.34242841466/np.power(n,5) - 35.68779444531073*lm14(n,S1,S2,S3,S4) - 1.8518518518518519*lm15(n,S1,S2,S3,S4,S5)
    if variation == 1:
        fit = 17942.980631967464/np.power(-1. + n,2) + 952.383633129878/(-1. + n) - 109883.92889831301/np.power(n,3) + (217.75937224975806*np.power(S1,3))/n
    elif variation == 2:
        fit = -43884.573235805314/np.power(-1. + n,2) - 43537.652543021584/(np.power(-1. + n,2)*np.power(n,2)) + 87075.30508604317/(np.power(-1. + n,2)*n) + (8324.768922693176*n)/np.power(-1. + n,2) + (64.67441578219209*np.power(S1,3))/n
    elif variation == 3:
        fit = -27752.209724874927/np.power(-1. + n,2) + 41181.71280837925/(np.power(-1. + n,2)*n) + (6251.996868406815*n)/np.power(-1. + n,2) + (109.45284583784291*np.power(S1,3))/n
    elif variation == 4:
        fit = 14172.9166835839/np.power(-1. + n,2) - 17309.806542136394/(-1. + n) + 25655.717136190975/(1. + n) + (66.5636977591236*np.power(S1,3))/n
    elif variation == 5:
        fit = 73707.96363143664/(2. - 3.*n + np.power(n,3)) - (47301.984327614206*n)/(2. - 3.*n + np.power(n,3)) + (10713.240110052213*np.power(n,2))/(2. - 3.*n + np.power(n,3)) + (22.57969740765275*np.power(S1,3))/n
    elif variation == 6:
        fit = -147159.86083025284/np.power(-1. + np.power(n,2),2) + (238034.73773994873*n)/np.power(-1. + np.power(n,2),2) - (108189.69360190297*np.power(n,2))/np.power(-1. + np.power(n,2),2) + (19485.083614174942*np.power(n,3))/np.power(-1. + np.power(n,2),2) - (150.4810083367904*np.power(S1,3))/n
    elif variation == 7:
        fit = 8053.875274670035/np.power(-1. + n,2) + 4127.507631614544/(-1. + n) - 185738.94363125242/np.power(1. + n,3) + (133.43959803610457*np.power(S1,3))/n
    elif variation == 8:
        fit = 24982.332567321493/np.power(-1. + n,2) - (12722.400000533245*n)/np.power(-1. + n,2) - (178.7079673456897*np.power(S1,3))/n - 8388.505629494039*lm11(n,S1)
    elif variation == 9:
        fit = 21714.76659352207/np.power(-1. + n,2) - (10423.888286989335*n)/np.power(-1. + n,2) - (609.4442971576349*np.power(S1,3))/n + 3250.7367573655924*lm12(n,S1,S2)
    elif variation == 10:
        fit = 23807.49045792025/np.power(-1. + n,2) - (11854.72043214953*n)/np.power(-1. + n,2) - (1607.9062676535273*np.power(S1,3))/n - 1447.5794358264577*lm13(n,S1,S2,S3)
    elif variation == 11:
        fit = 18327.463972249934/np.power(-1. + n,2) - (8005.2972850057595*n)/np.power(-1. + n,2) + (4011.5284037684605*np.power(S1,2))/n - (771.8499336285957*np.power(S1,3))/n
    elif variation == 12:
        fit = 12751.705690911209/np.power(-1. + n,2) - 7050.398629267728/(-1. + n) - (103.09035150447586*np.power(S1,3))/n + 6007.377353370904*S1m2
    elif variation == 13:
        fit = -30372.00801070733/np.power(-1. + n,2) + 512520.99971698166/np.power(n,4) - (1393.215095387121*np.power(S1,3))/n - 1105.393439171811*lm13(n,S1,S2,S3)
    elif variation == 14:
        fit = 17497.52641286639/np.power(-1. + n,2) - 101712.5534731304/np.power(n,3) + (81.99612193580171*np.power(S1,3))/n - 107.64736159785387*lm13(n,S1,S2,S3)
    elif variation == 15:
        fit = 9617.647178953872/np.power(-1. + n,2) - 25576.796820467393/np.power(n,2) - (625.3255861663762*np.power(S1,3))/n - 597.1788526752734*lm13(n,S1,S2,S3)
    elif variation == 16:
        fit = 7982.15462353061/np.power(-1. + n,2) - 21157.000533105136/n - (2490.195157596885*np.power(S1,3))/n - 2191.2697004349143*lm13(n,S1,S2,S3)
    elif variation == 17:
        fit = 7128.058295086571/np.power(-1. + n,2) - 55753.72194016617/(1. + n) - (5246.780689023155*np.power(S1,3))/n - 4593.386700653348*lm13(n,S1,S2,S3)
    elif variation == 18:
        fit = 7636.700597270715/np.power(-1. + n,2) - 48500.00864053313/np.power(1. + n,2) - (1056.6147224219835*np.power(S1,3))/n - 900.0122114211894*lm13(n,S1,S2,S3)
    elif variation == 19:
        fit = 9060.78856459587/np.power(-1. + n,2) - 137770.73142283142/np.power(1. + n,3) - (316.2735659382186*np.power(S1,3))/n - 373.8461962189581*lm13(n,S1,S2,S3)
    elif variation == 20:
        fit = 7756.1447003933645/np.power(-1. + n,2) - (21134.40765089222*np.power(S1,3))/n + 114608.42539648949*lm11(n,S1) - 21225.214106903844*lm13(n,S1,S2,S3)
    elif variation == 21:
        fit = 13924.15315581724/np.power(-1. + n,2) + (2105.2446659695634*np.power(S1,3))/n + 14823.274122046538*S1m2 + 2124.339810873103*lm13(n,S1,S2,S3)
    else:
        fit = 5730.853068060636/np.power(-1. + n,2) - 918.1101860314142/(-1. + n) + 24405.76189128484/np.power(n,4) - 10076.022970068734/np.power(n,3) - 1217.9427057365424/np.power(n,2) - 2073.2215496676945/(np.power(-1. + n,2)*np.power(n,2)) - 1007.4762158621493/n + 6107.477042591543/(np.power(-1. + n,2)*n) - (1353.7876292179942*n)/np.power(-1. + n,2) - 15405.222621623037/np.power(1. + n,3) - 2309.524220977768/np.power(1. + n,2) - 1433.2383239988187/(1. + n) - 7007.61242048823/np.power(-1. + np.power(n,2),2) + (11334.987511426129*n)/np.power(-1. + np.power(n,2),2) - (5151.890171519189*np.power(n,2))/np.power(-1. + np.power(n,2),2) + (927.861124484521*np.power(n,3))/np.power(-1. + np.power(n,2),2) + 3509.903030068411/(2. - 3.*n + np.power(n,3)) - (2252.4754441721047*n)/(2. - 3.*n + np.power(n,3)) + (510.15429095486724*np.power(n,2))/(2. - 3.*n + np.power(n,3)) + (191.02516208421238*np.power(S1,2))/n - (1565.837232289269*np.power(S1,3))/n + 991.9357845436876*S1m2 + 5058.091417475974*lm11(n,S1) + 154.7969884459806*lm12(n,S1,S2) - 1448.4375330490736*lm13(n,S1,S2,S3)
    return common + fit


@nb.njit(cache=True)
def gamma_qg_nf2(n, sx, variation):
    r"""Implement the part proportional to :math:`nf^2` of :math:`\gamma_{qg}^{(3)}`.

    Parameters
    ----------
    n : complex
        Mellin moment
    sx : list
        harmonic sums cache
    variation : int
        |N3LO| anomalous dimension variation

    Returns
    -------
    complex
        |N3LO| non-singlet anomalous dimension :math:`\gamma_{qg}^{(3)}|_{nf^2}`

    """
    S1 = sx[0][0]
    S2 = sx[1][0]
    S3 = sx[2][0]
    S4 = sx[3][0]
    S5 = sx[4][0]
    S1m2 = ((1 - 2 * n)/((-1 + n) * n) + S1)/n
    common = -1991.111111111111/np.power(n,7) + 2069.3333333333335/np.power(n,6) - 7229.376633440217/np.power(n,5) + 3.511659807956104*lm14(n,S1,S2,S3,S4) + 0.411522633744856*lm15(n,S1,S2,S3,S4,S5)
    if variation == 1:
        fit = 105.83989169675428/np.power(-1. + n,2) + 5648.314485797301/np.power(n,3) - (144.41350069272758*n)/np.power(-1. + n,2) - (60.05115179489358*np.power(S1,3))/n
    elif variation == 2:
        fit = 3234.979059808438/np.power(-1. + n,2) + 2237.9464950141064/(np.power(-1. + n,2)*np.power(n,2)) - 4475.892990028213/(np.power(-1. + n,2)*n) - (523.3729267290377*n)/np.power(-1. + n,2) - (52.18219419715802*np.power(S1,3))/n
    elif variation == 3:
        fit = 2405.734388431045/np.power(-1. + n,2) - 2116.8451777945247/(np.power(-1. + n,2)*n) - (416.8271512242652*n)/np.power(-1. + n,2) - (54.48391982410277*np.power(S1,3))/n
    elif variation == 4:
        fit = -1957.8617570768515/(np.power(-1. + n,2)*(1. + n)) + (2792.7560260016758*n)/(np.power(-1. + n,2)*(1. + n)) - (524.4596626129998*np.power(n,2))/(np.power(-1. + n,2)*(1. + n)) - (52.279308114225344*np.power(S1,3))/n
    elif variation == 5:
        fit = -1830.3776006663315/(2. - 3.*n + np.power(n,3)) + (3219.7256138761522*n)/(2. - 3.*n + np.power(n,3)) - (646.1464436730274*np.power(n,2))/(2. - 3.*n + np.power(n,3)) - (50.01841820230371*np.power(S1,3))/n
    elif variation == 6:
        fit = 8543.592510319764/np.power(-1. + np.power(n,2),2) - (10372.651876653883*n)/np.power(-1. + np.power(n,2),2) + (6349.509320638676*np.power(n,2))/np.power(-1. + np.power(n,2),2) - (1097.0415948405437*np.power(n,3))/np.power(-1. + np.power(n,2),2) - (41.122656092420705*np.power(S1,3))/n
    elif variation == 7:
        fit = 469.7516538628825/np.power(-1. + n,2) - 307.62298050155493/(-1. + n) + 9547.455905585133/np.power(1. + n,3) - (55.7169001267458*np.power(S1,3))/n
    elif variation == 8:
        fit = -304.95571991539595/np.power(-1. + n,2) + (558.50529064063*n)/np.power(-1. + n,2) - (39.6717183342026*np.power(S1,3))/n + 431.19060572642525*lm11(n,S1)
    elif variation == 9:
        fit = -136.99448656534673/np.power(-1. + n,2) + (440.35592032279953*n)/np.power(-1. + n,2) - (17.53077128554597*np.power(S1,3))/n - 167.09616865932276*lm12(n,S1,S2)
    elif variation == 10:
        fit = -244.5658360480718/np.power(-1. + n,2) + (513.9043455864485*n)/np.power(-1. + n,2) + (33.79272313272137*np.power(S1,3))/n + 74.40927876074926*lm13(n,S1,S2,S3)
    elif variation == 11:
        fit = 37.12151615981293/np.power(-1. + n,2) + (316.03416800937174*n)/np.power(-1. + n,2) - (206.20280163226428*np.power(S1,2))/n - (9.18270693936634*np.power(S1,3))/n
    elif variation == 12:
        fit = -38.67876257118817/np.power(-1. + n,2) + (266.94993918948495*n)/np.power(-1. + n,2) - (43.55865684486119*np.power(S1,3))/n - 308.7945331668692*S1m2
    elif variation == 13:
        fit = 2104.1255450841813/np.power(-1. + n,2) - 22217.881093557713/np.power(n,4) + (24.485820703580462*np.power(S1,3))/n + 59.57545187414006*lm13(n,S1,S2,S3)
    elif variation == 14:
        fit = 28.972284214410113/np.power(-1. + n,2) + 4409.258196319858/np.power(n,3) - (39.46486118547858*np.power(S1,3))/n + 16.322972999434434*lm13(n,S1,S2,S3)
    elif variation == 15:
        fit = 370.566521225854/np.power(-1. + n,2) + 1108.75892075646/np.power(n,2) - (8.802332988225691*np.power(S1,3))/n + 37.54425459826842*lm13(n,S1,S2,S3)
    elif variation == 16:
        fit = 441.4654290674009/np.power(-1. + n,2) + 917.1599259356036/n + (72.04011135242985*np.power(S1,3))/n + 106.64839067739553*lm13(n,S1,S2,S3)
    elif variation == 17:
        fit = 478.49066447881427/np.power(-1. + n,2) + 2416.9342627402943/(1. + n) + (191.53860916085057*np.power(S1,3))/n + 210.7806114315443*lm13(n,S1,S2,S3)
    elif variation == 18:
        fit = 456.4409256479742/np.power(-1. + n,2) + 2102.4844359683207/np.power(1. + n,2) + (9.894131647489687*np.power(S1,3))/n + 50.67213727916304*lm13(n,S1,S2,S3)
    elif variation == 19:
        fit = 394.7064461978274/np.power(-1. + n,2) + 5972.386947296229/np.power(1. + n,3) - (22.19979580622702*np.power(S1,3))/n + 27.86274221498096*lm13(n,S1,S2,S3)
    elif variation == 20:
        fit = 451.2630014615083/np.power(-1. + n,2) + (880.2702062905938*np.power(S1,3))/n - 4968.296653571663*lm11(n,S1) + 931.7734368664103*lm13(n,S1,S2,S3)
    elif variation == 21:
        fit = 183.87868253147624/np.power(-1. + n,2) - (127.17306357889963*np.power(S1,3))/n - 642.5917026672137*S1m2 - 80.43408793599923*lm13(n,S1,S2,S3)
    else:
        fit = 497.0543430842084/np.power(-1. + n,2) - 14.6487133572169/(-1. + n) - 1057.9943377884624/np.power(n,4) + 478.93203248176945/np.power(n,3) + 52.798043845545706/np.power(n,2) + 106.56888071495744/(np.power(-1. + n,2)*np.power(n,2)) + 43.674282187409695/n - 313.93991275346366/(np.power(-1. + n,2)*n) + (48.14933738584306*n)/np.power(-1. + n,2) + 739.0401358514933/np.power(1. + n,3) + 100.11830647468193/np.power(1. + n,2) + 115.09210774953782/(1. + n) - 93.23151224175483/(np.power(-1. + n,2)*(1. + n)) + (132.988382190556*n)/(np.power(-1. + n,2)*(1. + n)) - (24.97426964823808*np.power(n,2))/(np.power(-1. + n,2)*(1. + n)) + 406.8377385866554/np.power(-1. + np.power(n,2),2) - (493.9358036501849*n)/np.power(-1. + np.power(n,2),2) + (302.3575866970798*np.power(n,2))/np.power(-1. + np.power(n,2),2) - (52.24007594478779*np.power(n,3))/np.power(-1. + np.power(n,2),2) - 87.16083812696816/(2. - 3.*n + np.power(n,3)) + (153.3202673274358*n)/(2. - 3.*n + np.power(n,3)) - (30.76887827014416*np.power(n,2))/(2. - 3.*n + np.power(n,3)) - (9.819181030107822*np.power(S1,2))/n + (25.646816522524226*np.power(S1,3))/n - 45.30410646828966*S1m2 - 216.05266894501133*lm11(n,S1) - 7.956960412348702*lm12(n,S1,S2) + 68.34072327457557*lm13(n,S1,S2,S3)
    return common + fit


@nb.njit(cache=True)
def gamma_qg(n, nf, sx, variation):
    r"""Compute the |N3LO| quark-gluon singlet anomalous dimension.

    Parameters
    ----------
    n : complex
        Mellin moment
    nf : int
        Number of active flavors
    sx : list
        harmonic sums cache
    variation : int
        |N3LO| anomalous dimension variation

    Returns
    -------
    complex
        |N3LO| quark-gluon singlet anomalous dimension
        :math:`\gamma_{qg}^{(3)}(N)`

    See Also
    --------
    gamma_qg_nf1: :math:`\gamma_{qg}^{(3)}|_{nf^1}`
    gamma_qg_nf2: :math:`\gamma_{qg}^{(3)}|_{nf^2}`
    gamma_qg_nf3: :math:`\gamma_{qg}^{(3)}|_{nf^3}`

    """
    return (
        +nf * gamma_qg_nf1(n, sx, variation)
        + nf**2 * gamma_qg_nf2(n, sx, variation)
        + nf**3 * gamma_qg_nf3(n, sx)
    )
