# -*- coding: utf-8 -*-
# pylint: skip-file
# fmt: off
r"""The anomalous dimension :math:`\gamma_{qg}^{(3)}`."""
import numba as nb
import numpy as np

from ...harmonics.log_functions import lm11, lm12, lm13, lm14, lm15


@nb.njit(cache=True)
def gamma_qg_nf3(n, sx):
    r"""Implement the part proportional to :math:`nf^3` of :math:`\gamma_{qg}^{(3)}`.

    The expression is copied exact from Eq. 3.12 of :cite:`Davies:2016jie`.

    Parameters
    ----------
    n : complex
        Mellin moment
    sx : list
        harmonic sums cache

    Returns
    -------
    complex
        |N3LO| non-singlet anomalous dimension :math:`\gamma_{qg}^{(3)}|_{nf^3}`

    """
    S1 = sx[0][0]
    S2, Sm2 = sx[1]
    S3, S21, _, _, _, Sm3 = sx[2]
    S4, S31, S211, _, _, _, Sm4 = sx[3]
    return 1.3333333333333333 * (
        44.56685134331718 / (-1.0 + n)
        - 82.37037037037037 / np.power(n, 5)
        + 95.30864197530865 / np.power(n, 4)
        - 298.6951686088834 / np.power(n, 3)
        + 334.4519003852186 / np.power(n, 2)
        - 576.1641081960868 / n
        - 156.44444444444446 / np.power(1.0 + n, 6)
        + 271.4074074074074 / np.power(1.0 + n, 5)
        - 142.6172839506173 / np.power(1.0 + n, 4)
        + 49.20926725891911 / np.power(1.0 + n, 3)
        + 242.3162373306182 / np.power(1.0 + n, 2)
        + 383.95514040473176 / (1.0 + n)
        + 75.85185185185185 / np.power(2.0 + n, 5)
        - 18.962962962962962 / np.power(2.0 + n, 4)
        - 28.97119341563786 / np.power(2.0 + n, 3)
        + 57.904384241653375 / np.power(2.0 + n, 2)
        + 153.56036440484917 / (2.0 + n)
        - (7.725651577503429 * S1) / (-1.0 + n)
        + (35.55555555555556 * S1) / np.power(n, 5)
        - (53.333333333333336 * S1) / np.power(n, 4)
        + (149.7283950617284 * S1) / np.power(n, 3)
        - (189.49794238683128 * S1) / np.power(n, 2)
        + (219.77429764880566 * S1) / n
        - (71.11111111111111 * S1) / np.power(1.0 + n, 5)
        + (75.85185185185185 * S1) / np.power(1.0 + n, 4)
        + (45.4320987654321 * S1) / np.power(1.0 + n, 3)
        - (24.691358024691358 * S1) / np.power(1.0 + n, 2)
        - (242.01773110008048 * S1) / (1.0 + n)
        + (37.925925925925924 * S1) / np.power(2.0 + n, 4)
        + (53.72839506172839 * S1) / np.power(2.0 + n, 3)
        + (39.76954732510288 * S1) / np.power(2.0 + n, 2)
        + (33.84214810968268 * S1) / (2.0 + n)
        - (8.954732510288066 * S2) / (-1.0 + n)
        + (28.444444444444443 * S2) / np.power(n, 4)
        - (47.407407407407405 * S2) / np.power(n, 3)
        + (117.33333333333333 * S2) / np.power(n, 2)
        - (128.52674897119343 * S2) / n
        - (71.11111111111111 * S2) / np.power(1.0 + n, 4)
        + (9.481481481481481 * S2) / np.power(1.0 + n, 3)
        + (60.44444444444444 * S2) / np.power(1.0 + n, 2)
        - (11.588477366255145 * S2) / (1.0 + n)
        + (56.888888888888886 * S2) / np.power(2.0 + n, 3)
        + (112.19753086419753 * S2) / np.power(2.0 + n, 2)
        + (144.98765432098764 * S2) / (2.0 + n)
        - (2.3703703703703702 * (np.power(S1, 2) + S2)) / (-1.0 + n)
        + (2.3703703703703702 * (np.power(S1, 2) + S2)) / np.power(n, 3)
        + (3.3580246913580245 * (np.power(S1, 2) + S2)) / np.power(n, 2)
        - (13.695473251028806 * (np.power(S1, 2) + S2)) / n
        + (7.111111111111111 * (np.power(S1, 2) + S2)) / np.power(1.0 + n, 4)
        + (9.481481481481481 * (np.power(S1, 2) + S2)) / np.power(1.0 + n, 3)
        - (2.962962962962963 * (np.power(S1, 2) + S2)) / np.power(1.0 + n, 2)
        + (53.76131687242798 * (np.power(S1, 2) + S2)) / (1.0 + n)
        - (9.481481481481481 * (np.power(S1, 2) + S2)) / np.power(2.0 + n, 3)
        - (21.333333333333332 * (np.power(S1, 2) + S2)) / np.power(2.0 + n, 2)
        - (38.650205761316876 * (np.power(S1, 2) + S2)) / (2.0 + n)
        - (3.1604938271604937 * S21) / (-1.0 + n)
        + (7.111111111111111 * S21) / np.power(n, 3)
        - (10.666666666666666 * S21) / np.power(n, 2)
        + (32.0 * S21) / n
        - (14.222222222222221 * S21) / np.power(1.0 + n, 3)
        - (53.333333333333336 * S21) / (1.0 + n)
        + (9.481481481481481 * S21) / np.power(2.0 + n, 2)
        + (24.493827160493826 * S21) / (2.0 + n)
        - (3.1604938271604937 * S3) / (-1.0 + n)
        + (7.111111111111111 * S3) / np.power(n, 3)
        - (10.666666666666666 * S3) / np.power(n, 2)
        + (28.049382716049383 * S3) / n
        - (14.222222222222221 * S3) / np.power(1.0 + n, 3)
        - (43.06172839506173 * S3) / (1.0 + n)
        + (9.481481481481481 * S3) / np.power(2.0 + n, 2)
        + (14.222222222222221 * S3) / (2.0 + n)
        - (3.1604938271604937 * (S1 * S2 - 1.0 * S21 + S3)) / (-1.0 + n)
        + (7.111111111111111 * (S1 * S2 - 1.0 * S21 + S3)) / np.power(n, 3)
        - (10.666666666666666 * (S1 * S2 - 1.0 * S21 + S3)) / np.power(n, 2)
        + (32.0 * (S1 * S2 - 1.0 * S21 + S3)) / n
        - (14.222222222222221 * (S1 * S2 - 1.0 * S21 + S3)) / np.power(1.0 + n, 3)
        - (53.333333333333336 * (S1 * S2 - 1.0 * S21 + S3)) / (1.0 + n)
        + (9.481481481481481 * (S1 * S2 - 1.0 * S21 + S3)) / np.power(2.0 + n, 2)
        + (24.493827160493826 * (S1 * S2 - 1.0 * S21 + S3)) / (2.0 + n)
        + (0.5267489711934157 * (np.power(S1, 3) + 3.0 * S1 * S2 + 2.0 * S3))
        / (-1.0 + n)
        - (1.1851851851851851 * (np.power(S1, 3) + 3.0 * S1 * S2 + 2.0 * S3))
        / np.power(n, 3)
        + (1.9753086419753085 * (np.power(S1, 3) + 3.0 * S1 * S2 + 2.0 * S3))
        / np.power(n, 2)
        - (4.674897119341564 * (np.power(S1, 3) + 3.0 * S1 * S2 + 2.0 * S3)) / n
        + (2.3703703703703702 * (np.power(S1, 3) + 3.0 * S1 * S2 + 2.0 * S3))
        / np.power(1.0 + n, 3)
        + (7.57201646090535 * (np.power(S1, 3) + 3.0 * S1 * S2 + 2.0 * S3)) / (1.0 + n)
        - (1.5802469135802468 * (np.power(S1, 3) + 3.0 * S1 * S2 + 2.0 * S3))
        / np.power(2.0 + n, 2)
        - (2.765432098765432 * (np.power(S1, 3) + 3.0 * S1 * S2 + 2.0 * S3)) / (2.0 + n)
        - (
            1.1851851851851851
            * (
                0.041666666666666664 * np.power(S1, 4)
                + 0.25 * np.power(S1, 2) * S2
                + 0.125 * np.power(S2, 2)
                + 0.3333333333333333 * S1 * S3
                + 0.25 * S4
            )
        )
        / n
        + (
            2.3703703703703702
            * (
                0.041666666666666664 * np.power(S1, 4)
                + 0.25 * np.power(S1, 2) * S2
                + 0.125 * np.power(S2, 2)
                + 0.3333333333333333 * S1 * S3
                + 0.25 * S4
            )
        )
        / (1.0 + n)
        - (
            2.3703703703703702
            * (
                0.041666666666666664 * np.power(S1, 4)
                + 0.25 * np.power(S1, 2) * S2
                + 0.125 * np.power(S2, 2)
                + 0.3333333333333333 * S1 * S3
                + 0.25 * S4
            )
        )
        / (2.0 + n)
        + (3.5555555555555554 * S4) / n
        - (7.111111111111111 * S4) / (1.0 + n)
        + (7.111111111111111 * S4) / (2.0 + n)
    ) + 3.0 * (
        2.5381463063368415 / (-1.0 + n)
        + 3.5555555555555554 / np.power(n, 5)
        + 5.728395061728395 / np.power(n, 4)
        + 4.559670781893004 / np.power(n, 3)
        + 2.036401939671693 / np.power(n, 2)
        - 1.1169664019346115 / n
        + 26.074074074074073 / np.power(1.0 + n, 5)
        - 56.098765432098766 / np.power(1.0 + n, 4)
        + 70.0246913580247 / np.power(1.0 + n, 3)
        - 56.58563233464838 / np.power(1.0 + n, 2)
        + 23.268759906664844 / (1.0 + n)
        + 18.962962962962962 / np.power(2.0 + n, 5)
        - 37.925925925925924 / np.power(2.0 + n, 4)
        + 22.386831275720166 / np.power(2.0 + n, 3)
        + 25.899964373170548 / np.power(2.0 + n, 2)
        - 33.71051594275432 / (2.0 + n)
        + (0.3511659807956104 * S1) / (-1.0 + n)
        - (9.481481481481481 * S1) / np.power(n, 4)
        + (8.938271604938272 * S1) / np.power(n, 3)
        - (17.432098765432098 * S1) / np.power(n, 2)
        + (15.015825807984449 * S1) / n
        + (14.222222222222221 * S1) / np.power(1.0 + n, 4)
        - (1.7777777777777777 * S1) / np.power(1.0 + n, 3)
        - (14.534979423868313 * S1) / np.power(1.0 + n, 2)
        + (48.28933603835209 * S1) / (1.0 + n)
        + (9.481481481481481 * S1) / np.power(2.0 + n, 4)
        - (46.617283950617285 * S1) / np.power(2.0 + n, 3)
        - (42.27160493827161 * S1) / np.power(2.0 + n, 2)
        - (64.96148967346869 * S1) / (2.0 + n)
        + (1.7119341563786008 * S2) / (-1.0 + n)
        - (2.3703703703703702 * S2) / np.power(n, 3)
        + (0.7407407407407407 * S2) / np.power(n, 2)
        - (7.703703703703703 * S2) / n
        + (9.481481481481481 * S2) / np.power(1.0 + n, 3)
        - (15.012345679012345 * S2) / np.power(1.0 + n, 2)
        + (27.308641975308642 * S2) / (1.0 + n)
        - (4.7407407407407405 * S2) / np.power(2.0 + n, 3)
        + (2.765432098765432 * S2) / np.power(2.0 + n, 2)
        - (21.020576131687243 * S2) / (2.0 + n)
        + (0.8559670781893004 * (np.power(S1, 2) + S2)) / (-1.0 + n)
        - (1.1851851851851851 * (np.power(S1, 2) + S2)) / np.power(n, 3)
        + (0.37037037037037035 * (np.power(S1, 2) + S2)) / np.power(n, 2)
        - (2.60082304526749 * (np.power(S1, 2) + S2)) / n
        + (2.9135802469135803 * (np.power(S1, 2) + S2)) / np.power(1.0 + n, 2)
        + (5.275720164609053 * (np.power(S1, 2) + S2)) / (1.0 + n)
        + (2.3703703703703702 * (np.power(S1, 2) + S2)) / np.power(2.0 + n, 3)
        - (6.518518518518518 * (np.power(S1, 2) + S2)) / np.power(2.0 + n, 2)
        - (2.8724279835390947 * (np.power(S1, 2) + S2)) / (2.0 + n)
        - (3.950617283950617 * S21) / n
        - (2.3703703703703702 * S21) / np.power(1.0 + n, 2)
        + (7.901234567901234 * S21) / (1.0 + n)
        + (2.3703703703703702 * S21) / np.power(2.0 + n, 2)
        - (7.901234567901234 * S21) / (2.0 + n)
        + (1.1851851851851851 * S211) / n
        - (2.3703703703703702 * S211) / (1.0 + n)
        + (2.3703703703703702 * S211) / (2.0 + n)
        - (3.950617283950617 * S3) / n
        + (2.3703703703703702 * S3) / np.power(1.0 + n, 2)
        + (3.1604938271604937 * S3) / (1.0 + n)
        - (2.3703703703703702 * S3) / np.power(2.0 + n, 2)
        - (3.1604938271604937 * S3) / (2.0 + n)
        + (3.950617283950617 * (S1 * S2 - 1.0 * S21 + S3)) / n
        + (2.3703703703703702 * (S1 * S2 - 1.0 * S21 + S3)) / np.power(1.0 + n, 2)
        - (7.901234567901234 * (S1 * S2 - 1.0 * S21 + S3)) / (1.0 + n)
        - (2.3703703703703702 * (S1 * S2 - 1.0 * S21 + S3)) / np.power(2.0 + n, 2)
        + (7.901234567901234 * (S1 * S2 - 1.0 * S21 + S3)) / (2.0 + n)
        - (0.6584362139917695 * (np.power(S1, 3) + 3.0 * S1 * S2 + 2.0 * S3)) / n
        - (0.3950617283950617 * (np.power(S1, 3) + 3.0 * S1 * S2 + 2.0 * S3))
        / np.power(1.0 + n, 2)
        + (1.316872427983539 * (np.power(S1, 3) + 3.0 * S1 * S2 + 2.0 * S3)) / (1.0 + n)
        + (0.3950617283950617 * (np.power(S1, 3) + 3.0 * S1 * S2 + 2.0 * S3))
        / np.power(2.0 + n, 2)
        - (1.316872427983539 * (np.power(S1, 3) + 3.0 * S1 * S2 + 2.0 * S3)) / (2.0 + n)
        + (1.1851851851851851 * S31) / n
        - (2.3703703703703702 * S31) / (1.0 + n)
        + (2.3703703703703702 * S31) / (2.0 + n)
        + (
            1.1851851851851851
            * (
                0.041666666666666664 * np.power(S1, 4)
                + 0.25 * np.power(S1, 2) * S2
                + 0.125 * np.power(S2, 2)
                + 0.3333333333333333 * S1 * S3
                + 0.25 * S4
            )
        )
        / n
        - (
            2.3703703703703702
            * (
                0.041666666666666664 * np.power(S1, 4)
                + 0.25 * np.power(S1, 2) * S2
                + 0.125 * np.power(S2, 2)
                + 0.3333333333333333 * S1 * S3
                + 0.25 * S4
            )
        )
        / (1.0 + n)
        + (
            2.3703703703703702
            * (
                0.041666666666666664 * np.power(S1, 4)
                + 0.25 * np.power(S1, 2) * S2
                + 0.125 * np.power(S2, 2)
                + 0.3333333333333333 * S1 * S3
                + 0.25 * S4
            )
        )
        / (2.0 + n)
        + (3.5555555555555554 * S4) / n
        - (7.111111111111111 * S4) / (1.0 + n)
        + (7.111111111111111 * S4) / (2.0 + n)
        - (0.5925925925925926 * (np.power(S2, 2) + S4)) / n
        + (1.1851851851851851 * (np.power(S2, 2) + S4)) / (1.0 + n)
        - (1.1851851851851851 * (np.power(S2, 2) + S4)) / (2.0 + n)
        - (1.1851851851851851 * (S1 * S3 - 1.0 * S31 + S4)) / n
        + (2.3703703703703702 * (S1 * S3 - 1.0 * S31 + S4)) / (1.0 + n)
        - (2.3703703703703702 * (S1 * S3 - 1.0 * S31 + S4)) / (2.0 + n)
        + (
            1.1851851851851851
            * (S1 * S21 - 2.0 * S211 + S31 + 0.5 * (np.power(S2, 2) + S4))
        )
        / n
        - (
            2.3703703703703702
            * (S1 * S21 - 2.0 * S211 + S31 + 0.5 * (np.power(S2, 2) + S4))
        )
        / (1.0 + n)
        + (
            2.3703703703703702
            * (S1 * S21 - 2.0 * S211 + S31 + 0.5 * (np.power(S2, 2) + S4))
        )
        / (2.0 + n)
        - (
            1.1851851851851851
            * (
                S211
                + 0.5 * (S1 * S3 + S1 * (S1 * S2 - 2.0 * S21 + S3) - 2.0 * S31 + S4)
            )
        )
        / n
        + (
            2.3703703703703702
            * (
                S211
                + 0.5 * (S1 * S3 + S1 * (S1 * S2 - 2.0 * S21 + S3) - 2.0 * S31 + S4)
            )
        )
        / (1.0 + n)
        - (
            2.3703703703703702
            * (
                S211
                + 0.5 * (S1 * S3 + S1 * (S1 * S2 - 2.0 * S21 + S3) - 2.0 * S31 + S4)
            )
        )
        / (2.0 + n)
        + (2.5020576131687244 * Sm2) / n
        + (0.5925925925925926 * Sm2) / np.power(1.0 + n, 2)
        - (0.6584362139917695 * Sm2) / (1.0 + n)
        + (1.8436213991769548 * Sm2) / (2.0 + n)
        - (7.901234567901234 * Sm3) / n
        + (11.061728395061728 * Sm3) / (1.0 + n)
        - (11.061728395061728 * Sm3) / (2.0 + n)
        + (4.7407407407407405 * Sm4) / n
        - (9.481481481481481 * Sm4) / (1.0 + n)
        + (9.481481481481481 * Sm4) / (2.0 + n)
    )


@nb.njit(cache=True)
def gamma_qg_nf1(n, sx, variation):
    r"""Implement the part proportional to :math:`nf^1` of :math:`\gamma_{qg}^{(3)}`.

    Parameters
    ----------
    n : complex
        Mellin moment
    sx : list
        harmonic sums cache
    variation : int
        |N3LO| anomalous dimension variation

    Returns
    -------
    complex
        |N3LO| non-singlet anomalous dimension :math:`\gamma_{qg}^{(3)}|_{nf^1}`

    """
    S1 = sx[0][0]
    S2 = sx[1][0]
    S3 = sx[2][0]
    S4 = sx[3][0]
    S5 = sx[4][0]
    common = -7871.5226542038545/np.power(-1. + n,3) + 14103.703703703704/np.power(n,7) + 2588.8395061728397/np.power(n,6) + 68802.34242841466/np.power(n,5) - 35.68779444531073*lm14(n,S1,S2,S3,S4) - 1.8518518518518519*lm15(n,S1,S2,S3,S4,S5)
    if variation == 1:
        fit = -205392.79416313284/np.power(-1. + n,2) + 2.168162539884356e6/np.power(n,4) + (38295.343225692646*n)/np.power(-1. + n,2) - (699.6793703969648*np.power(S1,3))/n
    elif variation == 2:
        fit = 16990.59699883772/np.power(-1. + n,2) - 109883.92889831422/np.power(n,3) + (952.3836331298888*n)/np.power(-1. + n,2) + (217.75937224975772*np.power(S1,3))/n
    elif variation == 3:
        fit = 7977.848229909447/np.power(-1. + n,2) + 8324.768922693176/(-1. + n) - 43537.652543021584/np.power(n,2) + (64.67441578219209*np.power(S1,3))/n
    elif variation == 4:
        fit = -27752.20972487493/np.power(-1. + n,2) + 41181.71280837925/(np.power(-1. + n,2)*n) + (6251.996868406814*n)/np.power(-1. + n,2) + (109.45284583784291*np.power(S1,3))/n
    elif variation == 5:
        fit = 57138.44036191128/(np.power(-1. + n,2)*(1. + n)) - (37138.51758879805*n)/(np.power(-1. + n,2)*(1. + n)) + (8345.910594054581*np.power(n,2))/(np.power(-1. + n,2)*(1. + n)) + (66.5636977591236*np.power(S1,3))/n
    elif variation == 6:
        fit = 73707.96363143664/(2. - 3.*n + np.power(n,3)) - (47301.984327614206*n)/(2. - 3.*n + np.power(n,3)) + (10713.240110052213*np.power(n,2))/(2. - 3.*n + np.power(n,3)) + (22.57969740765275*np.power(S1,3))/n
    elif variation == 7:
        fit = 542.5667304919472/np.power(-1. + n,2) + 19485.08361417494/(-1. + n) - 128217.34394656988/np.power(1. + n,2) - (150.4810083367904*np.power(S1,3))/n
    elif variation == 8:
        fit = 8053.875274670018/np.power(-1. + n,2) + 4127.507631614547/(-1. + n) - 185738.94363125207/np.power(1. + n,3) + (133.4395980361048*np.power(S1,3))/n
    elif variation == 9:
        fit = 24982.332567321566/np.power(-1. + n,2) - (12722.400000533287*n)/np.power(-1. + n,2) - (178.70796734569035*np.power(S1,3))/n - 8388.505629494064*lm11(n,S1)
    elif variation == 10:
        fit = 21714.766593522043/np.power(-1. + n,2) - (10423.888286989319*n)/np.power(-1. + n,2) - (609.4442971576331*np.power(S1,3))/n + 3250.736757365586*lm12(n,S1,S2)
    elif variation == 11:
        fit = 23807.49045792025/np.power(-1. + n,2) - (11854.72043214953*n)/np.power(-1. + n,2) - (1607.9062676535273*np.power(S1,3))/n - 1447.5794358264577*lm13(n,S1,S2,S3)
    elif variation == 12:
        fit = 18327.46397224992/np.power(-1. + n,2) - (8005.2972850057495*n)/np.power(-1. + n,2) + (4011.5284037684537*np.power(S1,2))/n - (771.8499336285935*np.power(S1,3))/n
    elif variation == 13:
        fit = -30372.008010707403/np.power(-1. + n,2) + 512520.9997169825/np.power(n,4) - (1393.2150953871235*np.power(S1,3))/n - 1105.3934391718133*lm13(n,S1,S2,S3)
    elif variation == 14:
        fit = 17497.52641286655/np.power(-1. + n,2) - 101712.5534731317/np.power(n,3) + (81.9961219358003*np.power(S1,3))/n - 107.64736159785465*lm13(n,S1,S2,S3)
    elif variation == 15:
        fit = 9617.647178953872/np.power(-1. + n,2) - 25576.796820467393/np.power(n,2) - (625.3255861663762*np.power(S1,3))/n - 597.1788526752734*lm13(n,S1,S2,S3)
    elif variation == 16:
        fit = 7982.15462353061/np.power(-1. + n,2) - 21157.000533105136/n - (2490.195157596885*np.power(S1,3))/n - 2191.2697004349143*lm13(n,S1,S2,S3)
    elif variation == 17:
        fit = 7128.058295086546/np.power(-1. + n,2) - 55753.72194016531/(1. + n) - (5246.78068902307*np.power(S1,3))/n - 4593.386700653277*lm13(n,S1,S2,S3)
    elif variation == 18:
        fit = 7544.871940528496/np.power(-1. + n,2) - 44686.36615695568/np.power(1. + n,2) - (449.4862061103197*np.power(S1,3))/n + 2117.788526274084*lm12(n,S1,S2)
    elif variation == 19:
        fit = 8972.052114356677/np.power(-1. + n,2) - 133054.03892421495/np.power(1. + n,3) - (77.27963219908116*np.power(S1,3))/n + 922.0724148699815*lm12(n,S1,S2)
    elif variation == 20:
        fit = 6896.159196156904/np.power(-1. + n,2) - (2562.8593511904533*np.power(S1,3))/n + 38042.375447288905*lm11(n,S1) + 17993.0226502419*lm12(n,S1,S2)
    else:
        fit = -3774.0800656156325/np.power(-1. + n,2) + 1596.8680084241332/(-1. + n) + 134034.1769800669/np.power(n,4) - 10579.824118572296/np.power(n,3) - 3455.722468174449/np.power(n,2) - 1057.850026655257/n + 2059.0856404189626/(np.power(-1. + n,2)*n) + (124.67088612757325*n)/np.power(-1. + n,2) - 15939.649127773353/np.power(1. + n,3) - 8645.185505176278/np.power(1. + n,2) - 2787.6860970082657/(1. + n) + 2856.922018095564/(np.power(-1. + n,2)*(1. + n)) - (1856.9258794399027*n)/(np.power(-1. + n,2)*(1. + n)) + (417.2955297027291*np.power(n,2))/(np.power(-1. + n,2)*(1. + n)) + 3685.398181571832/(2. - 3.*n + np.power(n,3)) - (2365.0992163807105*n)/(2. - 3.*n + np.power(n,3)) + (535.6620055026107*np.power(n,2))/(2. - 3.*n + np.power(n,3)) + (200.5764201884227*np.power(S1,2))/n - (808.337240659202*np.power(S1,3))/n + 1482.693490889742*lm11(n,S1) + 1214.1810174375776*lm12(n,S1,S2) - 502.12277451797956*lm13(n,S1,S2,S3)
    return common + fit


@nb.njit(cache=True)
def gamma_qg_nf2(n, sx, variation):
    r"""Implement the part proportional to :math:`nf^2` of :math:`\gamma_{qg}^{(3)}`.

    Parameters
    ----------
    n : complex
        Mellin moment
    sx : list
        harmonic sums cache
    variation : int
        |N3LO| anomalous dimension variation

    Returns
    -------
    complex
        |N3LO| non-singlet anomalous dimension :math:`\gamma_{qg}^{(3)}|_{nf^2}`

    """
    S1 = sx[0][0]
    S2 = sx[1][0]
    S3 = sx[2][0]
    S4 = sx[3][0]
    S5 = sx[4][0]
    common = -1991.111111111111/np.power(n,7) + 2069.3333333333335/np.power(n,6) - 7229.376633440217/np.power(n,5) + 3.511659807956104*lm14(n,S1,S2,S3,S4) + 0.411522633744856*lm15(n,S1,S2,S3,S4,S5)
    if variation == 1:
        fit = 11536.913955887665/np.power(-1. + n,2) - 111449.09000227861/np.power(n,4) - (2063.9369626214466*n)/np.power(-1. + n,2) - (12.892458145354773*np.power(S1,3))/n
    elif variation == 2:
        fit = 105.83989169675104/np.power(-1. + n,2) + 5648.314485797336/np.power(n,3) - (144.41350069272826*n)/np.power(-1. + n,2) - (60.05115179489356*np.power(S1,3))/n
    elif variation == 3:
        fit = 997.0325647943314/np.power(-1. + n,2) + 2237.9464950141064/np.power(n,2) - (523.3729267290377*n)/np.power(-1. + n,2) - (52.18219419715802*np.power(S1,3))/n
    elif variation == 4:
        fit = 2405.734388431045/np.power(-1. + n,2) - 2116.8451777945247/(np.power(-1. + n,2)*n) - (416.8271512242652*n)/np.power(-1. + n,2) - (54.48391982410277*np.power(S1,3))/n
    elif variation == 5:
        fit = -1957.8617570768515/(np.power(-1. + n,2)*(1. + n)) + (2792.7560260016758*n)/(np.power(-1. + n,2)*(1. + n)) - (524.4596626129998*np.power(n,2))/(np.power(-1. + n,2)*(1. + n)) - (52.279308114225344*np.power(S1,3))/n
    elif variation == 6:
        fit = -1830.3776006663315/(2. - 3.*n + np.power(n,3)) + (3219.7256138761522*n)/(2. - 3.*n + np.power(n,3)) - (646.1464436730274*np.power(n,2))/(2. - 3.*n + np.power(n,3)) - (50.01841820230371*np.power(S1,3))/n
    elif variation == 7:
        fit = 855.8520898660023/np.power(-1. + n,2) - 1097.0415948405437/(-1. + n) + 6590.698825613216/np.power(1. + n,2) - (41.122656092420705*np.power(S1,3))/n
    elif variation == 8:
        fit = 469.7516538628823/np.power(-1. + n,2) - 307.62298050155607/(-1. + n) + 9547.455905585164/np.power(1. + n,3) - (55.716900126745706*np.power(S1,3))/n
    elif variation == 9:
        fit = -304.95571991539873/np.power(-1. + n,2) + (558.5052906406318*n)/np.power(-1. + n,2) - (39.671718334202545*np.power(S1,3))/n + 431.1906057264262*lm11(n,S1)
    elif variation == 10:
        fit = -136.99448656534605/np.power(-1. + n,2) + (440.3559203227991*n)/np.power(-1. + n,2) - (17.530771285546052*np.power(S1,3))/n - 167.09616865932256*lm12(n,S1,S2)
    elif variation == 11:
        fit = -244.56583604807182/np.power(-1. + n,2) + (513.9043455864485*n)/np.power(-1. + n,2) + (33.79272313272137*np.power(S1,3))/n + 74.40927876074926*lm13(n,S1,S2,S3)
    elif variation == 12:
        fit = 37.12151615981509/np.power(-1. + n,2) + (316.03416800937043*n)/np.power(-1. + n,2) - (206.20280163226346*np.power(S1,2))/n - (9.18270693936659*np.power(S1,3))/n
    elif variation == 13:
        fit = 2104.125545084184/np.power(-1. + n,2) - 22217.881093557753/np.power(n,4) + (24.485820703580586*np.power(S1,3))/n + 59.575451874140164*lm13(n,S1,S2,S3)
    elif variation == 14:
        fit = 28.972284214409314/np.power(-1. + n,2) + 4409.258196319865/np.power(n,3) - (39.464861185478554*np.power(S1,3))/n + 16.322972999434448*lm13(n,S1,S2,S3)
    elif variation == 15:
        fit = 370.566521225854/np.power(-1. + n,2) + 1108.75892075646/np.power(n,2) - (8.802332988225691*np.power(S1,3))/n + 37.54425459826842*lm13(n,S1,S2,S3)
    elif variation == 16:
        fit = 441.4654290674009/np.power(-1. + n,2) + 917.1599259356036/n + (72.04011135242985*np.power(S1,3))/n + 106.64839067739553*lm13(n,S1,S2,S3)
    elif variation == 17:
        fit = 478.4906644788149/np.power(-1. + n,2) + 2416.934262740268/(1. + n) + (191.5386091608478*np.power(S1,3))/n + 210.78061143154196*lm13(n,S1,S2,S3)
    elif variation == 18:
        fit = 461.6110269438818/np.power(-1. + n,2) + 1887.7702209730512/np.power(1. + n,2) - (24.288181808078832*np.power(S1,3))/n - 119.23490544883065*lm12(n,S1,S2)
    elif variation == 19:
        fit = 401.319970323775/np.power(-1. + n,2) + 5620.852041964935/np.power(1. + n,3) - (40.01200423329257*np.power(S1,3))/n - 68.72202060341473*lm12(n,S1,S2)
    elif variation == 20:
        fit = 489.0158196381261/np.power(-1. + n,2) + (64.99101523097858*np.power(S1,3))/n - 1607.0956240259934*lm11(n,S1) - 789.8822819873246*lm12(n,S1,S2)
    else:
        fit = 1024.8648639573062/np.power(-1. + n,2) - 70.23322876710499/(-1. + n) - 6683.348554791819/np.power(n,4) + 502.8786341058601/np.power(n,3) + 167.3352707885283/np.power(n,2) + 45.857996296780186/n - 105.84225888972624/(np.power(-1. + n,2)*n) - (65.98754083541137*n)/np.power(-1. + n,2) + 758.4153973775051/np.power(1. + n,3) + 423.9234523293134/np.power(1. + n,2) + 120.84671313701341/(1. + n) - 97.89308785384259/(np.power(-1. + n,2)*(1. + n)) + (139.6378013000838*n)/(np.power(-1. + n,2)*(1. + n)) - (26.22298313064999*np.power(n,2))/(np.power(-1. + n,2)*(1. + n)) - 91.51888003331658/(2. - 3.*n + np.power(n,3)) + (160.98628069380763*n)/(2. - 3.*n + np.power(n,3)) - (32.30732218365137*np.power(n,2))/(2. - 3.*n + np.power(n,3)) - (10.310140081613174*np.power(S1,2))/n - (8.542565184541859*np.power(S1,3))/n - 58.79525091497837*lm11(n,S1) - 57.246768834944625*lm12(n,S1,S2) + 25.26404801707649*lm13(n,S1,S2,S3)
    return common + fit


@nb.njit(cache=True)
def gamma_qg(n, nf, sx, variation):
    r"""Compute the |N3LO| quark-gluon singlet anomalous dimension.

    Parameters
    ----------
    n : complex
        Mellin moment
    nf : int
        Number of active flavors
    sx : list
        harmonic sums cache
    variation : int
        |N3LO| anomalous dimension variation

    Returns
    -------
    complex
        |N3LO| quark-gluon singlet anomalous dimension
        :math:`\gamma_{qg}^{(3)}(N)`

    See Also
    --------
    gamma_qg_nf1: :math:`\gamma_{qg}^{(3)}|_{nf^1}`
    gamma_qg_nf2: :math:`\gamma_{qg}^{(3)}|_{nf^2}`
    gamma_qg_nf3: :math:`\gamma_{qg}^{(3)}|_{nf^3}`

    """
    return (
        +nf * gamma_qg_nf1(n, sx, variation)
        + nf**2 * gamma_qg_nf2(n, sx, variation)
        + nf**3 * gamma_qg_nf3(n, sx)
    )
