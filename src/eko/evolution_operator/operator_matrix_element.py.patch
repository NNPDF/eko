diff --git a/src/eko/evolution_operator/operator_matrix_element.py b/src/eko/evolution_operator/operator_matrix_element.py
index e7d51df9..0f999809 100644
--- a/src/eko/evolution_operator/operator_matrix_element.py
+++ b/src/eko/evolution_operator/operator_matrix_element.py
@@ -3,23 +3,19 @@ evolution."""

 import copy
 import enum
-import functools
 import logging
 from typing import Optional

+import ekors
 import numba as nb
 import numpy as np

-import ekore.operator_matrix_elements.polarized.space_like as ome_ps
-import ekore.operator_matrix_elements.unpolarized.space_like as ome_us
-import ekore.operator_matrix_elements.unpolarized.time_like as ome_ut
-
 from .. import basis_rotation as br
 from .. import scale_variations as sv
 from ..io.types import InversionMethod
 from ..matchings import Segment
-from ..scale_variations.exponentiated import gamma_variation
-from . import Managers, Operator, QuadKerBase
+from . import Managers, Operator
+from .quad_ker import cb_quad_ker_ome

 logger = logging.getLogger(__name__)

@@ -79,8 +75,6 @@ def build_ome(A, matching_order, a_s, backward_method):
     # Print;
     # .end
     ome = np.eye(len(A[0]), dtype=np.complex_)
-    A = A[:, :, :]
-    A = np.ascontiguousarray(A)
     if backward_method is MatchingMethods.BACKWARD_EXPANDED:
         # expended inverse
         if matching_order[0] >= 1:
@@ -103,105 +97,6 @@ def build_ome(A, matching_order, a_s, backward_method):
     return ome


-@nb.njit(cache=True)
-def quad_ker(
-    u,
-    order,
-    mode0,
-    mode1,
-    is_log,
-    logx,
-    areas,
-    a_s,
-    nf,
-    L,
-    sv_mode,
-    Lsv,
-    backward_method,
-    is_msbar,
-    is_polarized,
-    is_time_like,
-):
-    r"""Raw kernel inside quad.
-
-    Parameters
-    ----------
-    u : float
-        quad argument
-    order : tuple(int,int)
-        perturbation matching order
-    mode0 : int
-        pid for first element in the singlet sector
-    mode1 : int
-        pid for second element in the singlet sector
-    is_log : boolean
-        logarithmic interpolation
-    logx : float
-        Mellin inversion point
-    areas : tuple
-        basis function configuration
-    a_s : float
-        strong coupling, needed only for the exact inverse
-    nf: int
-        number of active flavor below threshold
-    L : float
-        :math:``\ln(\mu_F^2 / m_h^2)``
-    backward_method : InversionMethod or None
-        empty or method for inverting the matching condition (exact or expanded)
-    is_msbar: bool
-        add the |MSbar| contribution
-    is_polarized : boolean
-        is polarized evolution ?
-    is_time_like : boolean
-        is time-like evolution ?
-
-    Returns
-    -------
-    ker : float
-        evaluated integration kernel
-    """
-    ker_base = QuadKerBase(u, is_log, logx, mode0)
-    integrand = ker_base.integrand(areas)
-    if integrand == 0.0:
-        return 0.0
-    # compute the ome
-    if ker_base.is_singlet or ker_base.is_QEDsinglet:
-        indices = {21: 0, 100: 1, 90: 2}
-        if is_polarized:
-            if is_time_like:
-                raise NotImplementedError("Polarized, time-like is not implemented")
-            A = ome_ps.A_singlet(order, ker_base.n, nf, L)
-        else:
-            if is_time_like:
-                A = ome_ut.A_singlet(order, ker_base.n, L)
-            else:
-                A = ome_us.A_singlet(order, ker_base.n, nf, L, is_msbar)
-    else:
-        indices = {200: 0, 91: 1}
-        if is_polarized:
-            if is_time_like:
-                raise NotImplementedError("Polarized, time-like is not implemented")
-            A = ome_ps.A_non_singlet(order, ker_base.n, L)
-        else:
-            if is_time_like:
-                A = ome_ut.A_non_singlet(order, ker_base.n, L)
-            else:
-                A = ome_us.A_non_singlet(order, ker_base.n, nf, L)
-
-    # correct for scale variations
-    if sv_mode == sv.Modes.exponentiated:
-        A = gamma_variation(A, order, nf, Lsv)
-
-    # build the expansion in alpha_s depending on the strategy
-    ker = build_ome(A, order, a_s, backward_method)
-
-    # select the needed matrix element
-    ker = ker[indices[mode0], indices[mode1]]
-
-    # recombine everything
-    return np.real(ker * integrand)
-
-
 class OperatorMatrixElement(Operator):
     r"""Internal representation of a single |OME|.

@@ -300,41 +195,15 @@ class OperatorMatrixElement(Operator):
             )
         return labels

-    def quad_ker(self, label, logx, areas):
-        """Return partially initialized integrand function.
-
-        Parameters
-        ----------
-        label: tuple
-            operator element pids
-        logx: float
-            Mellin inversion point
-        areas : tuple
-            basis function configuration
-
-        Returns
-        -------
-        functools.partial
-            partially initialized integration kernel
-        """
-        return functools.partial(
-            quad_ker,
-            order=self.order,
-            mode0=label[0],
-            mode1=label[1],
-            is_log=self.int_disp.log,
-            logx=logx,
-            areas=areas,
-            a_s=self.a_s,
-            nf=self.nf,
-            L=self.L,
-            sv_mode=self.sv_mode,
-            Lsv=np.log(self.xif2),
-            backward_method=self.backward_method,
-            is_msbar=self.is_msbar,
-            is_polarized=self.config["polarized"],
-            is_time_like=self.config["time_like"],
-        )
+    def update_cfg(self, cfg):
+        """Adjust integration config."""
+        cfg.is_ome = True
+        cfg.py = ekors.ffi.cast("void *", cb_quad_ker_ome.address)
+        cfg.L = self.L
+        cfg.as1 = self.a_s
+        cfg.as0 = 0.0
+        cfg.Lsv = np.log(self.xif2)
+        cfg.method_num = self.backward_method

     @property
     def a_s(self):
