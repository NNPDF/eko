# -*- coding: utf-8 -*-
"""This module contains some Mellin transform used for in the generalized haromonic sums.
Mellin transform is defined with the convention x^(n)
"""
import numba as nb
import numpy as np
import mpmath as mp

# @nb.njit("c16(c16,c16)", cache=True)
def H21(n, S1):
    """Mellin transform of  :math:`\int_{1}^{2} (x^(n)-1)(ln(1-x/2))/(x-1)`"""
    return complex(
        complex(-2.4674011002723395, -2.177586090303602) * (-1.0 + np.power(2.0, n))
        - 1.0
        * np.power(2.0, n)
        * n
        * (
            -0.00017861624734509784
            - (18.448868614597806 * (1.0 - 1.0 * np.power(2.0, -1.0 - 1.0 * n)))
            / (1.0 + n)
            + (53.03705951583224 * (1.0 - 1.0 * np.power(2.0, -2.0 - 1.0 * n)))
            / (2.0 + n)
            - (72.59017758173087 * (1.0 - 1.0 * np.power(2.0, -3.0 - 1.0 * n)))
            / (3.0 + n)
            + (48.721104697124765 * (1.0 - 1.0 * np.power(2.0, -4.0 - 1.0 * n)))
            / (4.0 + n)
            - (11.36436613468647 * (1.0 - 1.0 * np.power(2.0, -5.0 - 1.0 * n)))
            / (5.0 + n)
            - (8.388218542825193 * (1.0 - 1.0 * np.power(2.0, -6.0 - 1.0 * n)))
            / (6.0 + n)
            + (16.758614450512397 * (1.0 - 1.0 * np.power(2.0, -7.0 - 1.0 * n)))
            / (7.0 + n)
            - (22.231044375187043 * (1.0 - 1.0 * np.power(2.0, -8.0 - 1.0 * n)))
            / (8.0 + n)
            + (22.160106312069402 * (1.0 - 1.0 * np.power(2.0, -9.0 - 1.0 * n)))
            / (9.0 + n)
            - (15.945856292428402 * (1.0 - 1.0 * np.power(2.0, -10.0 - 1.0 * n)))
            / (10.0 + n)
            + (7.88216704187177 * (1.0 - 1.0 * np.power(2.0, -11.0 - 1.0 * n)))
            / (11.0 + n)
            - (2.400714286203908 * (1.0 - 1.0 * np.power(2.0, -12.0 - 1.0 * n)))
            / (12.0 + n)
            + (0.3429689205921761 * (1.0 - 1.0 * np.power(2.0, -13.0 - 1.0 * n)))
            / (13.0 + n)
            + (
                17.066666666666666
                * (
                    -1.3862943611198906 * np.power(2.0, -1.0 - 1.0 * n)
                    + S1
                    + mp.betainc(1.0 + n, 0.0, x2=0.5)
                )
            )
            / n
            - (
                62.0
                * (
                    -1.3862943611198906 * np.power(2.0, -2.0 - 1.0 * n)
                    + 1 / (1.0 + n)
                    + S1
                    + mp.betainc(2.0 + n, 0.0, x2=0.5)
                )
            )
            / (1.0 + n)
            + (
                98.0
                * (
                    -1.3862943611198906 * np.power(2.0, -3.0 - 1.0 * n)
                    + (3.0 + 2.0 * n) / ((1.0 + n) * (2.0 + n))
                    + S1
                    + mp.betainc(3.0 + n, 0.0, x2=0.5)
                )
            )
            / (2.0 + n)
            - (
                82.66666666666667
                * (
                    -1.3862943611198906 * np.power(2.0, -4.0 - 1.0 * n)
                    + (11.0 + 12.0 * n + 3.0 * np.power(n, 2))
                    / ((1.0 + n) * (2.0 + n) * (3.0 + n))
                    + S1
                    + mp.betainc(4.0 + n, 0.0, x2=0.5)
                )
            )
            / (3.0 + n)
            + (
                36.0
                * (
                    -1.3862943611198906 * np.power(2.0, -5.0 - 1.0 * n)
                    + (2.0 * (5.0 + 2.0 * n) * (5.0 + 5.0 * n + np.power(n, 2)))
                    / ((1.0 + n) * (2.0 + n) * (3.0 + n) * (4.0 + n))
                    + S1
                    + mp.betainc(5.0 + n, 0.0, x2=0.5)
                )
            )
            / (4.0 + n)
            - (
                6.4
                * (
                    -1.3862943611198906 * np.power(2.0, -6.0 - 1.0 * n)
                    + (
                        274.0
                        + 450.0 * n
                        + 255.0 * np.power(n, 2)
                        + 60.0 * np.power(n, 3)
                        + 5.0 * np.power(n, 4)
                    )
                    / ((1.0 + n) * (2.0 + n) * (3.0 + n) * (4.0 + n) * (5.0 + n))
                    + S1
                    + mp.betainc(6.0 + n, 0.0, x2=0.5)
                )
            )
            / (5.0 + n)
            - (
                0.6931471805599453
                * (
                    complex(0.0, 3.141592653589793) * np.power(2.0, n)
                    + S1
                    + mp.betainc(1.0 + n, 0.0, x2=2.0)
                )
            )
            / (np.power(2.0, 1.0 * n) * n)
        )
    )


# @nb.njit("c16(c16,c16)", cache=True)
def H23(n, S1):
    r"""Mellin transform of  :math:`\int_{0}^{1} (x^(n)-1)(ln(1-x/2))/(x-1)`"""
    return complex(
        0.038644077596632104 * n
        + (0.17990633019243982 * n) / (2.0 + n)
        - (0.08838707737246981 * n) / (3.0 + n)
        + (0.006557861587551356 * n) / (4.0 + n)
        + (0.0024537382629694544 * n) / (5.0 + n)
        - (0.00005974273075922878 * n) / (6.0 + n)
        + (0.0018925349638931536 * n) / (7.0 + n)
        - (0.0019617338775610098 * n) / (8.0 + n)
        + (0.0017680265456417688 * n) / (9.0 + n)
        - (0.0008335702736569231 * n) / (10.0 + n)
        + (0.00020568989536588186 * n) / (11.0 + n)
        + 0.14018613535141447 * (-1.0 + 1 / (1.0 + n))
        - 0.027777777777777776
        * n
        * (1.391186796731926 - 30.0 / (1.0 + n) + 3.0 / (2.0 + n) - 4.0 / (3.0 + n))
        - 0.6931471805599453 * S1
    )


# @nb.njit("c16(c16,c16,c16)", cache=True)
def H26(n, S1, S2):
    """Linear combination of S211l2051 + S211l2105 - S22l205"""
    return complex(
        0.08333333333333333
        * (
            complex(-16.23484850566707, 21.491913260611398)
            + (
                -2.842170943040401e-14
                + 173.50286458333323 * n
                + 243.46289062500009 * np.power(n, 2)
                + 119.69466145833336 * np.power(n, 3)
                + 24.755859375 * np.power(n, 4)
                + 1.8337239583333333 * np.power(n, 5)
            )
            / (
                120.0
                + 274.0 * n
                + 225.0 * np.power(n, 2)
                + 85.0 * np.power(n, 3)
                + 15.0 * np.power(n, 4)
                + np.power(n, 5)
            )
            + (
                8.731149137020111e-11
                - 787729.060111111 * n
                - 3.0080453892458337e6 * np.power(n, 2)
                - 5.05889901240764e6 * np.power(n, 3)
                - 4.936113066185765e6 * np.power(n, 4)
                - 3.095514310441841e6 * np.power(n, 5)
                - 1.3041688939354168e6 * np.power(n, 6)
                - 373993.2982185764 * np.power(n, 7)
                - 72116.17108854167 * np.power(n, 8)
                - 8953.494551215279 * np.power(n, 9)
                - 646.6595444444445 * np.power(n, 10)
                - 20.644269618055556 * np.power(n, 11)
            )
            / (
                np.power(1.0 + n, 2)
                * np.power(2.0 + n, 3)
                * np.power(3.0 + n, 2)
                * np.power(4.0 + n, 2)
                * np.power(5.0 + n, 2)
            )
            + (
                np.power(n, 3) * (1.283807919976604e10 - 1.608646369206041e10 * S1)
                + np.power(n, 2) * (9.294220799968464e9 - 1.5655859137235104e10 * S1)
                + np.power(n, 4) * (1.0596601907417942e10 - 1.0982580115748644e10 * S1)
                + n * (3.028465456549388e9 - 9.00503846537143e9 * S1)
                + np.power(n, 5) * (5.843292892011012e9 - 5.294110506123972e9 * S1)
                + np.power(n, 6) * (2.2769289339052258e9 - 1.8644748220271614e9 * S1)
                + np.power(n, 7) * (6.458907520321677e8 - 4.886203781899511e8 * S1)
                + np.power(n, 8) * (1.3519818853965065e8 - 9.595384412927225e7 * S1)
                + np.power(n, 9) * (2.090277859286008e7 - 1.4075312614993623e7 * S1)
                + np.power(n, 10) * (2.3595465377532723e6 - 1.5203445475602325e6 * S1)
                + np.power(n, 11) * (189161.71919246286 - 117403.416519983 * S1)
                + np.power(n, 12) * (10205.69539860453 - 6133.497436933107 * S1)
                + np.power(n, 13) * (332.32934015883137 - 194.2227274659864 * S1)
                + np.power(n, 14) * (4.93556152059038 - 2.8148221371882087 * S1)
                - 2.288031552e9 * S1
            )
            / (
                (1.0 + n)
                * (2.0 + n)
                * np.power(3.0 + n, 2)
                * np.power(4.0 + n, 2)
                * np.power(5.0 + n, 2)
                * np.power(6.0 + n, 2)
                * np.power(7.0 + n, 2)
                * np.power(8.0 + n, 2)
            )
            + 18.614449574968226 * S1
            + 1.6449340668482262 * (9.869604401089358 - 6.0 * S2)
            + 16.848146067756026 * S2
            + 6.841088463857115 * mp.betainc(1.0 + n, 0.0, x2=2.0)
            + (
                complex(2.923121728206675e19, 3.701550063528897e19)
                - 2.9231217212083933e19 * np.power(2.0, n)
                + 1.1782399794254862e19 * S1
                + np.power(n, 21)
                * (
                    complex(6.758658057013846, 15.214546459695082)
                    + 4.8429405519235385 * S1
                )
                + np.power(n, 20)
                * (
                    complex(1431.8422861969393, 3210.269302995662)
                    - 17.26786632043568 * np.power(2.0, n)
                    + 1021.8604564558666 * S1
                )
                + np.power(n, 19)
                * (
                    complex(141958.51946738732, 316842.9300231501)
                    - 3589.81189979833 * np.power(2.0, n)
                    + 100854.23699380769 * S1
                )
                + np.power(n, 18)
                * (
                    complex(8.752539210101698e6, 1.943605059313438e7)
                    - 348830.0180568167 * np.power(2.0, n)
                    + 6.186687052163003e6 * S1
                )
                + np.power(n, 17)
                * (
                    complex(3.761407002787435e8, 8.304829147349784e8)
                    - 2.1047447076496072e7 * np.power(2.0, n)
                    + 2.6435092206687373e8 * S1
                )
                + np.power(n, 16)
                * (
                    complex(1.1968726692676088e10, 2.6254354741564106e10)
                    - 8.83520877339768e8 * np.power(2.0, n)
                    + 8.357020669616135e9 * S1
                )
                + np.power(n, 15)
                * (
                    complex(2.923873280138507e11, 6.36638280062443e11)
                    - 2.7398953857335464e10 * np.power(2.0, n)
                    + 2.0264825846692044e11 * S1
                )
                + np.power(n, 14)
                * (
                    complex(5.611456769193843e12, 1.2115084031103225e13)
                    - 6.505518151452606e11 * np.power(2.0, n)
                    + 3.8563510190475283e12 * S1
                )
                + np.power(n, 13)
                * (
                    complex(8.586610348984605e13, 1.8358462356351503e14)
                    - 1.2095125413375354e13 * np.power(2.0, n)
                    + 5.843680063159655e13 * S1
                )
                + np.power(n, 12)
                * (
                    complex(1.0571874861459436e15, 2.2349477992893992e15)
                    - 1.785829223423589e14 * np.power(2.0, n)
                    + 7.114059796185222e14 * S1
                )
                + np.power(n, 11)
                * (
                    complex(1.0523151695692176e16, 2.1956419230015896e16)
                    - 2.1112713439294792e15 * np.power(2.0, n)
                    + 6.988945306109954e15 * S1
                )
                + np.power(n, 10)
                * (
                    complex(8.47844216720592e16, 1.7420404467752794e17)
                    - 2.005909067824641e16 * np.power(2.0, n)
                    + 5.5450869634059896e16 * S1
                )
                + np.power(n, 9)
                * (
                    complex(5.5174139967361075e17, 1.1132957115890166e18)
                    - 1.531123605403968e17 * np.power(2.0, n)
                    + 3.543730312448022e17 * S1
                )
                + np.power(n, 8)
                * (
                    complex(2.884166025765176e18, 5.695785397422142e18)
                    - 9.350839180163167e17 * np.power(2.0, n)
                    + 1.813024801580739e18 * S1
                )
                + np.power(n, 7)
                * (
                    complex(1.1999636924131482e19, 2.3095399249450648e19)
                    - 4.5317048835340575e18 * np.power(2.0, n)
                    + 7.351493906461836e18 * S1
                )
                + np.power(n, 6)
                * (
                    complex(3.919356154375745e19, 7.313065470087013e19)
                    - 1.720130723544719e19 * np.power(2.0, n)
                    + 2.327821037438006e19 * S1
                )
                + n
                * (
                    complex(1.2214732964559317e20, 1.701876351998952e20)
                    - 1.0858123503594557e20 * np.power(2.0, n)
                    + 5.417240679036713e19 * S1
                )
                + np.power(n, 5)
                * (
                    complex(9.853818099925572e19, 1.7706371703968426e20)
                    - 5.015528326226779e19 * np.power(2.0, n)
                    + 5.636113161818078e19 * S1
                )
                + np.power(n, 4)
                * (
                    complex(1.8537407017470958e20, 3.181170428188106e20)
                    - 1.0918493529864626e20 * np.power(2.0, n)
                    + 1.012597996927796e20 * S1
                )
                + np.power(n, 2)
                * (
                    complex(2.266977589532697e20, 3.4319007865484195e20)
                    - 1.7687906077677814e20 * np.power(2.0, n)
                    + 1.0924079487602891e20 * S1
                )
                + np.power(n, 3)
                * (
                    complex(2.502191229329443e20, 4.0584332549912664e20)
                    - 1.7002838382983096e20 * np.power(2.0, n)
                    + 1.2918394274807806e20 * S1
                )
                + np.power(2.0, n)
                * (
                    2.3564799588509725e19
                    + 8.478001399222454e19 * n
                    + 1.3370157575983325e20 * np.power(n, 2)
                    + 1.2466630973632286e20 * np.power(n, 3)
                    + 7.785328964923633e19 * np.power(n, 4)
                    + 3.486897358712523e19 * np.power(n, 5)
                    + 1.1687447161634896e19 * np.power(n, 6)
                    + 3.0155406512887823e18 * np.power(n, 7)
                    + 6.105089518726959e17 * np.power(n, 8)
                    + 9.82371106169081e16 * np.power(n, 9)
                    + 1.2664628651211698e16 * np.power(n, 10)
                    + 1.3132619610082072e15 * np.power(n, 11)
                    + 1.0954999822883712e14 * np.power(n, 12)
                    + 7.32360303435598e12 * np.power(n, 13)
                    + 3.89099003739077e11 * np.power(n, 14)
                    + 1.6197513194763893e10 * np.power(n, 15)
                    + 5.165281444683772e8 * np.power(n, 16)
                    + 1.2173699665370196e7 * np.power(n, 17)
                    + 199674.43895580748 * np.power(n, 18)
                    + 2034.0350318078856 * np.power(n, 19)
                    + 9.685881103847077 * np.power(n, 20)
                )
                * mp.hyp2f1(1.0, 1.0 + n, 2.0 + n, 2.0)
            )
            / (
                np.power(1.0 + n, 2)
                * (2.0 + n)
                * (3.0 + n)
                * (4.0 + n)
                * (5.0 + n)
                * (6.0 + n)
                * (7.0 + n)
                * (8.0 + n)
                * (9.0 + n)
                * (10.0 + n)
                * (11.0 + n)
                * (12.0 + n)
                * (13.0 + n)
                * (14.0 + n)
                * (15.0 + n)
                * (16.0 + n)
                * (17.0 + n)
                * (18.0 + n)
                * (19.0 + n)
                * (20.0 + n)
            )
            + 20.523265391571346
            * n
            * mp.hyper(list([1.0, 1.0, 1.0 - 1.0 * n]), list([2.0, 2.0]), -1.0)
        )
    )
