# -*- coding: utf-8 -*-
"""This module contains some Mellin transform used for in the generalized haromonic sums.
Mellin transform is defined with the convention x^(n)
"""
import numba as nb
import numpy as np
import mpmath as mp

# @nb.njit("c16(c16,c16)", cache=True)
def H21(n, S1):
    """Mellin transform of  :math:`\int_{1}^{2} (x^(n)-1)(ln(1-x/2))/(x-1)`"""
    return complex(
        complex(-2.4674011002723395, -2.177586090303602) * (-1.0 + np.power(2.0, n))
        - 1.0
        * np.power(2.0, n)
        * n
        * (
            -0.00017861624734509784
            - (18.448868614597806 * (1.0 - 1.0 * np.power(2.0, -1.0 - 1.0 * n)))
            / (1.0 + n)
            + (53.03705951583224 * (1.0 - 1.0 * np.power(2.0, -2.0 - 1.0 * n)))
            / (2.0 + n)
            - (72.59017758173087 * (1.0 - 1.0 * np.power(2.0, -3.0 - 1.0 * n)))
            / (3.0 + n)
            + (48.721104697124765 * (1.0 - 1.0 * np.power(2.0, -4.0 - 1.0 * n)))
            / (4.0 + n)
            - (11.36436613468647 * (1.0 - 1.0 * np.power(2.0, -5.0 - 1.0 * n)))
            / (5.0 + n)
            - (8.388218542825193 * (1.0 - 1.0 * np.power(2.0, -6.0 - 1.0 * n)))
            / (6.0 + n)
            + (16.758614450512397 * (1.0 - 1.0 * np.power(2.0, -7.0 - 1.0 * n)))
            / (7.0 + n)
            - (22.231044375187043 * (1.0 - 1.0 * np.power(2.0, -8.0 - 1.0 * n)))
            / (8.0 + n)
            + (22.160106312069402 * (1.0 - 1.0 * np.power(2.0, -9.0 - 1.0 * n)))
            / (9.0 + n)
            - (15.945856292428402 * (1.0 - 1.0 * np.power(2.0, -10.0 - 1.0 * n)))
            / (10.0 + n)
            + (7.88216704187177 * (1.0 - 1.0 * np.power(2.0, -11.0 - 1.0 * n)))
            / (11.0 + n)
            - (2.400714286203908 * (1.0 - 1.0 * np.power(2.0, -12.0 - 1.0 * n)))
            / (12.0 + n)
            + (0.3429689205921761 * (1.0 - 1.0 * np.power(2.0, -13.0 - 1.0 * n)))
            / (13.0 + n)
            + (
                17.066666666666666
                * (
                    -1.3862943611198906 * np.power(2.0, -1.0 - 1.0 * n)
                    + S1
                    + mp.betainc(1.0 + n, 0.0, x2=0.5)
                )
            )
            / n
            - (
                62.0
                * (
                    -1.3862943611198906 * np.power(2.0, -2.0 - 1.0 * n)
                    + 1 / (1.0 + n)
                    + S1
                    + mp.betainc(2.0 + n, 0.0, x2=0.5)
                )
            )
            / (1.0 + n)
            + (
                98.0
                * (
                    -1.3862943611198906 * np.power(2.0, -3.0 - 1.0 * n)
                    + (3.0 + 2.0 * n) / ((1.0 + n) * (2.0 + n))
                    + S1
                    + mp.betainc(3.0 + n, 0.0, x2=0.5)
                )
            )
            / (2.0 + n)
            - (
                82.66666666666667
                * (
                    -1.3862943611198906 * np.power(2.0, -4.0 - 1.0 * n)
                    + (11.0 + 12.0 * n + 3.0 * np.power(n, 2))
                    / ((1.0 + n) * (2.0 + n) * (3.0 + n))
                    + S1
                    + mp.betainc(4.0 + n, 0.0, x2=0.5)
                )
            )
            / (3.0 + n)
            + (
                36.0
                * (
                    -1.3862943611198906 * np.power(2.0, -5.0 - 1.0 * n)
                    + (2.0 * (5.0 + 2.0 * n) * (5.0 + 5.0 * n + np.power(n, 2)))
                    / ((1.0 + n) * (2.0 + n) * (3.0 + n) * (4.0 + n))
                    + S1
                    + mp.betainc(5.0 + n, 0.0, x2=0.5)
                )
            )
            / (4.0 + n)
            - (
                6.4
                * (
                    -1.3862943611198906 * np.power(2.0, -6.0 - 1.0 * n)
                    + (
                        274.0
                        + 450.0 * n
                        + 255.0 * np.power(n, 2)
                        + 60.0 * np.power(n, 3)
                        + 5.0 * np.power(n, 4)
                    )
                    / ((1.0 + n) * (2.0 + n) * (3.0 + n) * (4.0 + n) * (5.0 + n))
                    + S1
                    + mp.betainc(6.0 + n, 0.0, x2=0.5)
                )
            )
            / (5.0 + n)
            - (
                0.6931471805599453
                * (
                    complex(0.0, 3.141592653589793) * np.power(2.0, n)
                    + S1
                    + mp.betainc(1.0 + n, 0.0, x2=2.0)
                )
            )
            / (np.power(2.0, 1.0 * n) * n)
        )
    )


def H22():
    return 0.0


@nb.njit("c16(c16,c16)", cache=True)
def H23(n, S1):
    r"""Mellin transform of  :math:`\int_{0}^{1} (x^(n)-1)(ln(1-x/2))/(x-1)`"""
    return complex(
        0.038644077596632104 * n
        + (0.17990633019243982 * n) / (2.0 + n)
        - (0.08838707737246981 * n) / (3.0 + n)
        + (0.006557861587551356 * n) / (4.0 + n)
        + (0.0024537382629694544 * n) / (5.0 + n)
        - (0.00005974273075922878 * n) / (6.0 + n)
        + (0.0018925349638931536 * n) / (7.0 + n)
        - (0.0019617338775610098 * n) / (8.0 + n)
        + (0.0017680265456417688 * n) / (9.0 + n)
        - (0.0008335702736569231 * n) / (10.0 + n)
        + (0.00020568989536588186 * n) / (11.0 + n)
        + 0.14018613535141447 * (-1.0 + 1 / (1.0 + n))
        - 0.027777777777777776
        * n
        * (1.391186796731926 - 30.0 / (1.0 + n) + 3.0 / (2.0 + n) - 4.0 / (3.0 + n))
        - 0.6931471805599453 * S1
    )


# @nb.njit("c16()", cache=True)
def H24():
    return 0.0


# @nb.njit("c16()", cache=True)
def H25():
    return 0.0


# @nb.njit("c16(c16,c16,c16)", cache=True)
def H26(n, S1, S2):
    """Linear combination of S211l2051 + S211l2105 - S22l205"""
    return complex(
        0.08333333333333333
        * (
            complex(-16.23484850566707, 21.491913260611398)
            + (
                -2.842170943040401e-14
                + 173.50286458333323 * n
                + 243.46289062500009 * np.power(n, 2)
                + 119.69466145833336 * np.power(n, 3)
                + 24.755859375 * np.power(n, 4)
                + 1.8337239583333333 * np.power(n, 5)
            )
            / (
                120.0
                + 274.0 * n
                + 225.0 * np.power(n, 2)
                + 85.0 * np.power(n, 3)
                + 15.0 * np.power(n, 4)
                + np.power(n, 5)
            )
            + (
                8.731149137020111e-11
                - 787729.060111111 * n
                - 3.0080453892458337e6 * np.power(n, 2)
                - 5.05889901240764e6 * np.power(n, 3)
                - 4.936113066185765e6 * np.power(n, 4)
                - 3.095514310441841e6 * np.power(n, 5)
                - 1.3041688939354168e6 * np.power(n, 6)
                - 373993.2982185764 * np.power(n, 7)
                - 72116.17108854167 * np.power(n, 8)
                - 8953.494551215279 * np.power(n, 9)
                - 646.6595444444445 * np.power(n, 10)
                - 20.644269618055556 * np.power(n, 11)
            )
            / (
                np.power(1.0 + n, 2)
                * np.power(2.0 + n, 3)
                * np.power(3.0 + n, 2)
                * np.power(4.0 + n, 2)
                * np.power(5.0 + n, 2)
            )
            + (
                np.power(n, 3) * (1.283807919976604e10 - 1.608646369206041e10 * S1)
                + np.power(n, 2) * (9.294220799968464e9 - 1.5655859137235104e10 * S1)
                + np.power(n, 4) * (1.0596601907417942e10 - 1.0982580115748644e10 * S1)
                + n * (3.028465456549388e9 - 9.00503846537143e9 * S1)
                + np.power(n, 5) * (5.843292892011012e9 - 5.294110506123972e9 * S1)
                + np.power(n, 6) * (2.2769289339052258e9 - 1.8644748220271614e9 * S1)
                + np.power(n, 7) * (6.458907520321677e8 - 4.886203781899511e8 * S1)
                + np.power(n, 8) * (1.3519818853965065e8 - 9.595384412927225e7 * S1)
                + np.power(n, 9) * (2.090277859286008e7 - 1.4075312614993623e7 * S1)
                + np.power(n, 10) * (2.3595465377532723e6 - 1.5203445475602325e6 * S1)
                + np.power(n, 11) * (189161.71919246286 - 117403.416519983 * S1)
                + np.power(n, 12) * (10205.69539860453 - 6133.497436933107 * S1)
                + np.power(n, 13) * (332.32934015883137 - 194.2227274659864 * S1)
                + np.power(n, 14) * (4.93556152059038 - 2.8148221371882087 * S1)
                - 2.288031552e9 * S1
            )
            / (
                (1.0 + n)
                * (2.0 + n)
                * np.power(3.0 + n, 2)
                * np.power(4.0 + n, 2)
                * np.power(5.0 + n, 2)
                * np.power(6.0 + n, 2)
                * np.power(7.0 + n, 2)
                * np.power(8.0 + n, 2)
            )
            + 18.614449574968226 * S1
            + 1.6449340668482262 * (9.869604401089358 - 6.0 * S2)
            + 16.848146067756026 * S2
            + 6.841088463857115 * mp.betainc(1.0 + n, 0.0, x2=2.0)
            + (
                complex(2.923121728206675e19, 3.701550063528897e19)
                - 2.9231217212083933e19 * np.power(2.0, n)
                + 1.1782399794254862e19 * S1
                + np.power(n, 21)
                * (
                    complex(6.758658057013846, 15.214546459695082)
                    + 4.8429405519235385 * S1
                )
                + np.power(n, 20)
                * (
                    complex(1431.8422861969393, 3210.269302995662)
                    - 17.26786632043568 * np.power(2.0, n)
                    + 1021.8604564558666 * S1
                )
                + np.power(n, 19)
                * (
                    complex(141958.51946738732, 316842.9300231501)
                    - 3589.81189979833 * np.power(2.0, n)
                    + 100854.23699380769 * S1
                )
                + np.power(n, 18)
                * (
                    complex(8.752539210101698e6, 1.943605059313438e7)
                    - 348830.0180568167 * np.power(2.0, n)
                    + 6.186687052163003e6 * S1
                )
                + np.power(n, 17)
                * (
                    complex(3.761407002787435e8, 8.304829147349784e8)
                    - 2.1047447076496072e7 * np.power(2.0, n)
                    + 2.6435092206687373e8 * S1
                )
                + np.power(n, 16)
                * (
                    complex(1.1968726692676088e10, 2.6254354741564106e10)
                    - 8.83520877339768e8 * np.power(2.0, n)
                    + 8.357020669616135e9 * S1
                )
                + np.power(n, 15)
                * (
                    complex(2.923873280138507e11, 6.36638280062443e11)
                    - 2.7398953857335464e10 * np.power(2.0, n)
                    + 2.0264825846692044e11 * S1
                )
                + np.power(n, 14)
                * (
                    complex(5.611456769193843e12, 1.2115084031103225e13)
                    - 6.505518151452606e11 * np.power(2.0, n)
                    + 3.8563510190475283e12 * S1
                )
                + np.power(n, 13)
                * (
                    complex(8.586610348984605e13, 1.8358462356351503e14)
                    - 1.2095125413375354e13 * np.power(2.0, n)
                    + 5.843680063159655e13 * S1
                )
                + np.power(n, 12)
                * (
                    complex(1.0571874861459436e15, 2.2349477992893992e15)
                    - 1.785829223423589e14 * np.power(2.0, n)
                    + 7.114059796185222e14 * S1
                )
                + np.power(n, 11)
                * (
                    complex(1.0523151695692176e16, 2.1956419230015896e16)
                    - 2.1112713439294792e15 * np.power(2.0, n)
                    + 6.988945306109954e15 * S1
                )
                + np.power(n, 10)
                * (
                    complex(8.47844216720592e16, 1.7420404467752794e17)
                    - 2.005909067824641e16 * np.power(2.0, n)
                    + 5.5450869634059896e16 * S1
                )
                + np.power(n, 9)
                * (
                    complex(5.5174139967361075e17, 1.1132957115890166e18)
                    - 1.531123605403968e17 * np.power(2.0, n)
                    + 3.543730312448022e17 * S1
                )
                + np.power(n, 8)
                * (
                    complex(2.884166025765176e18, 5.695785397422142e18)
                    - 9.350839180163167e17 * np.power(2.0, n)
                    + 1.813024801580739e18 * S1
                )
                + np.power(n, 7)
                * (
                    complex(1.1999636924131482e19, 2.3095399249450648e19)
                    - 4.5317048835340575e18 * np.power(2.0, n)
                    + 7.351493906461836e18 * S1
                )
                + np.power(n, 6)
                * (
                    complex(3.919356154375745e19, 7.313065470087013e19)
                    - 1.720130723544719e19 * np.power(2.0, n)
                    + 2.327821037438006e19 * S1
                )
                + n
                * (
                    complex(1.2214732964559317e20, 1.701876351998952e20)
                    - 1.0858123503594557e20 * np.power(2.0, n)
                    + 5.417240679036713e19 * S1
                )
                + np.power(n, 5)
                * (
                    complex(9.853818099925572e19, 1.7706371703968426e20)
                    - 5.015528326226779e19 * np.power(2.0, n)
                    + 5.636113161818078e19 * S1
                )
                + np.power(n, 4)
                * (
                    complex(1.8537407017470958e20, 3.181170428188106e20)
                    - 1.0918493529864626e20 * np.power(2.0, n)
                    + 1.012597996927796e20 * S1
                )
                + np.power(n, 2)
                * (
                    complex(2.266977589532697e20, 3.4319007865484195e20)
                    - 1.7687906077677814e20 * np.power(2.0, n)
                    + 1.0924079487602891e20 * S1
                )
                + np.power(n, 3)
                * (
                    complex(2.502191229329443e20, 4.0584332549912664e20)
                    - 1.7002838382983096e20 * np.power(2.0, n)
                    + 1.2918394274807806e20 * S1
                )
                + np.power(2.0, n)
                * (
                    2.3564799588509725e19
                    + 8.478001399222454e19 * n
                    + 1.3370157575983325e20 * np.power(n, 2)
                    + 1.2466630973632286e20 * np.power(n, 3)
                    + 7.785328964923633e19 * np.power(n, 4)
                    + 3.486897358712523e19 * np.power(n, 5)
                    + 1.1687447161634896e19 * np.power(n, 6)
                    + 3.0155406512887823e18 * np.power(n, 7)
                    + 6.105089518726959e17 * np.power(n, 8)
                    + 9.82371106169081e16 * np.power(n, 9)
                    + 1.2664628651211698e16 * np.power(n, 10)
                    + 1.3132619610082072e15 * np.power(n, 11)
                    + 1.0954999822883712e14 * np.power(n, 12)
                    + 7.32360303435598e12 * np.power(n, 13)
                    + 3.89099003739077e11 * np.power(n, 14)
                    + 1.6197513194763893e10 * np.power(n, 15)
                    + 5.165281444683772e8 * np.power(n, 16)
                    + 1.2173699665370196e7 * np.power(n, 17)
                    + 199674.43895580748 * np.power(n, 18)
                    + 2034.0350318078856 * np.power(n, 19)
                    + 9.685881103847077 * np.power(n, 20)
                )
                * mp.hyp2f1(1.0, 1.0 + n, 2.0 + n, 2.0)
            )
            / (
                np.power(1.0 + n, 2)
                * (2.0 + n)
                * (3.0 + n)
                * (4.0 + n)
                * (5.0 + n)
                * (6.0 + n)
                * (7.0 + n)
                * (8.0 + n)
                * (9.0 + n)
                * (10.0 + n)
                * (11.0 + n)
                * (12.0 + n)
                * (13.0 + n)
                * (14.0 + n)
                * (15.0 + n)
                * (16.0 + n)
                * (17.0 + n)
                * (18.0 + n)
                * (19.0 + n)
                * (20.0 + n)
            )
            + 20.523265391571346
            * n
            * mp.hyper(list([1.0, 1.0, 1.0 - 1.0 * n]), list([2.0, 2.0]), -1.0)
        )
    )


# @nb.njit("c16(c16,c16,c16)", cache=True)
def H27(n, S1, S2, S3, H21, H22, H23, H24, H25):
    """Linear combination of  + S1111l21105 + S112l2051 - S112l2105  + S121l2105 - S13l205"""
    return complex(
        0.125
        * (
            complex(0.0, -3.7763731361630786)
            + 6.579736267392905 * H21
            - 5.545177444479562 * H22
            - 4.657924211720099 * H23
            + 5.545177444479562 * H24
            - 11.090354888959125 * H25
            + (
                np.power(n, 2) * (166512.82004488667 - 201720.28849894297 * S1)
                + n * (90242.14129258736 - 187136.5352923044 * S1)
                + np.power(n, 3) * (123906.8708531517 - 114900.84903459821 * S1)
                + np.power(n, 4) * (48677.646427379485 - 38336.14469974578 * S1)
                + np.power(n, 5) * (10981.454596417643 - 7746.124654017857 * S1)
                + np.power(n, 6) * (1430.3006794295188 - 932.4038935391865 * S1)
                + np.power(n, 7) * (100.01173626580466 - 61.477179793792516 * S1)
                + np.power(n, 8) * (2.906155595873952 - 1.7076994387164588 * S1)
                - 68854.44136904762 * S1
            )
            / (
                (1.0 + n)
                * (2.0 + n)
                * (3.0 + n)
                * (4.0 + n)
                * (5.0 + n)
                * (6.0 + n)
                * (7.0 + n)
                * (8.0 + n)
            )
            - 1.2020569031595942 * S1
            + (
                -0.0007336773090573695
                + 7.859495005696298e12 * S1
                + np.power(n, 16) * (-9.241075421102035 + 6.010284515797971 * S1)
                + np.power(n, 15) * (-1105.0106534185607 + 727.2444264115545 * S1)
                + np.power(n, 14) * (-60346.64835347673 + 40268.9062558464 * S1)
                + np.power(n, 13) * (-1.993703454858508e6 + 1.3521938103642275e6 * S1)
                + np.power(n, 12) * (-4.44876775337904e7 + 3.0760768378113363e7 * S1)
                + np.power(n, 11) * (-7.08869171754117e8 + 5.016069381684878e8 * S1)
                + np.power(n, 10) * (-8.31402318508655e9 + 6.050278271228684e9 * S1)
                + np.power(n, 9) * (-7.290123023992578e10 + 5.490829893512993e10 * S1)
                + np.power(n, 8) * (-4.803845044281605e11 + 3.776788115127787e11 * S1)
                + np.power(n, 7) * (-2.3703519754219824e12 + 1.9679735450429246e12 * S1)
                + np.power(n, 6) * (-8.648840275214252e12 + 7.708041544226011e12 * S1)
                + np.power(n, 5) * (-2.279484275757239e13 + 2.2337134969431023e13 * S1)
                + n * (-1.001207262580593e13 + 3.3939099205736223e13 * S1)
                + np.power(n, 4) * (-4.172983402985361e13 + 4.6662701313365234e13 * S1)
                + np.power(n, 2) * (-3.406665456546434e13 + 6.313792233702593e13 * S1)
                + np.power(n, 3) * (-4.9683192493158414e13 + 6.745230111213624e13 * S1)
            )
            / (
                np.power(1.0 + n, 2)
                * (2.0 + n)
                * (3.0 + n)
                * (4.0 + n)
                * (5.0 + n)
                * (6.0 + n)
                * (7.0 + n)
                * (8.0 + n)
                * (9.0 + n)
                * (10.0 + n)
                * (11.0 + n)
                * (12.0 + n)
                * (13.0 + n)
                * (14.0 + n)
                * (15.0 + n)
            )
            + (
                -99.32989848572531
                + np.power(n, 22) * (-0.9355100821131798 + 0.4434370468112737 * S1)
                + 2.20443858177543e17 * S1
                + np.power(n, 21) * (-150.57465290980792 + 72.28023863023762 * S1)
                + np.power(n, 20) * (-11440.89362181615 + 5568.238996809164 * S1)
                + np.power(n, 19) * (-545637.9723982998 + 269603.0729055522 * S1)
                + np.power(n, 18) * (-1.831915210236284e7 + 9.203188251923285e6 * S1)
                + np.power(n, 17) * (-4.6026794036908334e8 + 2.355049625666434e8 * S1)
                + np.power(n, 16) * (-8.980394422508726e9 + 4.689184455219479e9 * S1)
                + np.power(n, 15) * (-1.3935836364261557e11 + 7.442871888563174e10 * S1)
                + np.power(n, 14) * (-1.7473045567526182e12 + 9.570690955792218e11 * S1)
                + np.power(n, 13) * (-1.788249770162659e13 + 1.0077248092011773e13 * S1)
                + np.power(n, 12) * (-1.5028583043797556e14 + 8.745996801754348e13 * S1)
                + np.power(n, 11) * (-1.0397819620196205e15 + 6.277592605543988e14 * S1)
                + np.power(n, 10) * (-5.918876268424598e15 + 3.728069626046019e15 * S1)
                + np.power(n, 9) * (-2.7616961613784108e16 + 1.827505362846522e16 * S1)
                + np.power(n, 8) * (-1.0485747029269587e17 + 7.35547191411904e16 * S1)
                + np.power(n, 7) * (-3.2026270760658944e17 + 2.4096459143424966e17 * S1)
                + np.power(n, 6) * (-7.734424871788384e17 + 6.34230567720652e17 * S1)
                + n * (-3.1340087860049805e17 + 9.809776158193391e17 * S1)
                + np.power(n, 5) * (-1.4397938063193528e18 + 1.3162578486499904e18 * S1)
                + np.power(n, 2) * (-1.1354522813905171e18 + 1.9870632431050053e18 * S1)
                + np.power(n, 4) * (-1.9873066473809416e18 + 2.0959888940331604e18 * S1)
                + np.power(n, 3) * (-1.9092369511909688e18 + 2.4579847528339195e18 * S1)
            )
            / (
                (1.0 + n)
                * (2.0 + n)
                * (3.0 + n)
                * np.power(4.0 + n, 2)
                * np.power(5.0 + n, 2)
                * np.power(6.0 + n, 2)
                * np.power(7.0 + n, 2)
                * np.power(8.0 + n, 2)
                * np.power(9.0 + n, 2)
                * np.power(10.0 + n, 2)
                * np.power(11.0 + n, 2)
                * np.power(12.0 + n, 2)
                * (13.0 + n)
            )
            + (
                0.0771690749603064
                - 2.9265897542022e14 * S1
                + np.power(n, 4)
                * (
                    1.8646570771238136e16
                    - 1.3567688107232536e16 * S1
                    - 1.0548153213696288e16 * S2
                )
                + np.power(n, 5)
                * (
                    2.006984550292455e16
                    - 1.2773238283187784e16 * S1
                    - 9.930510885955058e15 * S2
                )
                + np.power(n, 3)
                * (
                    1.2060026786369336e16
                    - 1.0617379594680504e16 * S1
                    - 8.254445842763882e15 * S2
                )
                + np.power(n, 6)
                * (
                    1.5999759249027844e16
                    - 9.21604560332962e15 * S1
                    - 7.164983472498301e15 * S2
                )
                + np.power(n, 2)
                * (
                    4.837597500758669e15
                    - 5.743240540248003e15 * S1
                    - 4.4650629261851955e15 * S2
                )
                + np.power(n, 7)
                * (
                    9.812573238712292e15
                    - 5.231530703029538e15 * S1
                    - 4.067235844572178e15 * S2
                )
                + np.power(n, 8)
                * (
                    4.746103710138956e15
                    - 2.3789804686183455e15 * S1
                    - 1.8495303162224455e15 * S2
                )
                + n
                * (
                    9.045778042903921e14
                    - 1.9094836801028798e15 * S1
                    - 1.48452162649884e15 * S2
                )
                + np.power(n, 9)
                * (
                    1.840940524250164e15
                    - 8.775056435445015e14 * S1
                    - 6.822137935980728e14 * S2
                )
                + np.power(n, 10)
                * (
                    5.790852192475322e14
                    - 2.6475047063537547e14 * S1
                    - 2.0582935763178938e14 * S2
                )
                + np.power(n, 11)
                * (
                    1.4876049616692416e14
                    - 6.566727023740917e13 * S1
                    - 5.105279706571004e13 * S2
                )
                + np.power(n, 12)
                * (
                    3.1320532612514152e13
                    - 1.3419476939923623e13 * S1
                    - 1.0432926943133523e13 * S2
                )
                + np.power(n, 13)
                * (
                    5.407223538821024e12
                    - 2.258177069167195e12 * S1
                    - 1.7556121220485374e12 * S2
                )
                + np.power(n, 14)
                * (
                    7.63456855164813e11
                    - 3.118465040960098e11 * S1
                    - 2.4244400949980518e11 * S2
                )
                + np.power(n, 15)
                * (
                    8.762636459456693e10
                    - 3.510751241827666e10 * S1
                    - 2.729421674591126e10 * S2
                )
                + np.power(n, 16)
                * (
                    8.092703316488976e9
                    - 3.1878704982672825e9 * S1
                    - 2.4783991329532785e9 * S2
                )
                + np.power(n, 17)
                * (
                    5.919991763679658e8
                    - 2.2974237677951336e8 * S1
                    - 1.7861243351085195e8 * S2
                )
                + np.power(n, 18)
                * (
                    3.3493266574617792e7
                    - 1.2827181926884457e7 * S1
                    - 9.9724491892327e6 * S2
                )
                + np.power(n, 19)
                * (
                    1.4123719882349833e6
                    - 534577.9631170281 * S1
                    - 415605.82872023806 * S2
                )
                + np.power(n, 20)
                * (
                    41761.32565753581
                    - 15641.245465554583 * S1
                    - 12160.233366195433 * S2
                )
                + np.power(n, 21)
                * (772.0492467310804 - 286.4516062526573 * S1 - 222.70083209325392 * S2)
                + np.power(n, 22)
                * (6.712196914492478 - 2.4694103987298046 * S1 - 1.919834759424603 * S2)
                - 2.2752673025039997e14 * S2
            )
            / (
                np.power(1.0 + n, 2)
                * np.power(2.0 + n, 2)
                * np.power(3.0 + n, 4)
                * np.power(4.0 + n, 2)
                * np.power(5.0 + n, 2)
                * np.power(6.0 + n, 2)
                * np.power(7.0 + n, 2)
                * np.power(8.0 + n, 2)
                * np.power(9.0 + n, 2)
                * np.power(10.0 + n, 2)
            )
            + (
                -1.5027717445776854e-9
                - 6.69187577857838e6 * S1
                + np.power(n, 4)
                * (
                    2.7802697767986834e8
                    - 1.7598306282171097e8 * S1
                    - 2.0899366776840028e8 * S2
                )
                + np.power(n, 3)
                * (
                    2.2290863736359698e8
                    - 1.6617600527154762e8 * S1
                    - 1.9734701896844792e8 * S2
                )
                + np.power(n, 5)
                * (
                    2.3233586127079147e8
                    - 1.3185401467528436e8 * S1
                    - 1.5658696749069476e8 * S2
                )
                + np.power(n, 2)
                * (
                    1.0735720397100002e8
                    - 1.0481893979951563e8 * S1
                    - 1.2448069904596138e8 * S2
                )
                + np.power(n, 6)
                * (
                    1.3733480754676133e8
                    - 7.21556540222501e7 * S1
                    - 8.569048942860737e7 * S2
                )
                + n
                * (
                    2.346811804325443e7
                    - 3.948206709361244e7 * S1
                    - 4.688804638734895e7 * S2
                )
                + np.power(n, 7)
                * (
                    5.9068956110853195e7
                    - 2.9326900334110886e7 * S1
                    - 3.4827990641994946e7 * S2
                )
                + np.power(n, 8)
                * (
                    1.8716920175328404e7
                    - 8.904006082429819e6 * S1
                    - 1.0574204466962924e7 * S2
                )
                + np.power(n, 9)
                * (
                    4.369502175593268e6
                    - 2.0112998054058799e6 * S1
                    - 2.3885760173381087e6 * S2
                )
                + np.power(n, 10)
                * (742367.1089287619 - 333002.79029907763 * S1 - 395466.8898575944 * S2)
                + np.power(n, 11)
                * (89238.96159823332 - 39216.66399560401 * S1 - 46572.85942560097 * S2)
                + np.power(n, 12)
                * (7189.465207901569 - 3107.7721714752024 * S1 - 3690.722813269728 * S2)
                + np.power(n, 13)
                * (
                    348.04953328095235
                    - 148.45017641522256 * S1
                    - 176.29620914891743 * S2
                )
                + np.power(n, 14)
                * (7.649609990582573 - 3.227177748157012 * S1 - 3.832526285846031 * S2)
                - 7.94712650633033e6 * S2
            )
            / (
                np.power(1.0 + n, 2)
                * np.power(2.0 + n, 4)
                * np.power(3.0 + n, 2)
                * np.power(4.0 + n, 2)
                * np.power(5.0 + n, 2)
                * np.power(6.0 + n, 2)
            )
            + (
                -2.0536305397787174e17 * S1
                - 2.2256200168054272e17 * S2
                + np.power(n, 7)
                * (
                    7.488098037238662e20
                    - 2.946375088218397e20 * S1
                    - 3.193131016673674e20 * S2
                    - 3.799456323070507e20 * S3
                )
                + np.power(n, 8)
                * (
                    7.30264831364528e20
                    - 2.71532571821718e20 * S1
                    - 2.9427314960274712e20 * S2
                    - 3.5015098758232205e20 * S3
                )
                + np.power(n, 6)
                * (
                    6.177204922810032e20
                    - 2.6157067495896564e20 * S1
                    - 2.8347695397084837e20 * S2
                    - 3.373047643786608e20 * S3
                )
                + np.power(n, 9)
                * (
                    5.8400874656639694e20
                    - 2.0769852191609772e20 * S1
                    - 2.2509306269236576e20 * S2
                    - 2.6783469136093286e20 * S3
                )
                + np.power(n, 5)
                * (
                    3.991243537765913e20
                    - 1.863520884696265e20 * S1
                    - 2.019588870723487e20 * S2
                    - 2.4030770002248768e20 * S3
                )
                + np.power(n, 10)
                * (
                    3.884280841236816e20
                    - 1.3331261847836026e20 * S1
                    - 1.4447741520738879e20 * S2
                    - 1.719114016569323e20 * S3
                )
                + np.power(n, 4)
                * (
                    1.941539256202762e20
                    - 1.037136201699684e20 * S1
                    - 1.1239953077952802e20 * S2
                    - 1.3374243202062749e20 * S3
                )
                + np.power(n, 11)
                * (
                    2.1714818176898564e20
                    - 7.240795785261171e19 * S1
                    - 7.84720509610949e19 * S2
                    - 9.337265794969823e19 * S3
                )
                + np.power(n, 3)
                * (
                    6.674068902186431e19
                    - 4.334180202679847e19 * S1
                    - 4.697163403386798e19 * S2
                    - 5.589080780056582e19 * S3
                )
                + np.power(n, 12)
                * (
                    1.0285760474577702e20
                    - 3.3495073506999865e19 * S1
                    - 3.630025197696012e19 * S2
                    - 4.319309830468156e19 * S3
                )
                + np.power(n, 13)
                * (
                    4.152987402406034e19
                    - 1.3260813853758188e19 * S1
                    - 1.437139357853292e19 * S2
                    - 1.7100294951308622e19 * S3
                )
                + np.power(n, 2)
                * (
                    1.4426634312692584e19
                    - 1.2766361168145222e19 * S1
                    - 1.383553098146518e19 * S2
                    - 1.646268048384875e19 * S3
                )
                + np.power(n, 14)
                * (
                    1.4355806022040816e19
                    - 4.5090539738436506e18 * S1
                    - 4.886682675708466e18 * S2
                    - 5.814586778340482e18 * S3
                )
                + n
                * (
                    1.4722170431513467e18
                    - 2.3589858426577193e18 * S1
                    - 2.556548516923281e18 * S2
                    - 3.0419968291746964e18 * S3
                )
                + np.power(n, 15)
                * (
                    4.2611489273254656e18
                    - 1.3198929523220705e18 * S1
                    - 1.4304326498012352e18 * S2
                    - 1.7020492888122632e18 * S3
                )
                + np.power(n, 16)
                * (
                    1.0879213298582682e18
                    - 3.330098647641433e17 * S1
                    - 3.608991035420647e17 * S2
                    - 4.294281611945237e17 * S3
                )
                + np.power(n, 17)
                * (
                    2.3903221211390477e17
                    - 7.242566351952211e16 * S1
                    - 7.849123945967018e16 * S2
                    - 9.339549004204315e16 * S3
                )
                + np.power(n, 18)
                * (
                    4.516433468485152e16
                    - 1.3564628989469896e16 * S1
                    - 1.4700652924043664e16 * S2
                    - 1.7492075462568086e16 * S3
                )
                + np.power(n, 19)
                * (
                    7.324075821658249e15
                    - 2.1829261559919405e15 * S1
                    - 2.3657440098778855e15 * S2
                    - 2.814961550328176e15 * S3
                )
                + np.power(n, 20)
                * (
                    1.0158957617673035e15
                    - 3.007636290956304e14 * S1
                    - 3.25952278307278e14 * S2
                    - 3.878454840615735e14 * S3
                )
                + np.power(n, 21)
                * (
                    1.1991809347780238e14
                    - 3.529401882158612e13 * S1
                    - 3.8249857139003e13 * S2
                    - 4.551290279179315e13 * S3
                )
                + np.power(n, 22)
                * (
                    1.1961219447874947e13
                    - 3.5021031665673315e12 * S1
                    - 3.795400758536529e12 * S2
                    - 4.516087606586902e12 * S3
                )
                + np.power(n, 23)
                * (
                    9.983887045155367e11
                    - 2.909667375174094e11 * S1
                    - 3.153349069853116e11 * S2
                    - 3.752120410888339e11 * S3
                )
                + np.power(n, 24)
                * (
                    6.881721914457945e10
                    - 1.9973221161205063e10 * S1
                    - 2.164595819715926e10 * S2
                    - 2.575618485795491e10 * S3
                )
                + np.power(n, 25)
                * (
                    3.8459999519303937e9
                    - 1.1121280148924243e9 * S1
                    - 1.2052676093633516e9 * S2
                    - 1.4341289522651784e9 * S3
                )
                + np.power(n, 26)
                * (
                    1.6979480143673667e8
                    - 4.893579744396906e7 * S1
                    - 5.303412089955037e7 * S2
                    - 6.310446547232142e7 * S3
                )
                + np.power(n, 27)
                * (
                    5.6960113322322285e6
                    - 1.6367080201903752e6 * S1
                    - 1.7737806586155398e6 * S2
                    - 2.110593678720238e6 * S3
                )
                + np.power(n, 28)
                * (
                    136369.8397219097
                    - 39078.72687348644 * S1
                    - 42351.53065569196 * S2
                    - 50393.41953125001 * S3
                )
                + np.power(n, 29)
                * (
                    2074.721945948902
                    - 593.0786658463794 * S1
                    - 642.7484032206632 * S2
                    - 764.7962053571429 * S3
                )
                + np.power(n, 30)
                * (
                    15.06796770343253
                    - 4.297671491640431 * S1
                    - 4.657597124787415 * S2
                    - 5.542001488095237 * S3
                )
                - 2.648230217127936e17 * S3
            )
            / (
                np.power(1.0 + n, 6)
                * np.power(2.0 + n, 3)
                * np.power(3.0 + n, 3)
                * np.power(4.0 + n, 3)
                * np.power(5.0 + n, 3)
                * np.power(6.0 + n, 3)
                * np.power(7.0 + n, 3)
                * np.power(8.0 + n, 3)
                * np.power(9.0 + n, 3)
            )
            - 1.2020569031595942 * mp.betainc(2.0, 1.0 + n, 0.0)
        )
    )
