# -*- coding: utf-8 -*-
"""This module contains some approximations for generalized harmonics sum"""
# import numba as nb
import numpy as np
import mpmath as mp
from ...anomalous_dimensions.harmonics import zeta2, zeta3

ln2 = np.log(2)

# @nb.njit("c16(c16)", cache=True)
def S111l211(H22, H24):
    return complex(H24 + H22)


# @nb.njit("c16(c16)", cache=True)
def S12l21(H25):
    return complex(2.0 * H25)


# @nb.njit("c16(c16,c16)", cache=True)
def S1111l20511(n, S1):
    return complex(
        -1.9723041257941845
        - 0.08333333333333336 / (4.0 + n)
        + 36.70520952439886 / ((1.0 + n) * (2.0 + n) * (3.0 + n) * (4.0 + n))
        + (51.3872933341584 * n) / ((1.0 + n) * (2.0 + n) * (3.0 + n) * (4.0 + n))
        + (22.023125714639317 * np.power(n, 2))
        / ((1.0 + n) * (2.0 + n) * (3.0 + n) * (4.0 + n))
        + (2.9364167619519086 * np.power(n, 3))
        / ((1.0 + n) * (2.0 + n) * (3.0 + n) * (4.0 + n))
        + 0.5570208571546438 / (5.0 + n)
        + 0.47368752382131046 / (6.0 + n)
        + 0.404243079376866 / (7.0 + n)
        + 0.3472986349324216 / (8.0 + n)
        + 0.3005104404879771 / (9.0 + n)
        + 0.26170973502060496 / (10.0 + n)
        + 0.22915021121108117 / (11.0 + n)
        + 0.20149148105235104 / (12.0 + n)
        + 0.1777199863433563 / (13.0 + n)
        + 0.15706943319280317 / (14.0 + n)
        + 0.13895637231188515 / (15.0 + n)
        + 0.12293186353142399 / (16.0 + n)
        + 0.10864628686024465 / (17.0 + n)
        + 0.09582397689507753 / (18.0 + n)
        + 0.08424493020690386 / (19.0 + n)
        + 0.07373153305835264 / (20.0 + n)
        + 0.06413884299411146 / (21.0 + n)
        + 0.05534739575263509 / (22.0 + n)
        + 0.047257820113419974 / (23.0 + n)
        + 0.03978675952632231 / (24.0 + n)
        + 0.03286374838430062 / (25.0 + n)
        + 0.02642879344355784 / (26.0 + n)
        + 0.02043048189300573 / (27.0 + n)
        + 0.014824487031234552 / (28.0 + n)
        + 0.009572377262420904 / (29.0 + n)
        + 0.004640658782124118 / (30.0 + n)
        + 0.7341041904879771 * S1
        + 0.9015426773696957 * n * mp.hyper([1.0, 1.0, 1.0 - 1.0 * n], [2.0, 2.0], -1.0)
    )


# @nb.njit("c16(c16)", cache=True)
def S1l05(n):
    return complex(ln2 - 1.0 * mp.betainc(1.0 + n, 0.0, x2=0.5))


# @nb.njit("c16(c16,c16,c16,c16)", cache=True)
def S31l205(n, S1, S2, S3):
    # HarmonicNumber[5. +N]
    Snp5 = (274 + 450 * n + 255 * n ** 2 + 60 * n ** 3 + 5 * n ** 4) / (
        (1 + n) * (2 + n) * (3 + n) * (4 + n) * (5 + n)
    ) + S1
    # Mellin[PolyLog[3,x/2]/(-1+x)]
    H29 = (
        -0.557968
        + 1 / (-4 - 2 * n)
        - 0.53125 / (3 + n)
        - 0.53588 / (4 + n)
        - 0.536856 / (5 + n)
        + 0.537106 * Snp5
    )
    return (
        H29
        - 1.0 / 6.0 * ln2 ** 3 * S1
        + 1.0 / 2.0 * ln2 * zeta2 * S1
        - 7.0 / 8.0 * zeta3 * S1
        - 1.0 / 2.0 * ln2 ** 2 * S2
        + 1.0 / 2.0 * zeta2 * S2
        - ln2 * S3
        + ln2 * S3l2(n)
    )


# @nb.njit("c16(c16,c16,c16)", cache=True)
def S121l2051(n, S1, H23):
    # HarmonicNumber S[1,N+15]
    Hp15 = (
        4339163001600
        + 12331635229440 * n
        + 15170987111472 * n ** 2
        + 10827253382400 * n ** 3
        + 5048360535400 * n ** 4
        + 1636819264080 * n ** 5
        + 382417906871 * n ** 6
        + 65661024000 * n ** 7
        + 8352861660 * n ** 8
        + 785584800 * n ** 9
        + 53895842 * n ** 10
        + 2620800 * n ** 11
        + 85540 * n ** 12
        + 1680 * n ** 13
        + 15 * n ** 14
    ) / (
        (1 + n)
        * (2 + n)
        * (3 + n)
        * (4 + n)
        * (5 + n)
        * (6 + n)
        * (7 + n)
        * (8 + n)
        * (9 + n)
        * (10 + n)
        * (11 + n)
        * (12 + n)
        * (13 + n)
        * (14 + n)
        * (15 + n)
    ) + S1
    return complex(
        -1.6449340668482262 * H23
        - (
            -1.0970571006583727e12
            / (
                (3.0 + n)
                * (4.0 + n)
                * (5.0 + n)
                * (6.0 + n)
                * (7.0 + n)
                * (8.0 + n)
                * (9.0 + n)
                * (10.0 + n)
                * (11.0 + n)
                * (12.0 + n)
                * (13.0 + n)
                * (14.0 + n)
                * (15.0 + n)
            )
            - (1.9125237074510933e12 * n)
            / (
                (3.0 + n)
                * (4.0 + n)
                * (5.0 + n)
                * (6.0 + n)
                * (7.0 + n)
                * (8.0 + n)
                * (9.0 + n)
                * (10.0 + n)
                * (11.0 + n)
                * (12.0 + n)
                * (13.0 + n)
                * (14.0 + n)
                * (15.0 + n)
            )
            - (1.4994381266170989e12 * np.power(n, 2))
            / (
                (3.0 + n)
                * (4.0 + n)
                * (5.0 + n)
                * (6.0 + n)
                * (7.0 + n)
                * (8.0 + n)
                * (9.0 + n)
                * (10.0 + n)
                * (11.0 + n)
                * (12.0 + n)
                * (13.0 + n)
                * (14.0 + n)
                * (15.0 + n)
            )
            - (7.009994340470765e11 * np.power(n, 3))
            / (
                (3.0 + n)
                * (4.0 + n)
                * (5.0 + n)
                * (6.0 + n)
                * (7.0 + n)
                * (8.0 + n)
                * (9.0 + n)
                * (10.0 + n)
                * (11.0 + n)
                * (12.0 + n)
                * (13.0 + n)
                * (14.0 + n)
                * (15.0 + n)
            )
            - (2.183094685920398e11 * np.power(n, 4))
            / (
                (3.0 + n)
                * (4.0 + n)
                * (5.0 + n)
                * (6.0 + n)
                * (7.0 + n)
                * (8.0 + n)
                * (9.0 + n)
                * (10.0 + n)
                * (11.0 + n)
                * (12.0 + n)
                * (13.0 + n)
                * (14.0 + n)
                * (15.0 + n)
            )
            - (4.787984810093941e10 * np.power(n, 5))
            / (
                (3.0 + n)
                * (4.0 + n)
                * (5.0 + n)
                * (6.0 + n)
                * (7.0 + n)
                * (8.0 + n)
                * (9.0 + n)
                * (10.0 + n)
                * (11.0 + n)
                * (12.0 + n)
                * (13.0 + n)
                * (14.0 + n)
                * (15.0 + n)
            )
            - (7.616207507383221e9 * np.power(n, 6))
            / (
                (3.0 + n)
                * (4.0 + n)
                * (5.0 + n)
                * (6.0 + n)
                * (7.0 + n)
                * (8.0 + n)
                * (9.0 + n)
                * (10.0 + n)
                * (11.0 + n)
                * (12.0 + n)
                * (13.0 + n)
                * (14.0 + n)
                * (15.0 + n)
            )
            - (8.904886102155218e8 * np.power(n, 7))
            / (
                (3.0 + n)
                * (4.0 + n)
                * (5.0 + n)
                * (6.0 + n)
                * (7.0 + n)
                * (8.0 + n)
                * (9.0 + n)
                * (10.0 + n)
                * (11.0 + n)
                * (12.0 + n)
                * (13.0 + n)
                * (14.0 + n)
                * (15.0 + n)
            )
            - (7.659214612862481e7 * np.power(n, 8))
            / (
                (3.0 + n)
                * (4.0 + n)
                * (5.0 + n)
                * (6.0 + n)
                * (7.0 + n)
                * (8.0 + n)
                * (9.0 + n)
                * (10.0 + n)
                * (11.0 + n)
                * (12.0 + n)
                * (13.0 + n)
                * (14.0 + n)
                * (15.0 + n)
            )
            - (4.790018361468757e6 * np.power(n, 9))
            / (
                (3.0 + n)
                * (4.0 + n)
                * (5.0 + n)
                * (6.0 + n)
                * (7.0 + n)
                * (8.0 + n)
                * (9.0 + n)
                * (10.0 + n)
                * (11.0 + n)
                * (12.0 + n)
                * (13.0 + n)
                * (14.0 + n)
                * (15.0 + n)
            )
            - (211858.07625410164 * np.power(n, 10))
            / (
                (3.0 + n)
                * (4.0 + n)
                * (5.0 + n)
                * (6.0 + n)
                * (7.0 + n)
                * (8.0 + n)
                * (9.0 + n)
                * (10.0 + n)
                * (11.0 + n)
                * (12.0 + n)
                * (13.0 + n)
                * (14.0 + n)
                * (15.0 + n)
            )
            - (6279.1827747379675 * np.power(n, 11))
            / (
                (3.0 + n)
                * (4.0 + n)
                * (5.0 + n)
                * (6.0 + n)
                * (7.0 + n)
                * (8.0 + n)
                * (9.0 + n)
                * (10.0 + n)
                * (11.0 + n)
                * (12.0 + n)
                * (13.0 + n)
                * (14.0 + n)
                * (15.0 + n)
            )
            - (111.83851326006433 * np.power(n, 12))
            / (
                (3.0 + n)
                * (4.0 + n)
                * (5.0 + n)
                * (6.0 + n)
                * (7.0 + n)
                * (8.0 + n)
                * (9.0 + n)
                * (10.0 + n)
                * (11.0 + n)
                * (12.0 + n)
                * (13.0 + n)
                * (14.0 + n)
                * (15.0 + n)
            )
            - (0.9044729718388043 * np.power(n, 13))
            / (
                (3.0 + n)
                * (4.0 + n)
                * (5.0 + n)
                * (6.0 + n)
                * (7.0 + n)
                * (8.0 + n)
                * (9.0 + n)
                * (10.0 + n)
                * (11.0 + n)
                * (12.0 + n)
                * (13.0 + n)
                * (14.0 + n)
                * (15.0 + n)
            )
            + (3.3061524774118085e11 * Hp15)
            / (
                (3.0 + n)
                * (4.0 + n)
                * (5.0 + n)
                * (6.0 + n)
                * (7.0 + n)
                * (8.0 + n)
                * (9.0 + n)
                * (10.0 + n)
                * (11.0 + n)
                * (12.0 + n)
                * (13.0 + n)
                * (14.0 + n)
                * (15.0 + n)
            )
            + (6.011342290466014e11 * n * Hp15)
            / (
                (3.0 + n)
                * (4.0 + n)
                * (5.0 + n)
                * (6.0 + n)
                * (7.0 + n)
                * (8.0 + n)
                * (9.0 + n)
                * (10.0 + n)
                * (11.0 + n)
                * (12.0 + n)
                * (13.0 + n)
                * (14.0 + n)
                * (15.0 + n)
            )
            + (4.9187554395002936e11 * np.power(n, 2) * Hp15)
            / (
                (3.0 + n)
                * (4.0 + n)
                * (5.0 + n)
                * (6.0 + n)
                * (7.0 + n)
                * (8.0 + n)
                * (9.0 + n)
                * (10.0 + n)
                * (11.0 + n)
                * (12.0 + n)
                * (13.0 + n)
                * (14.0 + n)
                * (15.0 + n)
            )
            + (2.401640821300795e11 * np.power(n, 3) * Hp15)
            / (
                (3.0 + n)
                * (4.0 + n)
                * (5.0 + n)
                * (6.0 + n)
                * (7.0 + n)
                * (8.0 + n)
                * (9.0 + n)
                * (10.0 + n)
                * (11.0 + n)
                * (12.0 + n)
                * (13.0 + n)
                * (14.0 + n)
                * (15.0 + n)
            )
            + (7.817131339252147e10 * np.power(n, 4) * Hp15)
            / (
                (3.0 + n)
                * (4.0 + n)
                * (5.0 + n)
                * (6.0 + n)
                * (7.0 + n)
                * (8.0 + n)
                * (9.0 + n)
                * (10.0 + n)
                * (11.0 + n)
                * (12.0 + n)
                * (13.0 + n)
                * (14.0 + n)
                * (15.0 + n)
            )
            + (1.7933250800932724e10 * np.power(n, 5) * Hp15)
            / (
                (3.0 + n)
                * (4.0 + n)
                * (5.0 + n)
                * (6.0 + n)
                * (7.0 + n)
                * (8.0 + n)
                * (9.0 + n)
                * (10.0 + n)
                * (11.0 + n)
                * (12.0 + n)
                * (13.0 + n)
                * (14.0 + n)
                * (15.0 + n)
            )
            + (2.986455305719683e9 * np.power(n, 6) * Hp15)
            / (
                (3.0 + n)
                * (4.0 + n)
                * (5.0 + n)
                * (6.0 + n)
                * (7.0 + n)
                * (8.0 + n)
                * (9.0 + n)
                * (10.0 + n)
                * (11.0 + n)
                * (12.0 + n)
                * (13.0 + n)
                * (14.0 + n)
                * (15.0 + n)
            )
            + (3.659103962777948e8 * np.power(n, 7) * Hp15)
            / (
                (3.0 + n)
                * (4.0 + n)
                * (5.0 + n)
                * (6.0 + n)
                * (7.0 + n)
                * (8.0 + n)
                * (9.0 + n)
                * (10.0 + n)
                * (11.0 + n)
                * (12.0 + n)
                * (13.0 + n)
                * (14.0 + n)
                * (15.0 + n)
            )
            + (3.3015840269221872e7 * np.power(n, 8) * Hp15)
            / (
                (3.0 + n)
                * (4.0 + n)
                * (5.0 + n)
                * (6.0 + n)
                * (7.0 + n)
                * (8.0 + n)
                * (9.0 + n)
                * (10.0 + n)
                * (11.0 + n)
                * (12.0 + n)
                * (13.0 + n)
                * (14.0 + n)
                * (15.0 + n)
            )
            + (2.1686039669867153e6 * np.power(n, 9) * Hp15)
            / (
                (3.0 + n)
                * (4.0 + n)
                * (5.0 + n)
                * (6.0 + n)
                * (7.0 + n)
                * (8.0 + n)
                * (9.0 + n)
                * (10.0 + n)
                * (11.0 + n)
                * (12.0 + n)
                * (13.0 + n)
                * (14.0 + n)
                * (15.0 + n)
            )
            + (100870.34556855283 * np.power(n, 10) * Hp15)
            / (
                (3.0 + n)
                * (4.0 + n)
                * (5.0 + n)
                * (6.0 + n)
                * (7.0 + n)
                * (8.0 + n)
                * (9.0 + n)
                * (10.0 + n)
                * (11.0 + n)
                * (12.0 + n)
                * (13.0 + n)
                * (14.0 + n)
                * (15.0 + n)
            )
            + (3148.7061275553474 * np.power(n, 11) * Hp15)
            / (
                (3.0 + n)
                * (4.0 + n)
                * (5.0 + n)
                * (6.0 + n)
                * (7.0 + n)
                * (8.0 + n)
                * (9.0 + n)
                * (10.0 + n)
                * (11.0 + n)
                * (12.0 + n)
                * (13.0 + n)
                * (14.0 + n)
                * (15.0 + n)
            )
            + (59.16149300208377 * np.power(n, 12) * Hp15)
            / (
                (3.0 + n)
                * (4.0 + n)
                * (5.0 + n)
                * (6.0 + n)
                * (7.0 + n)
                * (8.0 + n)
                * (9.0 + n)
                * (10.0 + n)
                * (11.0 + n)
                * (12.0 + n)
                * (13.0 + n)
                * (14.0 + n)
                * (15.0 + n)
            )
            + (0.5056537863425963 * np.power(n, 13) * Hp15)
            / (
                (3.0 + n)
                * (4.0 + n)
                * (5.0 + n)
                * (6.0 + n)
                * (7.0 + n)
                * (8.0 + n)
                * (9.0 + n)
                * (10.0 + n)
                * (11.0 + n)
                * (12.0 + n)
                * (13.0 + n)
                * (14.0 + n)
                * (15.0 + n)
            )
        )
        + 0.631966197838168
        * n
        * mp.hyper(list([1.0, 1.0, 1.0 - 1.0 * n]), list([2.0, 2.0]), -1.0)
    )


# @nb.njit("c16(c16,c16)", cache=True)
def S21l21(n, S1):
    return complex(
        (
            complex(1.6833606003593822e27, 2.1316401151124944e27)
            - 1.6833606028664177e27 * np.power(2.0, n)
            + complex(1.1280238519747306e28, 1.4284014544217873e28) * n
            - 9.793413137165368e27 * np.power(2.0, n) * n
            + complex(3.5133648703234346e28, 4.4489029733809166e28) * np.power(n, 2)
            - 2.6584983157605467e28 * np.power(2.0, n) * np.power(n, 2)
            + complex(6.7936790083925e28, 8.602679035475088e28) * np.power(n, 3)
            - 4.500022047614448e28 * np.power(2.0, n) * np.power(n, 3)
            + complex(9.19012141317016e28, 1.1637229431490278e29) * np.power(n, 4)
            - 5.351614784848519e28 * np.power(2.0, n) * np.power(n, 4)
            + complex(9.2890946632445e28, 1.1762554569358886e29) * np.power(n, 5)
            - 4.774123285176482e28 * np.power(2.0, n) * np.power(n, 5)
            + complex(7.314978363595366e28, 9.262779365216703e28) * np.power(n, 6)
            - 3.3296016110218174e28 * np.power(2.0, n) * np.power(n, 6)
            + complex(4.618995743047189e28, 5.848922626855809e28) * np.power(n, 7)
            - 1.867555495886855e28 * np.power(2.0, n) * np.power(n, 7)
            + complex(2.3881423804543337e28, 3.024047281480256e28) * np.power(n, 8)
            - 8.598161226007345e27 * np.power(2.0, n) * np.power(n, 8)
            + complex(1.027023747870955e28, 1.3004956199394855e28) * np.power(n, 9)
            - 3.299192196302645e27 * np.power(2.0, n) * np.power(n, 9)
            + complex(3.718430053139092e27, 4.708559564429205e27) * np.power(n, 10)
            - 1.0673974911524395e27 * np.power(2.0, n) * np.power(n, 10)
            + complex(1.1441604044899806e27, 1.4488232559998715e27) * np.power(n, 11)
            - 2.9379890367598923e26 * np.power(2.0, n) * np.power(n, 11)
            + complex(3.014106578187488e26, 3.816692213649815e26) * np.power(n, 12)
            - 6.927509956951886e25 * np.power(2.0, n) * np.power(n, 12)
            + complex(6.836865750537136e25, 8.657362927743468e25) * np.power(n, 13)
            - 1.4066600113346826e25 * np.power(2.0, n) * np.power(n, 13)
            + complex(1.3411340313136578e25, 1.6982467451739608e25) * np.power(n, 14)
            - 2.4692772904714515e24 * np.power(2.0, n) * np.power(n, 14)
            + complex(2.2823563954140286e24, 2.890094902276634e24) * np.power(n, 15)
            - 3.757351574332791e23 * np.power(2.0, n) * np.power(n, 15)
            + complex(3.3768613922826975e23, 4.276041487375118e23) * np.power(n, 16)
            - 4.963794071544808e22 * np.power(2.0, n) * np.power(n, 16)
            + complex(4.348682972736758e22, 5.506637080449338e22) * np.power(n, 17)
            - 5.696446468351613e21 * np.power(2.0, n) * np.power(n, 17)
            + complex(4.875275445814089e21, 6.173449430059735e21) * np.power(n, 18)
            - 5.67601106161025e20 * np.power(2.0, n) * np.power(n, 18)
            + complex(4.754442901083716e20, 6.020442354673485e20) * np.power(n, 19)
            - 4.902928615262456e19 * np.power(2.0, n) * np.power(n, 19)
            + complex(4.0260266191939265e19, 5.098065797780899e19) * np.power(n, 20)
            - 3.661480489217735e18 * np.power(2.0, n) * np.power(n, 20)
            + complex(2.951591241364906e18, 3.7375329856855946e18) * np.power(n, 21)
            - 2.354412432066986e17 * np.power(2.0, n) * np.power(n, 21)
            + complex(1.8655124802380563e17, 2.3622562465222666e17) * np.power(n, 22)
            - 1.296218655332279e16 * np.power(2.0, n) * np.power(n, 22)
            + complex(1.0106075448696164e16, 1.2797095428905186e16) * np.power(n, 23)
            - 6.06359582313501e14 * np.power(2.0, n) * np.power(n, 23)
            + complex(4.6562817914004075e14, 5.896144952336889e14) * np.power(n, 24)
            - 2.385660927511548e13 * np.power(2.0, n) * np.power(n, 24)
            + complex(1.805881124487301e13, 2.286746791927984e13) * np.power(n, 25)
            - 7.786891093408528e11 * np.power(2.0, n) * np.power(n, 25)
            + complex(5.814854720381085e11, 7.363220583644232e11) * np.power(n, 26)
            - 2.0694973396132874e10 * np.power(2.0, n) * np.power(n, 26)
            + complex(1.5255184441562937e10, 1.93173001082478e10) * np.power(n, 27)
            - 4.361551307055125e8 * np.power(2.0, n) * np.power(n, 27)
            + complex(3.1755495944092846e8, 4.021127881543603e8) * np.power(n, 28)
            - 7.009322268197093e6 * np.power(2.0, n) * np.power(n, 28)
            + complex(5.043047411303078e6, 6.385899164941185e6) * np.power(n, 29)
            - 80650.58350683903 * np.power(2.0, n) * np.power(n, 29)
            + complex(57364.741155652126, 72639.7036051468) * np.power(n, 30)
            - 591.4373566195608 * np.power(2.0, n) * np.power(n, 30)
            + complex(416.0214728560528, 526.7988174426441) * np.power(n, 31)
            - 2.076022092268843 * np.power(2.0, n) * np.power(n, 31)
            + complex(1.4445189418954867, 1.8291625605647361) * np.power(n, 32)
            + 1.9169483570505036e27 * S1
            + 1.2845375736034561e28 * n * S1
            + 4.000824147114336e28 * np.power(n, 2) * S1
            + 7.736245591539027e28 * np.power(n, 3) * S1
            + 1.046516608556964e29 * np.power(n, 4) * S1
            + 1.0577868889120365e29 * np.power(n, 5) * S1
            + 8.329862794375306e28 * np.power(n, 6) * S1
            + 5.259838441103391e28 * np.power(n, 7) * S1
            + 2.7194752185317597e28 * np.power(n, 8) * S1
            + 1.1695139926857725e28 * np.power(n, 9) * S1
            + 4.2343289831692154e27 * np.power(n, 10) * S1
            + 1.302902558717772e27 * np.power(n, 11) * S1
            + 3.43228756883164e26 * np.power(n, 12) * S1
            + 7.785421902632924e25 * np.power(n, 13) * S1
            + 1.527204937150373e25 * np.power(n, 14) * S1
            + 2.599014080923719e24 * np.power(n, 15) * S1
            + 3.845372699542644e23 * np.power(n, 16) * S1
            + 4.952026765401563e22 * np.power(n, 17) * S1
            + 5.551679975614853e21 * np.power(n, 18) * S1
            + 5.4140832679439185e20 * np.power(n, 19) * S1
            + 4.584605434053637e19 * np.power(n, 20) * S1
            + 3.3611009970855055e18 * np.power(n, 21) * S1
            + 2.1243375927292365e17 * np.power(n, 22) * S1
            + 1.1508214207239058e16 * np.power(n, 23) * S1
            + 5.302304689793915e14 * np.power(n, 24) * S1
            + 2.0564332012233316e13 * np.power(n, 25) * S1
            + 6.621621304810342e11 * np.power(n, 26) * S1
            + 1.737172538770829e10 * np.power(n, 27) * S1
            + 3.616133150885176e8 * np.power(n, 28) * S1
            + 5.742732474275174e6 * np.power(n, 29) * S1
            + 65323.672366324005 * np.power(n, 30) * S1
            + 473.74137896608875 * np.power(n, 31) * S1
            + 1.644935343632253 * np.power(n, 32) * S1
            + np.power(2.0, n)
            * (
                1.3570442448525208e27
                + 7.736441842782683e27 * n
                + 2.0586154139209478e28 * np.power(n, 2)
                + 3.418020155394567e28 * np.power(n, 3)
                + 3.990470196270089e28 * np.power(n, 4)
                + 3.497804616136419e28 * np.power(n, 5)
                + 2.3990638748389658e28 * np.power(n, 6)
                + 1.3244759164655748e28 * np.power(n, 7)
                + 6.006923754991886e27 * np.power(n, 8)
                + 2.2722885003172314e27 * np.power(n, 9)
                + 7.25273617768887e26 * np.power(n, 10)
                + 1.9707591366660945e26 * np.power(n, 11)
                + 4.590225915847702e25 * np.power(n, 12)
                + 9.212225005158819e24 * np.power(n, 13)
                + 1.5991495582075087e24 * np.power(n, 14)
                + 2.4074200060054864e23 * np.power(n, 15)
                + 3.1479255232159525e22 * np.power(n, 16)
                + 3.577085214505872e21 * np.power(n, 17)
                + 3.530547563815296e20 * np.power(n, 18)
                + 3.0218507756908265e19 * np.power(n, 19)
                + 2.2367871200740178e18 * np.power(n, 20)
                + 1.4260027848947278e17 * np.power(n, 21)
                + 7.785624904017476e15 * np.power(n, 22)
                + 3.612590748983618e14 * np.power(n, 23)
                + 1.4101170841935729e13 * np.power(n, 24)
                + 4.5671137945917285e11 * np.power(n, 25)
                + 1.2045801726015282e10 * np.power(n, 26)
                + 2.519734716536869e8 * np.power(n, 27)
                + 4.019480007235419e6 * np.power(n, 28)
                + 45909.66551176623 * np.power(n, 29)
                + 334.2060621909171 * np.power(n, 30)
                + 1.164481052930025 * np.power(n, 31)
            )
            * mp.hyp2f1(1.0, 1.0 + n, 2.0 + n, 2.0)
            + n
            * (
                1.9169468691324218e27
                + 1.2845365765569392e28 * n
                + 4.000821041710599e28 * np.power(n, 2)
                + 7.736239586734746e28 * np.power(n, 3)
                + 1.0465157962601805e29 * np.power(n, 4)
                + 1.0577860678673627e29 * np.power(n, 5)
                + 8.329856328810687e28 * np.power(n, 6)
                + 5.259834358464076e28 * np.power(n, 7)
                + 2.7194731076995423e28 * np.power(n, 8)
                + 1.1695130849195251e28 * np.power(n, 9)
                + 4.2343256965211237e27 * np.power(n, 10)
                + 1.302901547416519e27 * np.power(n, 11)
                + 3.4322849047208846e26 * np.power(n, 12)
                + 7.785415859658431e25 * np.power(n, 13)
                + 1.52720375174763e25 * np.power(n, 14)
                + 2.5990120635923536e24 * np.power(n, 15)
                + 3.845369714798924e23 * np.power(n, 16)
                + 4.9520229216829045e22 * np.power(n, 17)
                + 5.551675666450765e21 * np.power(n, 18)
                + 5.414079065581157e20 * np.power(n, 19)
                + 4.584601875524113e19 * np.power(n, 20)
                + 3.361098388229127e18 * np.power(n, 21)
                + 2.1243359438374944e17 * np.power(n, 22)
                + 1.1508205274666648e16 * np.power(n, 23)
                + 5.302300574192681e14 * np.power(n, 24)
                + 2.0564316050383676e13 * np.power(n, 25)
                + 6.621616165167411e11 * np.power(n, 26)
                + 1.737171190393121e10 * np.power(n, 27)
                + 3.6161303440751326e8 * np.power(n, 28)
                + 5.742728016817852e6 * np.power(n, 29)
                + 65323.62166267675 * np.power(n, 30)
                + 473.7410112522892 * np.power(n, 31)
                + 1.6449340668482266 * np.power(n, 32)
            )
            * mp.hyper(list([1.0, 1.0, 1.0 - 1.0 * n]), list([2.0, 2.0]), -1.0)
        )
        / (
            np.power(1.0 + n, 2)
            * np.power(2.0 + n, 2)
            * np.power(3.0 + n, 2)
            * np.power(4.0 + n, 2)
            * np.power(5.0 + n, 2)
            * np.power(6.0 + n, 2)
            * np.power(7.0 + n, 2)
            * np.power(8.0 + n, 2)
            * np.power(9.0 + n, 2)
            * np.power(10.0 + n, 2)
            * np.power(11.0 + n, 2)
            * np.power(12.0 + n, 2)
            * (13.0 + n)
            * (14.0 + n)
            * (15.0 + n)
            * (16.0 + n)
            * (17.0 + n)
            * (18.0 + n)
            * (19.0 + n)
            * (20.0 + n)
        )
    )


# @nb.njit("c16(c16,c16,c16)", cache=True)
def S1111l21051(n, S1, H21):
    return complex(
        (
            complex(0.00008138020833333333, 0.00011869952602801132)
            - complex(1.1108200333002769e12, 0.000021919931066000538) * n
            - complex(3.0545253221968545e12, 0.000416485473072374) * np.power(n, 2)
            - complex(3.746669508953097e12, 0.0005080718865495499) * np.power(n, 3)
            - complex(2.732663230220466e12, 0.00037230189267925355) * np.power(n, 4)
            - complex(1.3303092958914858e12, 0.00019969252622130892) * np.power(n, 5)
            - complex(4.592245894160175e11, 0.00007079577081180635) * np.power(n, 6)
            - complex(1.1640732704756241e11, 0.000015694489505731582) * np.power(n, 7)
            - complex(2.2109629870529408e10, 2.5755745976631705e-6) * np.power(n, 8)
            - complex(3.1780932871117997e9, 4.259823137078089e-7) * np.power(n, 9)
            - complex(3.4627926147031265e8, 5.3381447021793165e-8) * np.power(n, 10)
            - complex(2.84068280075561e7, 3.5211097252823663e-9) * np.power(n, 11)
            - complex(1.72524518874892e6, 2.480870637667729e-10) * np.power(n, 12)
            - complex(75180.21417891773, 2.672155268808036e-12) * np.power(n, 13)
            - complex(2221.544934523533, 3.024184544294806e-13) * np.power(n, 14)
            - 39.8447173169642 * np.power(n, 15)
            - 0.3272966537768275 * np.power(n, 16)
            + H21
            * (
                -4.302076232534848e12
                - 1.53507931440122e13 * n
                - 2.3853545410321223e13 * np.power(n, 2)
                - 2.170803074046334e13 * np.power(n, 3)
                - 1.3064271224116332e13 * np.power(n, 4)
                - 5.547952832953075e12 * np.power(n, 5)
                - 1.7279086122273728e12 * np.power(n, 6)
                - 4.041008596208101e11 * np.power(n, 7)
                - 7.193431686649904e10 * np.power(n, 8)
                - 9.803816052654116e9 * np.power(n, 9)
                - 1.0217751899949871e9 * np.power(n, 10)
                - 8.073087028086561e7 * np.power(n, 11)
                - 4.748284771638826e6 * np.power(n, 12)
                - 201274.13241954896 * np.power(n, 13)
                - 5806.617255974238 * np.power(n, 14)
                - 101.98591214459 * np.power(n, 15)
                - 0.8224670334241131 * np.power(n, 16)
            )
            + complex(7.708392419040001e11, 0.00009449713909064082) * S1
            + complex(2.7505309320805107e12, 0.0003858633179534501) * n * S1
            + complex(4.2740406880192827e12, 0.0006260435464754956)
            * np.power(n, 2)
            * S1
            + complex(3.8896107494933716e12, 0.0005118595034076379)
            * np.power(n, 3)
            * S1
            + complex(2.3408355366339976e12, 0.0002323054669311587)
            * np.power(n, 4)
            * S1
            + complex(9.940734484272197e11, 0.00007481023511342399)
            * np.power(n, 5)
            * S1
            + complex(3.0960394301147516e11, 0.000027684708717961177)
            * np.power(n, 6)
            * S1
            + complex(7.24061554109936e10, 0.000010043397107127028)
            * np.power(n, 7)
            * S1
            + complex(1.2889077571640892e10, 2.3570453394597503e-6)
            * np.power(n, 8)
            * S1
            + complex(1.7566323154951086e9, 3.441363097579897e-7) * np.power(n, 9) * S1
            + complex(1.8308006885037723e8, 3.4608702131655363e-8)
            * np.power(n, 10)
            * S1
            + complex(1.4465230154437648e7, 1.9284163711165284e-9)
            * np.power(n, 11)
            * S1
            + complex(850790.1849888319, 4.107008214012321e-12) * np.power(n, 12) * S1
            + complex(36063.98196197322, 1.1734309182892347e-12) * np.power(n, 13) * S1
            + complex(1040.4205322471842, 1.1734309182892347e-13) * np.power(n, 14) * S1
            + 18.27367507063043 * np.power(n, 15) * S1
            + 0.14736834734379375 * np.power(n, 16) * S1
            + n
            * (
                -2.196022510565852e12
                - 7.835911191984595e12 * n
                - 1.2176195828823182e13 * np.power(n, 2)
                - 1.1081004052321111e13 * np.power(n, 3)
                - 6.668741356866405e12 * np.power(n, 4)
                - 2.831988242464008e12 * np.power(n, 5)
                - 8.820220757492529e11 * np.power(n, 6)
                - 2.062758854794705e11 * np.power(n, 7)
                - 3.671933517271283e10 * np.power(n, 8)
                - 5.004421023099778e9 * np.power(n, 9)
                - 5.2157172413576376e8 * np.power(n, 10)
                - 4.1209592497130744e7 * np.power(n, 11)
                - 2.4237925321355704e6 * np.power(n, 12)
                - 102741.67673860745 * np.power(n, 13)
                - 2964.0251625309274 * np.power(n, 14)
                - 52.059365460883136 * np.power(n, 15)
                - 0.419833592426477 * np.power(n, 16)
            )
            * mp.hyper(list([1.0, 1.0, 1.0 - 1.0 * n]), list([2.0, 2.0]), -1.0)
        )
        / (
            (1.0 + n)
            * (2.0 + n)
            * (3.0 + n)
            * np.power(4.0 + n, 2)
            * (5.0 + n)
            * (6.0 + n)
            * (7.0 + n)
            * (8.0 + n)
            * (9.0 + n)
            * (10.0 + n)
            * (11.0 + n)
            * (12.0 + n)
            * (13.0 + n)
            * (14.0 + n)
            * (15.0 + n)
        )
    )


# @nb.njit("c16(c16)", cache=True)
def S3l2(n):
    return complex(
        2.0 * ((1.38104 - 0.377347j) - 2 ** n * mp.lerchphi(2.0, 3.0, 1.0 + n))
    )
