# -*- coding: utf-8 -*-
"""This module contains some approximations for generalized harmonics sum"""
import numba as nb
import numpy as np
import mpmath as mp
from ...anomalous_dimensions.harmonics import zeta2, zeta3

ln2 = np.log(2)

# @nb.njit("c16(c16)", cache=True)
def S111l211(H24):
    return complex(H24)


# @nb.njit("c16(c16,c16)", cache=True)
def S1111l20511(n, S1):
    return complex(
        -1.9723041257941845
        - 0.08333333333333336 / (4.0 + n)
        + 36.70520952439886 / ((1.0 + n) * (2.0 + n) * (3.0 + n) * (4.0 + n))
        + (51.3872933341584 * n) / ((1.0 + n) * (2.0 + n) * (3.0 + n) * (4.0 + n))
        + (22.023125714639317 * np.power(n, 2))
        / ((1.0 + n) * (2.0 + n) * (3.0 + n) * (4.0 + n))
        + (2.9364167619519086 * np.power(n, 3))
        / ((1.0 + n) * (2.0 + n) * (3.0 + n) * (4.0 + n))
        + 0.5570208571546438 / (5.0 + n)
        + 0.47368752382131046 / (6.0 + n)
        + 0.404243079376866 / (7.0 + n)
        + 0.3472986349324216 / (8.0 + n)
        + 0.3005104404879771 / (9.0 + n)
        + 0.26170973502060496 / (10.0 + n)
        + 0.22915021121108117 / (11.0 + n)
        + 0.20149148105235104 / (12.0 + n)
        + 0.1777199863433563 / (13.0 + n)
        + 0.15706943319280317 / (14.0 + n)
        + 0.13895637231188515 / (15.0 + n)
        + 0.12293186353142399 / (16.0 + n)
        + 0.10864628686024465 / (17.0 + n)
        + 0.09582397689507753 / (18.0 + n)
        + 0.08424493020690386 / (19.0 + n)
        + 0.07373153305835264 / (20.0 + n)
        + 0.06413884299411146 / (21.0 + n)
        + 0.05534739575263509 / (22.0 + n)
        + 0.047257820113419974 / (23.0 + n)
        + 0.03978675952632231 / (24.0 + n)
        + 0.03286374838430062 / (25.0 + n)
        + 0.02642879344355784 / (26.0 + n)
        + 0.02043048189300573 / (27.0 + n)
        + 0.014824487031234552 / (28.0 + n)
        + 0.009572377262420904 / (29.0 + n)
        + 0.004640658782124118 / (30.0 + n)
        + 0.7341041904879771 * S1
        + 0.9015426773696957 * n * mp.hyper([1.0, 1.0, 1.0 - 1.0 * n], [2.0, 2.0], -1.0)
    )


# @nb.njit("c16(c16)", cache=True)
def S1l05(n):
    return complex(ln2 - 1.0 * mp.betainc(1.0 + n, 0.0, x2=0.5))


# @nb.njit("c16(c16,c16,c16, c16,c16)", cache=True)
def S121l2105(n, S1, S2, H23, H25):
    return complex(
        0.041666666666666664
        * (
            8.718466787621855
            - 13.9737726351603 * H23
            - 33.27106466687737 * H25
            + 2.9999999999999996 / (3.0 + n)
            + 4.249999999999999 / (4.0 + n)
            + 4.760416666666666 / (5.0 + n)
            + 4.973958333333333 / (6.0 + n)
            + 5.065434027777777 / (7.0 + n)
            + 5.105381944444444 / (8.0 + n)
            + 5.137736900800947 * S1
            - 5.123098316149376
            * (
                (
                    4.0
                    * (9.0 + 2.0 * n)
                    * (
                        3044.0
                        + 5886.0 * n
                        + 4299.0 * np.power(n, 2)
                        + 1539.0 * np.power(n, 3)
                        + 288.0 * np.power(n, 4)
                        + 27.0 * np.power(n, 5)
                        + np.power(n, 6)
                    )
                )
                / (
                    (1.0 + n)
                    * (2.0 + n)
                    * (3.0 + n)
                    * (4.0 + n)
                    * (5.0 + n)
                    * (6.0 + n)
                    * (7.0 + n)
                    * (8.0 + n)
                )
                + S1
            )
            + (
                -4.508315233733057e-9
                - 2.0075627335735142e7 * S1
                + np.power(n, 4)
                * (
                    8.34080933039605e8
                    - 5.27949188465133e8 * S1
                    - 6.269810033052008e8 * S2
                )
                + np.power(n, 3)
                * (
                    6.68725912090791e8
                    - 4.985280158146429e8 * S1
                    - 5.920410569053438e8 * S2
                )
                + np.power(n, 5)
                * (
                    6.970075838123745e8
                    - 3.955620440258531e8 * S1
                    - 4.6976090247208434e8 * S2
                )
                + np.power(n, 2)
                * (
                    3.220716119130001e8
                    - 3.1445681939854693e8 * S1
                    - 3.7344209713788414e8 * S2
                )
                + np.power(n, 6)
                * (
                    4.1200442264028406e8
                    - 2.1646696206675032e8 * S1
                    - 2.5707146828582215e8 * S2
                )
                + n
                * (
                    7.04043541297633e7
                    - 1.1844620128083734e8 * S1
                    - 1.4066413916204685e8 * S2
                )
                + np.power(n, 7)
                * (
                    1.7720686833255962e8
                    - 8.798070100233266e7 * S1
                    - 1.0448397192598484e8 * S2
                )
                + np.power(n, 8)
                * (
                    5.615076052598522e7
                    - 2.671201824728946e7 * S1
                    - 3.1722613400888775e7 * S2
                )
                + np.power(n, 9)
                * (
                    1.3108506526779806e7
                    - 6.03389941621764e6 * S1
                    - 7.165728052014327e6 * S2
                )
                + np.power(n, 10)
                * (
                    2.227101326786286e6
                    - 999008.3708972329 * S1
                    - 1.1864006695727834e6 * S2
                )
                + np.power(n, 11)
                * (
                    267716.88479469996
                    - 117649.99198681205 * S1
                    - 139718.5782768029 * S2
                )
                + np.power(n, 12)
                * (21568.39562370471 - 9323.316514425609 * S1 - 11072.168439809184 * S2)
                + np.power(n, 13)
                * (1044.148599842857 - 445.3505292456677 * S1 - 528.8886274467523 * S2)
                + np.power(n, 14)
                * (22.94882997174772 - 9.681533244471037 * S1 - 11.497578857538095 * S2)
                - 2.384137951899099e7 * S2
            )
            / (
                np.power(1.0 + n, 2)
                * np.power(2.0 + n, 4)
                * np.power(3.0 + n, 2)
                * np.power(4.0 + n, 2)
                * np.power(5.0 + n, 2)
                * np.power(6.0 + n, 2)
            )
            + (complex(0.0, 16.14067650363345) * np.cos(3.141592653589793 * n))
            / np.power(2.718281828459045, complex(0.0, 3.141592653589793) * n)
            + (
                16.14067650363345
                * np.cos(3.141592653589793 * n)
                * 1
                / np.tan(3.141592653589793 * n)
            )
            / np.power(2.718281828459045, complex(0.0, 3.141592653589793) * n)
            + (
                3.2349177543783325
                * np.power(2.0, n)
                * np.cos(3.141592653589793 * n)
                * (-2.0 + n * mp.lerchphi(0.5, 1.0, 1.0 - 1.0 * n))
            )
            / (np.power(2.718281828459045, complex(0.0, 3.141592653589793) * n) * n)
            - (
                0.33302465198892944
                * np.power(2.0, 1.0 + n)
                * np.cos(3.141592653589793 * n)
                * (-2.0 + n * mp.lerchphi(0.5, 1.0, 1.0 - 1.0 * n))
            )
            / (np.power(2.718281828459045, complex(0.0, 3.141592653589793) * n) * n)
            + (
                complex(0.0, 3.2349177543783325)
                * np.power(2.0, n)
                * (-2.0 + n * mp.lerchphi(0.5, 1.0, 1.0 - 1.0 * n))
                * np.sin(3.141592653589793 * n)
            )
            / (np.power(2.718281828459045, complex(0.0, 3.141592653589793) * n) * n)
            - (
                complex(0.0, 0.33302465198892944)
                * np.power(2.0, 1.0 + n)
                * (-2.0 + n * mp.lerchphi(0.5, 1.0, 1.0 - 1.0 * n))
                * np.sin(3.141592653589793 * n)
            )
            / (np.power(2.718281828459045, complex(0.0, 3.141592653589793) * n) * n)
        )
    )


# @nb.njit("c16(c16,c16,c16,c16,c16)", cache=True)
def S112l2105(n, S1, S2, H21, H23):
    return complex(
        0.020833333333333332
        * (
            -27.9475452703206 * (H21 + H23)
            - 14.823618004648024 * S1
            + (
                -0.9260288995236766
                + 1.75595385252132e15 * S1
                + 1.3651603815024e15 * S2
                + np.power(n, 22)
                * (
                    -40.27318148695487
                    + 14.816462392378826 * S1
                    + 11.519008556547618 * S2
                )
                + np.power(n, 21)
                * (
                    -4632.295480386484
                    + 1718.7096375159438 * S1
                    + 1336.2049925595238 * S2
                )
                + np.power(n, 20)
                * (-250567.9539452148 + 93847.47279332748 * S1 + 72961.40019717262 * S2)
                + np.power(n, 19)
                * (
                    -8.474231929409903e6
                    + 3.207467778702168e6 * S1
                    + 2.4936349723214284e6 * S2
                )
                + np.power(n, 18)
                * (
                    -2.0095959944770676e8
                    + 7.696309156130673e7 * S1
                    + 5.98346951353962e7 * S2
                )
                + np.power(n, 17)
                * (
                    -3.5519950582077947e9
                    + 1.3784542606770802e9 * S1
                    + 1.0716746010651115e9 * S2
                )
                + np.power(n, 16)
                * (
                    -4.8556219898933846e10
                    + 1.912722298960369e10 * S1
                    + 1.4870394797719671e10 * S2
                )
                + np.power(n, 15)
                * (
                    -5.257581875674014e11
                    + 2.106450745096599e11 * S1
                    + 1.6376530047546756e11 * S2
                )
                + np.power(n, 14)
                * (
                    -4.580741130988878e12
                    + 1.8710790245760586e12 * S1
                    + 1.4546640569988308e12 * S2
                )
                + np.power(n, 13)
                * (
                    -3.244334123292615e13
                    + 1.3549062415003168e13 * S1
                    + 1.0533672732291225e13 * S2
                )
                + np.power(n, 12)
                * (
                    -1.8792319567508488e14
                    + 8.051686163954172e13 * S1
                    + 6.259756165880115e13 * S2
                )
                + np.power(n, 11)
                * (
                    -8.925629770015451e14
                    + 3.94003621424455e14 * S1
                    + 3.063167823942602e14 * S2
                )
                + np.power(n, 10)
                * (
                    -3.474511315485193e15
                    + 1.5885028238122522e15 * S1
                    + 1.2349761457907358e15 * S2
                )
                + np.power(n, 9)
                * (
                    -1.1045643145500984e16
                    + 5.265033861267008e15 * S1
                    + 4.093282761588436e15 * S2
                )
                + n
                * (
                    -5.427466825742352e15
                    + 1.145690208061728e16 * S1
                    + 8.907129758993039e15 * S2
                )
                + np.power(n, 8)
                * (
                    -2.8476622260833744e16
                    + 1.4273882811710074e16 * S1
                    + 1.1097181897334674e16 * S2
                )
                + np.power(n, 7)
                * (
                    -5.887543943227375e16
                    + 3.1389184218177224e16 * S1
                    + 2.440341506743307e16 * S2
                )
                + np.power(n, 2)
                * (
                    -2.9025585004552024e16
                    + 3.4459443241488012e16 * S1
                    + 2.6790377557111176e16 * S2
                )
                + np.power(n, 6)
                * (
                    -9.599855549416707e16
                    + 5.529627361997772e16 * S1
                    + 4.298990083498981e16 * S2
                )
                + np.power(n, 3)
                * (
                    -7.2360160718216e16
                    + 6.370427756808302e16 * S1
                    + 4.95266750565833e16 * S2
                )
                + np.power(n, 5)
                * (
                    -1.2041907301754731e17
                    + 7.66394296991267e16 * S1
                    + 5.958306531573035e16 * S2
                )
                + np.power(n, 4)
                * (
                    -1.118794246274288e17
                    + 8.14061286433952e16 * S1
                    + 6.328891928217773e16 * S2
                )
            )
            / (
                np.power(1.0 + n, 2)
                * np.power(2.0 + n, 2)
                * np.power(3.0 + n, 4)
                * np.power(4.0 + n, 2)
                * np.power(5.0 + n, 2)
                * np.power(6.0 + n, 2)
                * np.power(7.0 + n, 2)
                * np.power(8.0 + n, 2)
                * np.power(9.0 + n, 2)
                * np.power(10.0 + n, 2)
            )
            + (
                13.9737726351603
                * (complex(0.0, 1.0) + 1 / np.tan(3.141592653589793 * n))
                * (
                    2.0
                    * (
                        -0.6931471805599453 * np.power(2.0, n)
                        + H23 * n
                        + 0.6931471805599453 * n * S1
                        + 2.177586090303602 * n * 1 / np.tan(3.141592653589793 * n)
                    )
                    + 0.6931471805599453
                    * np.power(2.0, n)
                    * n
                    * mp.lerchphi(0.5, 1.0, 1.0 - 1.0 * n)
                )
                * np.sin(3.141592653589793 * n)
            )
            / (np.power(2.718281828459045, complex(0.0, 3.141592653589793) * n) * n)
            - (
                7.411809002324012
                * (complex(0.0, 1.0) + 1 / np.tan(3.141592653589793 * n))
                * (
                    6.283185307179586 * n * np.cos(3.141592653589793 * n)
                    + np.power(2.0, n)
                    * (-2.0 + n * mp.lerchphi(0.5, 1.0, 1.0 - 1.0 * n))
                    * np.sin(3.141592653589793 * n)
                )
            )
            / (np.power(2.718281828459045, complex(0.0, 3.141592653589793) * n) * n)
        )
    )


# @nb.njit("c16(c16,c16,c16)", cache=True)
def S211l2105(n, S1, S2):
    return complex(
        0.041666666666666664
        * (
            complex(26.40764917447151, 30.42909291939018)
            - (19.351524467966858 * np.power(2.0, n)) / (1.0 + n)
            - (6.262726309306497 * np.power(2.0, n)) / (2.0 + n)
            - 0.7343749999999999 / (3.0 + n)
            + (12.00212909720108 * np.power(2.0, n)) / (3.0 + n)
            - 0.23437499999999994 / (4.0 + n)
            - (172.2163955321142 * np.power(2.0, n)) / (4.0 + n)
            - 0.0625 / (5.0 + n)
            + (1405.5398464455116 * np.power(2.0, n)) / (5.0 + n)
            - (8703.997977574893 * np.power(2.0, n)) / (6.0 + n)
            + (41928.01774475129 * np.power(2.0, n)) / (7.0 + n)
            - (160951.91817594544 * np.power(2.0, n)) / (8.0 + n)
            + (499634.153549029 * np.power(2.0, n)) / (9.0 + n)
            - (1.2654327397059284e6 * np.power(2.0, n)) / (10.0 + n)
            + (2.6260030398488953e6 * np.power(2.0, n)) / (11.0 + n)
            - (4.465586330056064e6 * np.power(2.0, n)) / (12.0 + n)
            + (6.198176978342689e6 * np.power(2.0, n)) / (13.0 + n)
            - (6.961720352934347e6 * np.power(2.0, n)) / (14.0 + n)
            + (6.236645257147073e6 * np.power(2.0, n)) / (15.0 + n)
            - (4.355777195115037e6 * np.power(2.0, n)) / (16.0 + n)
            + (2.287718942232814e6 * np.power(2.0, n)) / (17.0 + n)
            - (850756.7344439693 * np.power(2.0, n)) / (18.0 + n)
            + (199917.59252552615 * np.power(2.0, n)) / (19.0 + n)
            - (22348.960043583 * np.power(2.0, n)) / (20.0 + n)
            - 7.411809002324012 * S1
            - 2.234375
            * (
                -0.5772156649015329
                - 1.0 / (3.0 + n)
                + (11.0 + 12.0 * n + 3.0 * np.power(n, 2))
                / (6.0 + 11.0 * n + 6.0 * np.power(n, 2) + np.power(n, 3))
                + S1
            )
            + (
                2301.0054569785552
                + 2.3564799588509725e19 * S1
                + np.power(n, 21) * (-10.512601395041514 + 9.685881103847077 * S1)
                + np.power(n, 20) * (-2206.628022019722 + 2043.7209129117334 * S1)
                + np.power(n, 19) * (-216505.99319159146 + 201708.47398761538 * S1)
                + np.power(n, 18) * (-1.3192300150519693e7 + 1.2373374104326006e7 * S1)
                + np.power(n, 17) * (-5.593867445718834e8 + 5.287018441337475e8 * S1)
                + np.power(n, 16) * (-1.752878291455452e10 + 1.6714041339232273e10 * S1)
                + np.power(n, 15) * (-4.207344725909635e11 + 4.05296516933841e11 * S1)
                + np.power(n, 14) * (-7.911700211293982e12 + 7.712702038095058e12 * S1)
                + np.power(n, 13) * (-1.182221056152559e14 + 1.168736012631931e14 * S1)
                + np.power(n, 12)
                * (-1.4155108114396065e15 + 1.4228119592370445e15 * S1)
                + np.power(n, 11) * (-1.363175581264904e16 + 1.3977890612219908e16 * S1)
                + np.power(n, 10) * (-1.0556974421987099e17 + 1.109017392681198e17 * S1)
                + np.power(n, 9) * (-6.548610450489597e17 + 7.087460624896044e17 * S1)
                + np.power(n, 8) * (-3.227614926711552e18 + 3.6260496031614787e18 * S1)
                + np.power(n, 7) * (-1.2477695102045143e19 + 1.4702987812923677e19 * S1)
                + np.power(n, 6) * (-3.711573495044675e19 + 4.655642074876013e19 * S1)
                + n * (-2.4500394557497614e19 + 1.0834481358073427e20 * S1)
                + np.power(n, 5) * (-8.257880390369016e19 + 1.1272226323636158e20 * S1)
                + np.power(n, 4) * (-1.3168723078804224e20 + 2.025195993855592e20 * S1)
                + np.power(n, 2) * (-8.864030957300654e19 + 2.184815897520579e20 * S1)
                + np.power(n, 3) * (-1.4055237841498638e20 + 2.583678854961562e20 * S1)
            )
            / (
                np.power(1.0 + n, 2)
                * (2.0 + n)
                * (3.0 + n)
                * (4.0 + n)
                * (5.0 + n)
                * (6.0 + n)
                * (7.0 + n)
                * (8.0 + n)
                * (9.0 + n)
                * (10.0 + n)
                * (11.0 + n)
                * (12.0 + n)
                * (13.0 + n)
                * (14.0 + n)
                * (15.0 + n)
                * (16.0 + n)
                * (17.0 + n)
                * (18.0 + n)
                * (19.0 + n)
                * (20.0 + n)
            )
            + 5.765436167018416 * S2
            - 4.528162976761489
            * (
                9.42477796076938
                + 1
                / np.tan(3.141592653589793 * n)
                * (
                    2.772588722239781
                    + 12.566370614359172 * 1 / np.tan(3.141592653589793 * n)
                )
            )
            + 1.441359041754604
            * np.power(2.0, 2.0 + n)
            * mp.lerchphi(0.5, 2.0, -1.0 * n)
            - 2.882718083509208
            * (
                -3.141592653589793
                * (
                    9.42477796076938
                    + 1
                    / np.tan(3.141592653589793 * n)
                    * (
                        2.772588722239781
                        + 12.566370614359172 * 1 / np.tan(3.141592653589793 * n)
                    )
                )
                + np.power(2.0, 2.0 + n) * mp.lerchphi(0.5, 2.0, -1.0 * n)
            )
            + (
                19.371762207694154
                * np.power(2.0, n)
                * mp.hyp2f1(1.0, 1.0 + n, 2.0 + n, 2.0)
            )
            / (1.0 + n)
            + 27.36435385542846
            * (
                S1
                + n * mp.hyper(list([1.0, 1.0, 1.0 - 1.0 * n]), list([2.0, 2.0]), -1.0)
            )
        )
    )


# @nb.njit("c16(c16)", cache=True)
def S12l21(H25):
    return complex(-2.0 * H25)


# @nb.njit("c16(c16,c16,c16,c16)", cache=True)
def S13l205(n, S1, S2, S3):
    return complex(
        0.020833333333333332
        * (
            -35.91351656957576
            - 24.94558274872449 / np.power(2.0 + n, 2)
            + 0.1875 / np.power(4.0 + n, 2)
            + 0.046875 / (4.0 + n)
            + 0.020833333333333332 / np.power(6.0 + n, 2)
            + 0.003472222222222222 / (6.0 + n)
            + 0.0029296875 / np.power(8.0 + n, 2)
            + 0.0003662109375 / (8.0 + n)
            + 1.5 / (2.0 + 1.0 * n)
            + (27.94558274872449 * (5.0 + 6.0 * n + 2.0 * np.power(n, 2)))
            / (np.power(1.0 + n, 2) * np.power(2.0 + n, 2))
            + 0.8541666666666666 * (np.power(2.0 + n, -2) + np.power(3.0 + n, -2))
            + 0.2690972222222222 * (1 / (2.0 + n) + 1 / (3.0 + n))
            + 0.09141608205782313
            * (
                np.power(2.0 + n, -2)
                + np.power(3.0 + n, -2)
                + np.power(4.0 + n, -2)
                + np.power(5.0 + n, -2)
            )
            + 0.016931727620363622
            * (1 / (2.0 + n) + 1 / (3.0 + n) + 1 / (4.0 + n) + 1 / (5.0 + n))
            + 0.010582748724489796 * (np.power(6.0 + n, -2) + np.power(7.0 + n, -2))
            + 0.0014595053981413995 * (1 / (6.0 + n) + 1 / (7.0 + n))
            - 25.78623329318593 * S1
            + 25.786028949842585
            * (
                -0.5772156649015329
                - 1.0 / (2.0 + n)
                + (3.0 + 2.0 * n) / (2.0 + 3.0 * n + np.power(n, 2))
                + S1
            )
            + 27.94558274872449 * S2
            - (
                6.0
                * (
                    -9.0
                    - 15.0 * n
                    - 9.0 * np.power(n, 2)
                    - 2.0 * np.power(n, 3)
                    - 1.0
                    * np.power(2.0 + 3.0 * n + np.power(n, 2), 3)
                    * (-1.2020569031595945 + S3)
                )
            )
            / (np.power(1.0 + n, 3) * np.power(2.0 + n, 3))
            - (
                2.0
                * (
                    -251.0
                    - 684.0 * n
                    - 795.0 * np.power(n, 2)
                    - 504.0 * np.power(n, 3)
                    - 183.0 * np.power(n, 4)
                    - 36.0 * np.power(n, 5)
                    - 3.0 * np.power(n, 6)
                    - 1.0
                    * np.power(
                        6.0 + 11.0 * n + 6.0 * np.power(n, 2) + np.power(n, 3), 3
                    )
                    * (-1.2020569031595945 + S3)
                )
            )
            / (np.power(1.0 + n, 3) * np.power(2.0 + n, 3) * np.power(3.0 + n, 3))
            + (
                0.375
                * (
                    32560.0
                    + 114024.0 * n
                    + 179100.0 * np.power(n, 2)
                    + 165380.0 * np.power(n, 3)
                    + 98700.0 * np.power(n, 4)
                    + 39396.0 * np.power(n, 5)
                    + 10500.0 * np.power(n, 6)
                    + 1800.0 * np.power(n, 7)
                    + 180.0 * np.power(n, 8)
                    + 8.0 * np.power(n, 9)
                    + 2.0
                    * np.power(
                        24.0
                        + 50.0 * n
                        + 35.0 * np.power(n, 2)
                        + 10.0 * np.power(n, 3)
                        + np.power(n, 4),
                        3,
                    )
                    * (-1.2020569031595945 + S3)
                )
            )
            / (
                np.power(1.0 + n, 3)
                * np.power(2.0 + n, 3)
                * np.power(3.0 + n, 3)
                * np.power(4.0 + n, 3)
            )
            + 0.30000000000000004
            * (
                -1.0 / np.power(6.0 + n, 3)
                + (
                    (7.0 + 2.0 * n)
                    * (
                        6.3467712e7
                        + 2.75413824e8 * n
                        + 5.54256432e8 * np.power(n, 2)
                        + 6.84826352e8 * np.power(n, 3)
                        + 5.79544028e8 * np.power(n, 4)
                        + 3.54873092e8 * np.power(n, 5)
                        + 1.61970683e8 * np.power(n, 6)
                        + 5.5932611e7 * np.power(n, 7)
                        + 1.4676674e7 * np.power(n, 8)
                        + 2.911041e6 * np.power(n, 9)
                        + 429534.0 * np.power(n, 10)
                        + 45717.0 * np.power(n, 11)
                        + 3318.0 * np.power(n, 12)
                        + 147.0 * np.power(n, 13)
                        + 3.0 * np.power(n, 14)
                    )
                )
                / (
                    np.power(1.0 + n, 3)
                    * np.power(2.0 + n, 3)
                    * np.power(3.0 + n, 3)
                    * np.power(4.0 + n, 3)
                    * np.power(5.0 + n, 3)
                    * np.power(6.0 + n, 3)
                )
                + S3
            )
            + (
                -4.849365675830262
                + 24.0 * S3
                + np.power(n, 3) * (-28.849365675830263 + 24.0 * S3)
                + n * (-86.5480970274908 + 72.0 * S3)
                + np.power(n, 2) * (-86.5480970274908 + 72.0 * S3)
            )
            / np.power(1.0 + n, 3)
            + (
                -1.8827917371821213e8
                + np.power(n, 21) * (-0.15025711289494928 + 0.125 * S3)
                + 1.6003008e10 * S3
                + np.power(n, 20) * (-12.621597483175739 + 10.5 * S3)
                + np.power(n, 19) * (-498.5531005854417 + 414.75 * S3)
                + np.power(n, 18) * (-12309.514745257404 + 10241.0 * S3)
                + np.power(n, 17) * (-213006.90671411887 + 177247.875 * S3)
                + np.power(n, 16) * (-2.745208063810683e6 + 2.2853355e6 * S3)
                + np.power(n, 15) * (-2.7333790694426738e7 + 2.2772873e7 * S3)
                + np.power(n, 14) * (-2.1525719333960438e8 + 1.79575452e8 * S3)
                + np.power(n, 13) * (-1.3613819668701482e9 + 1.138062751875e9 * S3)
                + np.power(n, 12) * (-6.981325709004752e9 + 5.8543813055e9 * S3)
                + np.power(n, 11) * (-2.918265095349929e10 + 2.458519389375e10 * S3)
                + np.power(n, 10) * (-9.959730967499185e10 + 8.4473879133e10 * S3)
                + n * (-5.3368228689679504e10 + 1.244805408e11 * S3)
                + np.power(n, 9) * (-2.7702671731906366e11 + 2.37268950102125e11 * S3)
                + np.power(n, 2) * (-3.0945500345609973e11 + 4.4785043856e11 * S3)
                + np.power(n, 8) * (-6.245882034204874e11 + 5.425955373405e11 * S3)
                + np.power(n, 3) * (-8.52658888324106e11 + 9.92117796984e11 * S3)
                + np.power(n, 7) * (-1.1304998617813767e12 + 1.0026916293345e12 * S3)
                + np.power(n, 6) * (-1.6179236885848447e12 + 1.479872994614e12 * S3)
                + np.power(n, 4) * (-1.4740504277291758e12 + 1.519937938008e12 * S3)
                + np.power(n, 5) * (-1.7889236321409622e12 + 1.714464923598e12 * S3)
            )
            / (
                np.power(1.0 + n, 3)
                * np.power(2.0 + n, 3)
                * np.power(3.0 + n, 3)
                * np.power(4.0 + n, 3)
                * np.power(5.0 + n, 3)
                * np.power(6.0 + n, 3)
                * np.power(7.0 + n, 3)
            )
            + (
                -3.1076170690167686e10
                + np.power(n, 24) * (-0.06439590552640682 + 0.05357142857142857 * S3)
                + 3.511517184e12 * S3
                + np.power(n, 23) * (-6.954757796851938 + 5.785714285714286 * S3)
                + np.power(n, 22) * (-355.85177393892417 + 296.0357142857143 * S3)
                + np.power(n, 21) * (-11474.975364805698 + 9546.42857142857 * S3)
                + np.power(n, 20) * (-261689.50235318032 + 217731.375 * S3)
                + np.power(n, 19) * (-4.489549647230873e6 + 3.7362465e6 * S3)
                + np.power(n, 18) * (-6.0174545299099594e7 + 5.009824671428571e7 * S3)
                + np.power(n, 17) * (-6.459454766764826e8 + 5.381398851428571e8 * S3)
                + np.power(n, 16) * (-5.647936378402138e9 + 4.710152996517857e9 * S3)
                + np.power(n, 15) * (-4.06934872365595e10 + 3.3988322190214283e10 * S3)
                + np.power(n, 14) * (-2.434761228276682e11 + 2.0380329643275e11 * S3)
                + np.power(n, 13) * (-1.2154258996820479e12 + 1.020534802371e12 * S3)
                + np.power(n, 12) * (-5.07315542830191e12 + 4.2781896451329106e12 * S3)
                + np.power(n, 11) * (-1.770226596040418e13 + 1.5018709031540355e13 * S3)
                + n * (-1.1646920948258486e13 + 2.86314061824e13 * S3)
                + np.power(n, 10) * (-5.151048207445098e13 + 4.407053531194735e13 * S3)
                + np.power(n, 9) * (-1.2436603267566345e14 + 1.0765907902298828e14 * S3)
                + np.power(n, 2) * (-7.201432181343031e13 + 1.0867875452928e14 * S3)
                + np.power(n, 8) * (-2.4716507853081303e14 + 2.17524482033526e14 * S3)
                + np.power(n, 3) * (-2.1249044478604434e14 + 2.5583791381994056e14 * S3)
                + np.power(n, 7) * (-3.99629094081214e14 + 3.60077496552648e14 * S3)
                + np.power(n, 4) * (-3.9587554959384794e14 + 4.198147424345417e14 * S3)
                + np.power(n, 6) * (-5.168531019972349e14 + 4.8186122866386856e14 * S3)
                + np.power(n, 5) * (-5.216872802515547e14 + 5.116683439482377e14 * S3)
            )
            / (
                np.power(1.0 + n, 3)
                * np.power(2.0 + n, 3)
                * np.power(3.0 + n, 3)
                * np.power(4.0 + n, 3)
                * np.power(5.0 + n, 3)
                * np.power(6.0 + n, 3)
                * np.power(7.0 + n, 3)
                * np.power(8.0 + n, 3)
            )
            + (
                -7.7239450334953125e12
                + np.power(n, 27) * (-0.02817320866780299 + 0.0234375 * S3)
                + 1.119954511872e15 * S3
                + np.power(n, 26) * (-3.8033831701534035 + 3.1640625 * S3)
                + np.power(n, 25) * (-244.68431727986894 + 203.5546875 * S3)
                + np.power(n, 24) * (-9983.693321652685 + 8305.6640625 * S3)
                + np.power(n, 23) * (-290084.326995499 + 241342.2421875 * S3)
                + np.power(n, 22) * (-6.3886763936445005e6 + 5.3158812890625e6 * S3)
                + np.power(n, 21) * (-1.1083531859904346e8 + 9.22446755859375e7 * S3)
                + np.power(n, 20) * (-1.5540653936148872e9 + 1.2938741455078125e9 * S3)
                + np.power(n, 19)
                * (-1.7928546082039547e10 + 1.4935168301132812e10 * S3)
                + np.power(n, 18)
                * (-1.7235833156872174e11 + 1.4369777933027344e11 * S3)
                + np.power(n, 17) * (-1.3933977821809019e12 + 1.163032128121289e12 * S3)
                + np.power(n, 16) * (-9.532903149222146e12 + 7.969538339323242e12 * S3)
                + np.power(n, 15) * (-5.5421804520716875e13 + 4.643376378330129e13 * S3)
                + np.power(n, 14)
                * (-2.7442937550584856e14 + 2.3060292041751853e14 * S3)
                + np.power(n, 13) * (-1.1580659863189835e15 + 9.770012148134408e14 * S3)
                + np.power(n, 12) * (-4.1604768475468305e15 + 3.528835659305147e15 * S3)
                + n * (-3.7001995643590905e15 + 9.5049472799232e15 * S3)
                + np.power(n, 11)
                * (-1.2690820817593494e16 + 1.0842168128947024e16 * S3)
                + np.power(n, 10)
                * (-3.2719471459776132e16 + 2.8228294043448464e16 * S3)
                + np.power(n, 2) * (-2.4139679917260076e16 + 3.774708643918464e16 * S3)
                + np.power(n, 9) * (-7.082596355241246e16 + 6.192631872765216e16 * S3)
                + np.power(n, 3) * (-7.540813820098134e16 + 9.348995950413898e16 * S3)
                + np.power(n, 8) * (-1.2752168126680246e17 + 1.135732940048904e17 * S3)
                + np.power(n, 4) * (-1.4945046274726707e17 + 1.62389726656281e17 * S3)
                + np.power(n, 7) * (-1.8852682955808618e17 + 1.7229783969179136e17 * S3)
                + np.power(n, 5) * (-2.107050012914055e17 + 2.108914095651679e17 * S3)
                + np.power(n, 6) * (-2.2478668354322694e17 + 2.1315134716528384e17 * S3)
            )
            / (
                np.power(1.0 + n, 3)
                * np.power(2.0 + n, 3)
                * np.power(3.0 + n, 3)
                * np.power(4.0 + n, 3)
                * np.power(5.0 + n, 3)
                * np.power(6.0 + n, 3)
                * np.power(7.0 + n, 3)
                * np.power(8.0 + n, 3)
                * np.power(9.0 + n, 3)
            )
            - (
                12.893116646592965
                * (complex(0.0, 1.0) + 1 / np.tan(3.141592653589793 * n))
                * (
                    6.283185307179586 * n * np.cos(3.141592653589793 * n)
                    + np.power(2.0, n)
                    * (-2.0 + n * mp.lerchphi(0.5, 1.0, 1.0 - 1.0 * n))
                    * np.sin(3.141592653589793 * n)
                )
            )
            / (np.power(2.718281828459045, complex(0.0, 3.141592653589793) * n) * n)
        )
    )


def S31l205(n, S1, S2, S3):
    # HarmonicNumber[5. +N]
    Snp5 = (274 + 450 * n + 255 * n ** 2 + 60 * n ** 3 + 5 * n ** 4) / (
        (1 + n) * (2 + n) * (3 + n) * (4 + n) * (5 + n)
    ) + S1
    # Mellin[PolyLog[3,x/2]/(-1+x)]
    H26 = (
        -0.557968
        + 1 / (-4 - 2 * n)
        - 0.53125 / (3 + n)
        - 0.53588 / (4 + n)
        - 0.536856 / (5 + n)
        + 0.537106 * Snp5
    )
    return (
        H26
        - 1.0 / 6.0 * ln2 ** 3 * S1
        + 1.0 / 2.0 * ln2 * zeta2 * S1
        - 7.0 / 8.0 * zeta3 * S1
        - 1.0 / 2.0 * ln2 ** 2 * S2
        + 1.0 / 2.0 * zeta2 * S2
        - ln2 * S3
        + ln2 * S3l2(n)
    )


# @nb.njit("c16(c16,c16,c16)", cache=True)
def S121l2051(n, S1, H23):
    return complex(
        (
            -1.0830401704283533e13 * H23
            + 4.3924567500723857e12 * n
            - 4.719820298271499e13 * H23 * n
            + 1.5347099809768277e13 * np.power(n, 2)
            - 9.28277799319932e13 * H23 * np.power(n, 2)
            + 2.4643473394818945e13 * np.power(n, 3)
            - 1.1033270798041445e14 * H23 * np.power(n, 3)
            + 2.4206702804354082e13 * np.power(n, 4)
            - 8.928723061726825e13 * H23 * np.power(n, 4)
            + 1.6319435638160908e13 * np.power(n, 5)
            - 5.244803302936807e13 * H23 * np.power(n, 5)
            + 8.024831718581373e12 * np.power(n, 6)
            - 2.324477933964049e13 * H23 * np.power(n, 6)
            + 2.9839764042451226e12 * np.power(n, 7)
            - 7.966230808118927e12 * H23 * np.power(n, 7)
            + 8.578892089462283e11 * np.power(n, 8)
            - 2.1441872369411062e12 * H23 * np.power(n, 8)
            + 1.9323035163842896e11 * np.power(n, 9)
            - 4.573731355009803e11 * H23 * np.power(n, 9)
            + 3.4319246716192318e10 * np.power(n, 10)
            - 7.760339042151804e10 * H23 * np.power(n, 10)
            + 4.809688527205751e9 * np.power(n, 11)
            - 1.0460546339529638e10 * H23 * np.power(n, 11)
            + 5.291841901984562e8 * np.power(n, 12)
            - 1.1129708511703498e9 * H23 * np.power(n, 12)
            + 4.517523002879353e7 * np.power(n, 13)
            - 9.228190983574654e7 * H23 * np.power(n, 13)
            + 2.930975307090889e6 * np.power(n, 14)
            - 5.836196460364303e6 * H23 * np.power(n, 14)
            + 139635.45571358403 * np.power(n, 15)
            - 271841.80388733785 * H23 * np.power(n, 15)
            + 4605.037890010919 * np.power(n, 16)
            - 8787.237785103225 * H23 * np.power(n, 16)
            + 93.90370458786407 * np.power(n, 17)
            - 176.00794515276021 * H23 * np.power(n, 17)
            + 0.8918045027331737 * np.power(n, 18)
            - 1.6449340668482262 * H23 * np.power(n, 18)
            + (
                -3.3026317142400005e12
                - 1.439265931975543e13 * n
                - 2.830698051067102e13 * np.power(n, 2)
                - 3.364494784620761e13 * np.power(n, 3)
                - 2.722732245440367e13 * np.power(n, 4)
                - 1.5993546865744523e13 * np.power(n, 5)
                - 7.088282367887105e12 * np.power(n, 6)
                - 2.4292290561525176e12 * np.power(n, 7)
                - 6.538502415094675e11 * np.power(n, 8)
                - 1.3947174479682452e11 * np.power(n, 9)
                - 2.3664442495912846e10 * np.power(n, 10)
                - 3.1898477113313265e9 * np.power(n, 11)
                - 3.393902581329089e8 * np.power(n, 12)
                - 2.8140522428972498e7 * np.power(n, 13)
                - 1.7796946084567667e6 * np.power(n, 14)
                - 82895.66604158795 * np.power(n, 15)
                - 2679.5876073711893 * np.power(n, 16)
                - 53.67200935767826 * np.power(n, 17)
                - 0.501607564090451 * np.power(n, 18)
            )
            * S1
            + 0.631966197838168
            * n
            * (2.0 + 3.0 * n + 1.0 * np.power(n, 2))
            * np.power(
                1.8144e6
                + 2.59272e6 * n
                + 1.580508e6 * np.power(n, 2)
                + 537628.0 * np.power(n, 3)
                + 111769.0 * np.power(n, 4)
                + 14560.0 * np.power(n, 5)
                + 1162.0 * np.power(n, 6)
                + 52.0 * np.power(n, 7)
                + 1.0 * np.power(n, 8),
                2,
            )
            * mp.hyper(list([1.0, 1.0, 1.0 - 1.0 * n]), list([2.0, 2.0]), -1.0)
        )
        / (
            (1.0 + n)
            * (2.0 + n)
            * np.power(3.0 + n, 2)
            * np.power(4.0 + n, 2)
            * np.power(5.0 + n, 2)
            * np.power(6.0 + n, 2)
            * np.power(7.0 + n, 2)
            * np.power(8.0 + n, 2)
            * np.power(9.0 + n, 2)
            * np.power(10.0 + n, 2)
        )
    )


# @nb.njit("c16(c16,c16)", cache=True)
def S21l21(n, S1):
    return complex(
        (
            complex(1.6833606003593822e27, 2.1316401151124944e27)
            - 1.6833606028664177e27 * np.power(2.0, n)
            + complex(1.1280238519747306e28, 1.4284014544217873e28) * n
            - 9.793413137165368e27 * np.power(2.0, n) * n
            + complex(3.5133648703234346e28, 4.4489029733809166e28) * np.power(n, 2)
            - 2.6584983157605467e28 * np.power(2.0, n) * np.power(n, 2)
            + complex(6.7936790083925e28, 8.602679035475088e28) * np.power(n, 3)
            - 4.500022047614448e28 * np.power(2.0, n) * np.power(n, 3)
            + complex(9.19012141317016e28, 1.1637229431490278e29) * np.power(n, 4)
            - 5.351614784848519e28 * np.power(2.0, n) * np.power(n, 4)
            + complex(9.2890946632445e28, 1.1762554569358886e29) * np.power(n, 5)
            - 4.774123285176482e28 * np.power(2.0, n) * np.power(n, 5)
            + complex(7.314978363595366e28, 9.262779365216703e28) * np.power(n, 6)
            - 3.3296016110218174e28 * np.power(2.0, n) * np.power(n, 6)
            + complex(4.618995743047189e28, 5.848922626855809e28) * np.power(n, 7)
            - 1.867555495886855e28 * np.power(2.0, n) * np.power(n, 7)
            + complex(2.3881423804543337e28, 3.024047281480256e28) * np.power(n, 8)
            - 8.598161226007345e27 * np.power(2.0, n) * np.power(n, 8)
            + complex(1.027023747870955e28, 1.3004956199394855e28) * np.power(n, 9)
            - 3.299192196302645e27 * np.power(2.0, n) * np.power(n, 9)
            + complex(3.718430053139092e27, 4.708559564429205e27) * np.power(n, 10)
            - 1.0673974911524395e27 * np.power(2.0, n) * np.power(n, 10)
            + complex(1.1441604044899806e27, 1.4488232559998715e27) * np.power(n, 11)
            - 2.9379890367598923e26 * np.power(2.0, n) * np.power(n, 11)
            + complex(3.014106578187488e26, 3.816692213649815e26) * np.power(n, 12)
            - 6.927509956951886e25 * np.power(2.0, n) * np.power(n, 12)
            + complex(6.836865750537136e25, 8.657362927743468e25) * np.power(n, 13)
            - 1.4066600113346826e25 * np.power(2.0, n) * np.power(n, 13)
            + complex(1.3411340313136578e25, 1.6982467451739608e25) * np.power(n, 14)
            - 2.4692772904714515e24 * np.power(2.0, n) * np.power(n, 14)
            + complex(2.2823563954140286e24, 2.890094902276634e24) * np.power(n, 15)
            - 3.757351574332791e23 * np.power(2.0, n) * np.power(n, 15)
            + complex(3.3768613922826975e23, 4.276041487375118e23) * np.power(n, 16)
            - 4.963794071544808e22 * np.power(2.0, n) * np.power(n, 16)
            + complex(4.348682972736758e22, 5.506637080449338e22) * np.power(n, 17)
            - 5.696446468351613e21 * np.power(2.0, n) * np.power(n, 17)
            + complex(4.875275445814089e21, 6.173449430059735e21) * np.power(n, 18)
            - 5.67601106161025e20 * np.power(2.0, n) * np.power(n, 18)
            + complex(4.754442901083716e20, 6.020442354673485e20) * np.power(n, 19)
            - 4.902928615262456e19 * np.power(2.0, n) * np.power(n, 19)
            + complex(4.0260266191939265e19, 5.098065797780899e19) * np.power(n, 20)
            - 3.661480489217735e18 * np.power(2.0, n) * np.power(n, 20)
            + complex(2.951591241364906e18, 3.7375329856855946e18) * np.power(n, 21)
            - 2.354412432066986e17 * np.power(2.0, n) * np.power(n, 21)
            + complex(1.8655124802380563e17, 2.3622562465222666e17) * np.power(n, 22)
            - 1.296218655332279e16 * np.power(2.0, n) * np.power(n, 22)
            + complex(1.0106075448696164e16, 1.2797095428905186e16) * np.power(n, 23)
            - 6.06359582313501e14 * np.power(2.0, n) * np.power(n, 23)
            + complex(4.6562817914004075e14, 5.896144952336889e14) * np.power(n, 24)
            - 2.385660927511548e13 * np.power(2.0, n) * np.power(n, 24)
            + complex(1.805881124487301e13, 2.286746791927984e13) * np.power(n, 25)
            - 7.786891093408528e11 * np.power(2.0, n) * np.power(n, 25)
            + complex(5.814854720381085e11, 7.363220583644232e11) * np.power(n, 26)
            - 2.0694973396132874e10 * np.power(2.0, n) * np.power(n, 26)
            + complex(1.5255184441562937e10, 1.93173001082478e10) * np.power(n, 27)
            - 4.361551307055125e8 * np.power(2.0, n) * np.power(n, 27)
            + complex(3.1755495944092846e8, 4.021127881543603e8) * np.power(n, 28)
            - 7.009322268197093e6 * np.power(2.0, n) * np.power(n, 28)
            + complex(5.043047411303078e6, 6.385899164941185e6) * np.power(n, 29)
            - 80650.58350683903 * np.power(2.0, n) * np.power(n, 29)
            + complex(57364.741155652126, 72639.7036051468) * np.power(n, 30)
            - 591.4373566195608 * np.power(2.0, n) * np.power(n, 30)
            + complex(416.0214728560528, 526.7988174426441) * np.power(n, 31)
            - 2.076022092268843 * np.power(2.0, n) * np.power(n, 31)
            + complex(1.4445189418954867, 1.8291625605647361) * np.power(n, 32)
            + 1.9169483570505036e27 * S1
            + 1.2845375736034561e28 * n * S1
            + 4.000824147114336e28 * np.power(n, 2) * S1
            + 7.736245591539027e28 * np.power(n, 3) * S1
            + 1.046516608556964e29 * np.power(n, 4) * S1
            + 1.0577868889120365e29 * np.power(n, 5) * S1
            + 8.329862794375306e28 * np.power(n, 6) * S1
            + 5.259838441103391e28 * np.power(n, 7) * S1
            + 2.7194752185317597e28 * np.power(n, 8) * S1
            + 1.1695139926857725e28 * np.power(n, 9) * S1
            + 4.2343289831692154e27 * np.power(n, 10) * S1
            + 1.302902558717772e27 * np.power(n, 11) * S1
            + 3.43228756883164e26 * np.power(n, 12) * S1
            + 7.785421902632924e25 * np.power(n, 13) * S1
            + 1.527204937150373e25 * np.power(n, 14) * S1
            + 2.599014080923719e24 * np.power(n, 15) * S1
            + 3.845372699542644e23 * np.power(n, 16) * S1
            + 4.952026765401563e22 * np.power(n, 17) * S1
            + 5.551679975614853e21 * np.power(n, 18) * S1
            + 5.4140832679439185e20 * np.power(n, 19) * S1
            + 4.584605434053637e19 * np.power(n, 20) * S1
            + 3.3611009970855055e18 * np.power(n, 21) * S1
            + 2.1243375927292365e17 * np.power(n, 22) * S1
            + 1.1508214207239058e16 * np.power(n, 23) * S1
            + 5.302304689793915e14 * np.power(n, 24) * S1
            + 2.0564332012233316e13 * np.power(n, 25) * S1
            + 6.621621304810342e11 * np.power(n, 26) * S1
            + 1.737172538770829e10 * np.power(n, 27) * S1
            + 3.616133150885176e8 * np.power(n, 28) * S1
            + 5.742732474275174e6 * np.power(n, 29) * S1
            + 65323.672366324005 * np.power(n, 30) * S1
            + 473.74137896608875 * np.power(n, 31) * S1
            + 1.644935343632253 * np.power(n, 32) * S1
            + np.power(2.0, n)
            * (
                1.3570442448525208e27
                + 7.736441842782683e27 * n
                + 2.0586154139209478e28 * np.power(n, 2)
                + 3.418020155394567e28 * np.power(n, 3)
                + 3.990470196270089e28 * np.power(n, 4)
                + 3.497804616136419e28 * np.power(n, 5)
                + 2.3990638748389658e28 * np.power(n, 6)
                + 1.3244759164655748e28 * np.power(n, 7)
                + 6.006923754991886e27 * np.power(n, 8)
                + 2.2722885003172314e27 * np.power(n, 9)
                + 7.25273617768887e26 * np.power(n, 10)
                + 1.9707591366660945e26 * np.power(n, 11)
                + 4.590225915847702e25 * np.power(n, 12)
                + 9.212225005158819e24 * np.power(n, 13)
                + 1.5991495582075087e24 * np.power(n, 14)
                + 2.4074200060054864e23 * np.power(n, 15)
                + 3.1479255232159525e22 * np.power(n, 16)
                + 3.577085214505872e21 * np.power(n, 17)
                + 3.530547563815296e20 * np.power(n, 18)
                + 3.0218507756908265e19 * np.power(n, 19)
                + 2.2367871200740178e18 * np.power(n, 20)
                + 1.4260027848947278e17 * np.power(n, 21)
                + 7.785624904017476e15 * np.power(n, 22)
                + 3.612590748983618e14 * np.power(n, 23)
                + 1.4101170841935729e13 * np.power(n, 24)
                + 4.5671137945917285e11 * np.power(n, 25)
                + 1.2045801726015282e10 * np.power(n, 26)
                + 2.519734716536869e8 * np.power(n, 27)
                + 4.019480007235419e6 * np.power(n, 28)
                + 45909.66551176623 * np.power(n, 29)
                + 334.2060621909171 * np.power(n, 30)
                + 1.164481052930025 * np.power(n, 31)
            )
            * mp.hyp2f1(1.0, 1.0 + n, 2.0 + n, 2.0)
            + n
            * (
                1.9169468691324218e27
                + 1.2845365765569392e28 * n
                + 4.000821041710599e28 * np.power(n, 2)
                + 7.736239586734746e28 * np.power(n, 3)
                + 1.0465157962601805e29 * np.power(n, 4)
                + 1.0577860678673627e29 * np.power(n, 5)
                + 8.329856328810687e28 * np.power(n, 6)
                + 5.259834358464076e28 * np.power(n, 7)
                + 2.7194731076995423e28 * np.power(n, 8)
                + 1.1695130849195251e28 * np.power(n, 9)
                + 4.2343256965211237e27 * np.power(n, 10)
                + 1.302901547416519e27 * np.power(n, 11)
                + 3.4322849047208846e26 * np.power(n, 12)
                + 7.785415859658431e25 * np.power(n, 13)
                + 1.52720375174763e25 * np.power(n, 14)
                + 2.5990120635923536e24 * np.power(n, 15)
                + 3.845369714798924e23 * np.power(n, 16)
                + 4.9520229216829045e22 * np.power(n, 17)
                + 5.551675666450765e21 * np.power(n, 18)
                + 5.414079065581157e20 * np.power(n, 19)
                + 4.584601875524113e19 * np.power(n, 20)
                + 3.361098388229127e18 * np.power(n, 21)
                + 2.1243359438374944e17 * np.power(n, 22)
                + 1.1508205274666648e16 * np.power(n, 23)
                + 5.302300574192681e14 * np.power(n, 24)
                + 2.0564316050383676e13 * np.power(n, 25)
                + 6.621616165167411e11 * np.power(n, 26)
                + 1.737171190393121e10 * np.power(n, 27)
                + 3.6161303440751326e8 * np.power(n, 28)
                + 5.742728016817852e6 * np.power(n, 29)
                + 65323.62166267675 * np.power(n, 30)
                + 473.7410112522892 * np.power(n, 31)
                + 1.6449340668482266 * np.power(n, 32)
            )
            * mp.hyper(list([1.0, 1.0, 1.0 - 1.0 * n]), list([2.0, 2.0]), -1.0)
        )
        / (
            np.power(1.0 + n, 2)
            * np.power(2.0 + n, 2)
            * np.power(3.0 + n, 2)
            * np.power(4.0 + n, 2)
            * np.power(5.0 + n, 2)
            * np.power(6.0 + n, 2)
            * np.power(7.0 + n, 2)
            * np.power(8.0 + n, 2)
            * np.power(9.0 + n, 2)
            * np.power(10.0 + n, 2)
            * np.power(11.0 + n, 2)
            * np.power(12.0 + n, 2)
            * (13.0 + n)
            * (14.0 + n)
            * (15.0 + n)
            * (16.0 + n)
            * (17.0 + n)
            * (18.0 + n)
            * (19.0 + n)
            * (20.0 + n)
        )
    )


# @nb.njit("c16(c16,c16,c16, c16,c16)", cache=True)
def S1111l21105(n, S1, H21, H23, H24):
    return complex(
        0.08333333333333333
        * (
            -2.882718083509208 * (H21 + H23)
            + 8.317766166719343 * H24
            - 0.6660493039778589 * S1
            + (
                -21.28497824694114
                + np.power(n, 22) * (-1.4032651231697697 + 0.6651555702169106 * S1)
                + 3.306657872663145e17 * S1
                + np.power(n, 21) * (-225.8619793647119 + 108.42035794535643 * S1)
                + np.power(n, 20) * (-17161.340432724224 + 8352.358495213746 * S1)
                + np.power(n, 19) * (-818456.95859745 + 404404.6093583284 * S1)
                + np.power(n, 18) * (-2.7478728153544266e7 + 1.380478237788493e7 * S1)
                + np.power(n, 17) * (-6.904019105536251e8 + 3.5325744384996516e8 * S1)
                + np.power(n, 16) * (-1.3470591633763092e10 + 7.033776682829219e9 * S1)
                + np.power(n, 15)
                * (-2.0903754546392337e11 + 1.1164307832844762e11 * S1)
                + np.power(n, 14)
                * (-2.6209568351289272e12 + 1.4356036433688328e12 * S1)
                + np.power(n, 13) * (-2.68237465524399e13 + 1.5115872138017662e13 * S1)
                + np.power(n, 12) * (-2.254287456569634e14 + 1.311899520263152e14 * S1)
                + np.power(n, 11) * (-1.5596729430294308e15 + 9.416388908315981e14 * S1)
                + np.power(n, 10) * (-8.878314402636898e15 + 5.592104439069029e15 * S1)
                + np.power(n, 9) * (-4.142544242067615e16 + 2.7412580442697824e16 * S1)
                + np.power(n, 8) * (-1.5728620543904387e17 + 1.1033207871178562e17 * S1)
                + np.power(n, 7) * (-4.8039406140988416e17 + 3.614468871513744e17 * S1)
                + np.power(n, 6) * (-1.1601637307682578e18 + 9.513458515809779e17 * S1)
                + n * (-4.7010131790074784e17 + 1.4714664237290086e18 * S1)
                + np.power(n, 5) * (-2.1596907094790292e18 + 1.9743867729749857e18 * S1)
                + np.power(n, 2) * (-1.7031784220857746e18 + 2.980594864657508e18 * S1)
                + np.power(n, 4) * (-2.9809599710714127e18 + 3.143983341049741e18 * S1)
                + np.power(n, 3) * (-2.8638554267864535e18 + 3.686977129250879e18 * S1)
            )
            / (
                (1.0 + n)
                * (2.0 + n)
                * (3.0 + n)
                * np.power(4.0 + n, 2)
                * np.power(5.0 + n, 2)
                * np.power(6.0 + n, 2)
                * np.power(7.0 + n, 2)
                * np.power(8.0 + n, 2)
                * np.power(9.0 + n, 2)
                * np.power(10.0 + n, 2)
                * np.power(11.0 + n, 2)
                * np.power(12.0 + n, 2)
                * (13.0 + n)
            )
            - (
                2.0794415416798357
                * (complex(0.0, 1.0) + 1 / np.tan(3.141592653589793 * n))
                * (
                    2.0
                    * (
                        -0.4804530139182014 * np.power(2.0, n)
                        - 1.3862943611198906 * H21 * n
                        + 2.0 * H22 * n
                        + 0.4804530139182014 * n * S1
                        + 1.5093876589204962 * n * 1 / np.tan(3.141592653589793 * n)
                    )
                    + 0.4804530139182014
                    * np.power(2.0, n)
                    * n
                    * mp.lerchphi(0.5, 1.0, 1.0 - 1.0 * n)
                )
                * np.sin(3.141592653589793 * n)
            )
            / (np.power(2.718281828459045, complex(0.0, 3.141592653589793) * n) * n)
            - (
                0.33302465198892944
                * (complex(0.0, 1.0) + 1 / np.tan(3.141592653589793 * n))
                * (
                    6.283185307179586 * n * np.cos(3.141592653589793 * n)
                    + np.power(2.0, n)
                    * (-2.0 + n * mp.lerchphi(0.5, 1.0, 1.0 - 1.0 * n))
                    * np.sin(3.141592653589793 * n)
                )
            )
            / (np.power(2.718281828459045, complex(0.0, 3.141592653589793) * n) * n)
            + 1.441359041754604
            * (
                2.0 * H23
                + 1.3862943611198906 * S1
                + (
                    0.6931471805599453
                    * (complex(0.0, 1.0) + 1 / np.tan(3.141592653589793 * n))
                    * (
                        6.283185307179586 * n * np.cos(3.141592653589793 * n)
                        + np.power(2.0, n)
                        * (-2.0 + n * mp.lerchphi(0.5, 1.0, 1.0 - 1.0 * n))
                        * np.sin(3.141592653589793 * n)
                    )
                )
                / (np.power(2.718281828459045, complex(0.0, 3.141592653589793) * n) * n)
            )
        )
    )


# @nb.njit("c16(c16,c16,c16)", cache=True)
def S1111l21051(n, S1, H21):
    return complex(
        (
            complex(0.00008138020833333333, 0.00011869952602801132)
            - complex(1.1108200333002769e12, 0.000021919931066000538) * n
            - complex(3.0545253221968545e12, 0.000416485473072374) * np.power(n, 2)
            - complex(3.746669508953097e12, 0.0005080718865495499) * np.power(n, 3)
            - complex(2.732663230220466e12, 0.00037230189267925355) * np.power(n, 4)
            - complex(1.3303092958914858e12, 0.00019969252622130892) * np.power(n, 5)
            - complex(4.592245894160175e11, 0.00007079577081180635) * np.power(n, 6)
            - complex(1.1640732704756241e11, 0.000015694489505731582) * np.power(n, 7)
            - complex(2.2109629870529408e10, 2.5755745976631705e-6) * np.power(n, 8)
            - complex(3.1780932871117997e9, 4.259823137078089e-7) * np.power(n, 9)
            - complex(3.4627926147031265e8, 5.3381447021793165e-8) * np.power(n, 10)
            - complex(2.84068280075561e7, 3.5211097252823663e-9) * np.power(n, 11)
            - complex(1.72524518874892e6, 2.480870637667729e-10) * np.power(n, 12)
            - complex(75180.21417891773, 2.672155268808036e-12) * np.power(n, 13)
            - complex(2221.544934523533, 3.024184544294806e-13) * np.power(n, 14)
            - 39.8447173169642 * np.power(n, 15)
            - 0.3272966537768275 * np.power(n, 16)
            + H21
            * (
                -4.302076232534848e12
                - 1.53507931440122e13 * n
                - 2.3853545410321223e13 * np.power(n, 2)
                - 2.170803074046334e13 * np.power(n, 3)
                - 1.3064271224116332e13 * np.power(n, 4)
                - 5.547952832953075e12 * np.power(n, 5)
                - 1.7279086122273728e12 * np.power(n, 6)
                - 4.041008596208101e11 * np.power(n, 7)
                - 7.193431686649904e10 * np.power(n, 8)
                - 9.803816052654116e9 * np.power(n, 9)
                - 1.0217751899949871e9 * np.power(n, 10)
                - 8.073087028086561e7 * np.power(n, 11)
                - 4.748284771638826e6 * np.power(n, 12)
                - 201274.13241954896 * np.power(n, 13)
                - 5806.617255974238 * np.power(n, 14)
                - 101.98591214459 * np.power(n, 15)
                - 0.8224670334241131 * np.power(n, 16)
            )
            + complex(7.708392419040001e11, 0.00009449713909064082) * S1
            + complex(2.7505309320805107e12, 0.0003858633179534501) * n * S1
            + complex(4.2740406880192827e12, 0.0006260435464754956)
            * np.power(n, 2)
            * S1
            + complex(3.8896107494933716e12, 0.0005118595034076379)
            * np.power(n, 3)
            * S1
            + complex(2.3408355366339976e12, 0.0002323054669311587)
            * np.power(n, 4)
            * S1
            + complex(9.940734484272197e11, 0.00007481023511342399)
            * np.power(n, 5)
            * S1
            + complex(3.0960394301147516e11, 0.000027684708717961177)
            * np.power(n, 6)
            * S1
            + complex(7.24061554109936e10, 0.000010043397107127028)
            * np.power(n, 7)
            * S1
            + complex(1.2889077571640892e10, 2.3570453394597503e-6)
            * np.power(n, 8)
            * S1
            + complex(1.7566323154951086e9, 3.441363097579897e-7) * np.power(n, 9) * S1
            + complex(1.8308006885037723e8, 3.4608702131655363e-8)
            * np.power(n, 10)
            * S1
            + complex(1.4465230154437648e7, 1.9284163711165284e-9)
            * np.power(n, 11)
            * S1
            + complex(850790.1849888319, 4.107008214012321e-12) * np.power(n, 12) * S1
            + complex(36063.98196197322, 1.1734309182892347e-12) * np.power(n, 13) * S1
            + complex(1040.4205322471842, 1.1734309182892347e-13) * np.power(n, 14) * S1
            + 18.27367507063043 * np.power(n, 15) * S1
            + 0.14736834734379375 * np.power(n, 16) * S1
            + n
            * (
                -2.196022510565852e12
                - 7.835911191984595e12 * n
                - 1.2176195828823182e13 * np.power(n, 2)
                - 1.1081004052321111e13 * np.power(n, 3)
                - 6.668741356866405e12 * np.power(n, 4)
                - 2.831988242464008e12 * np.power(n, 5)
                - 8.820220757492529e11 * np.power(n, 6)
                - 2.062758854794705e11 * np.power(n, 7)
                - 3.671933517271283e10 * np.power(n, 8)
                - 5.004421023099778e9 * np.power(n, 9)
                - 5.2157172413576376e8 * np.power(n, 10)
                - 4.1209592497130744e7 * np.power(n, 11)
                - 2.4237925321355704e6 * np.power(n, 12)
                - 102741.67673860745 * np.power(n, 13)
                - 2964.0251625309274 * np.power(n, 14)
                - 52.059365460883136 * np.power(n, 15)
                - 0.419833592426477 * np.power(n, 16)
            )
            * mp.hyper(list([1.0, 1.0, 1.0 - 1.0 * n]), list([2.0, 2.0]), -1.0)
        )
        / (
            (1.0 + n)
            * (2.0 + n)
            * (3.0 + n)
            * np.power(4.0 + n, 2)
            * (5.0 + n)
            * (6.0 + n)
            * (7.0 + n)
            * (8.0 + n)
            * (9.0 + n)
            * (10.0 + n)
            * (11.0 + n)
            * (12.0 + n)
            * (13.0 + n)
            * (14.0 + n)
            * (15.0 + n)
        )
    )


# @nb.njit("c16(c16)", cache=True)
def S3l2(n):
    return complex(
        2.0 * ((1.38104 - 0.377347j) - 2 ** n * mp.lerchphi(2.0, 3.0, 1.0 + n))
    )


# @nb.njit("c16(c16,c16)", cache=True)
def S112l2051(n, S1):
    return complex(
        -0.7512855644747464 * S1
        + (
            -0.00009170966363217119
            + np.power(n, 16) * (-1.1551344276377544 + 0.7512855644747464 * S1)
            + 9.824368757120372e11 * S1
            + np.power(n, 15) * (-138.12633167732008 + 90.90555330144431 * S1)
            + np.power(n, 14) * (-7543.3310441845915 + 5033.6132819808 * S1)
            + np.power(n, 13) * (-249212.9318573135 + 169024.22629552844 * S1)
            + np.power(n, 12) * (-5.5609596917238e6 + 3.8450960472641704e6 * S1)
            + np.power(n, 11) * (-8.860864646926463e7 + 6.270086727106097e7 * S1)
            + np.power(n, 10) * (-1.0392528981358187e9 + 7.562847839035856e8 * S1)
            + np.power(n, 9) * (-9.112653779990723e9 + 6.863537366891241e9 * S1)
            + np.power(n, 8) * (-6.0048063053520065e10 + 4.7209851439097336e10 * S1)
            + np.power(n, 7) * (-2.962939969277478e11 + 2.4599669313036557e11 * S1)
            + np.power(n, 6) * (-1.0811050344017815e12 + 9.635051930282513e11 * S1)
            + np.power(n, 5) * (-2.849355344696549e12 + 2.792141871178878e12 * S1)
            + n * (-1.2515090782257412e12 + 4.242387400717028e12 * S1)
            + np.power(n, 4) * (-5.216229253731701e12 + 5.832837664170654e12 * S1)
            + np.power(n, 2) * (-4.2583318206830425e12 + 7.892240292128241e12 * S1)
            + np.power(n, 3) * (-6.210399061644802e12 + 8.43153763901703e12 * S1)
        )
        / (
            np.power(1.0 + n, 2)
            * (2.0 + n)
            * (3.0 + n)
            * (4.0 + n)
            * (5.0 + n)
            * (6.0 + n)
            * (7.0 + n)
            * (8.0 + n)
            * (9.0 + n)
            * (10.0 + n)
            * (11.0 + n)
            * (12.0 + n)
            * (13.0 + n)
            * (14.0 + n)
            * (15.0 + n)
        )
        - (
            0.3756427822373732
            * (complex(0.0, 1.0) + 1 / np.tan(3.141592653589793 * n))
            * (
                6.283185307179586 * n * np.cos(3.141592653589793 * n)
                + np.power(2.0, n)
                * (-2.0 + n * mp.lerchphi(0.5, 1.0, 1.0 - 1.0 * n))
                * np.sin(3.141592653589793 * n)
            )
        )
        / (np.power(2.718281828459045, complex(0.0, 3.141592653589793) * n) * n)
    )

