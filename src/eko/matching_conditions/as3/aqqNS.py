import numba as nb
import numpy as np

from ...harmonics.log_functions import lm11, lm12, lm13


@nb.njit(cache=True)
def A_qqNS(n, sx, nf, L, eta):
    r"""Computes the |N3LO| singlet |OME| :math:`A_{qq}^{NS,(3)}(N)`.
    The expression is presented in :cite:`Bierenbaum:2009mv` and
    :cite:`Ablinger:2014vwa`. It contains some weight 5 harmonics sums.

    When using the code, please cite the complete list of references
    available in :mod:`eko.matching_conditions.as3`.

    Note the part proportional to nf^0 includes weight = 5
    harmonics and has been parametrized in Mellin space.
    For this piece the accuracy wrt the known moments is below the 0.01% (N<1000)
    and the absolute diff is within 5e-3.
    All the other contributions are provided exact.

    Parameters
    ----------
    n : complex
        Mellin moment
    sx : list
        harmonic sums cache
    nf : int
        number of active flavor below the threshold
    L : float
        :math:`\ln(\mu_F^2 / m_h^2)`
    eta: int
        :math:`(-1)^n` factor to be continued with 1 for singlet like and -1 for non-singlet like

    Returns
    -------
    complex
        :math:`A_{qq}^{NS,(3)}(N)`

    """
    S1, _ = sx[0]
    S2, Sm2 = sx[1]
    S3, S21, _, Sm21, _, Sm3 = sx[2]
    S4, S31, S211, Sm22, Sm211, _, Sm4 = sx[3]
    S5, Sm5 = sx[4]
    a_qqNS_l0_nf1 = (
        9.972841687007257 / np.power(1.0 + n, 5)
        + 0.7901234567901235 / (np.power(n, 4) * np.power(1.0 + n, 5))
        + 1.0534979423868314 / (np.power(n, 3) * np.power(1.0 + n, 5))
        - 3.4238683127572016 / (np.power(n, 2) * np.power(1.0 + n, 5))
        - 4.3551062252579404 / (n * np.power(1.0 + n, 5))
        + (22.86861739934704 * n) / np.power(1.0 + n, 5)
        + (17.894957028741118 * np.power(n, 2)) / np.power(1.0 + n, 5)
        + (8.836818914391468 * np.power(n, 3)) / np.power(1.0 + n, 5)
        + (3.9622177138576284 * np.power(n, 4)) / np.power(1.0 + n, 5)
        + (0.7924435427715257 * np.power(n, 5)) / np.power(1.0 + n, 5)
        - (3.405013886932678 * S1) / np.power(1.0 + n, 5)
        - (17.025069434663394 * n * S1) / np.power(1.0 + n, 5)
        - (34.05013886932679 * np.power(n, 2) * S1) / np.power(1.0 + n, 5)
        - (34.05013886932679 * np.power(n, 3) * S1) / np.power(1.0 + n, 5)
        - (17.025069434663394 * np.power(n, 4) * S1) / np.power(1.0 + n, 5)
        - (3.405013886932678 * np.power(n, 5) * S1) / np.power(1.0 + n, 5)
        + (0.5267489711934157 * S2) / np.power(1.0 + n, 5)
        + (2.633744855967078 * n * S2) / np.power(1.0 + n, 5)
        + (5.267489711934156 * np.power(n, 2) * S2) / np.power(1.0 + n, 5)
        + (5.267489711934156 * np.power(n, 3) * S2) / np.power(1.0 + n, 5)
        + (2.633744855967078 * np.power(n, 4) * S2) / np.power(1.0 + n, 5)
        + (0.5267489711934157 * np.power(n, 5) * S2) / np.power(1.0 + n, 5)
        + (2.633744855967078 * S3) / np.power(1.0 + n, 5)
        + (13.168724279835391 * n * S3) / np.power(1.0 + n, 5)
        + (26.337448559670783 * np.power(n, 2) * S3) / np.power(1.0 + n, 5)
        + (26.337448559670783 * np.power(n, 3) * S3) / np.power(1.0 + n, 5)
        + (13.168724279835391 * np.power(n, 4) * S3) / np.power(1.0 + n, 5)
        + (2.633744855967078 * np.power(n, 5) * S3) / np.power(1.0 + n, 5)
        - (1.5802469135802468 * S4) / np.power(1.0 + n, 5)
        - (7.901234567901234 * n * S4) / np.power(1.0 + n, 5)
        - (15.802469135802468 * np.power(n, 2) * S4) / np.power(1.0 + n, 5)
        - (15.802469135802468 * np.power(n, 3) * S4) / np.power(1.0 + n, 5)
        - (7.901234567901234 * np.power(n, 4) * S4) / np.power(1.0 + n, 5)
        - (1.5802469135802468 * np.power(n, 5) * S4) / np.power(1.0 + n, 5)
    )
    a_qqNS_l0_nf0 = (
        495.9021164140525 / np.power(1.0 + n, 5)
        - (30.09053497942388 * eta) / np.power(1.0 + n, 5)
        + 12.641975308641978 / (np.power(n, 5) * np.power(1.0 + n, 5))
        - (1.5802469135802473 * eta) / (np.power(n, 5) * np.power(1.0 + n, 5))
        + 17.11934156378601 / (np.power(n, 4) * np.power(1.0 + n, 5))
        - (2.8971193415637853 * eta) / (np.power(n, 4) * np.power(1.0 + n, 5))
        + 33.536351165980804 / (np.power(n, 3) * np.power(1.0 + n, 5))
        - (2.2167352537722906 * eta) / (np.power(n, 3) * np.power(1.0 + n, 5))
        + 149.33749503118256 / (np.power(n, 2) * np.power(1.0 + n, 5))
        - (10.644718792866943 * eta) / (np.power(n, 2) * np.power(1.0 + n, 5))
        + 313.3204581303606 / (n * np.power(1.0 + n, 5))
        - (28.159122085048004 * eta) / (n * np.power(1.0 + n, 5))
        + (574.765958897151 * n) / np.power(1.0 + n, 5)
        - (18.589849108367623 * eta * n) / np.power(1.0 + n, 5)
        + (265.13117338652285 * np.power(n, 2)) / np.power(1.0 + n, 5)
        - (3.0288065843621395 * eta * np.power(n, 2)) / np.power(1.0 + n, 5)
        - (70.47890593844664 * np.power(n, 3)) / np.power(1.0 + n, 5)
        - (0.8559670781893005 * eta * np.power(n, 3)) / np.power(1.0 + n, 5)
        + (30.846395931033122 * np.power(n, 4)) / np.power(1.0 + n, 5)
        + (145.9284284602288 * np.power(n, 5)) / np.power(1.0 + n, 5)
        + (57.69873135166052 * np.power(n, 6)) / np.power(1.0 + n, 5)
        - (195.1472285147626 * S1) / np.power(1.0 + n, 5)
        + (19.358024691358025 * eta * S1) / np.power(1.0 + n, 5)
        - (27.25925925925926 * S1) / (np.power(n, 4) * np.power(1.0 + n, 5))
        - (1.5802469135802468 * eta * S1) / (np.power(n, 4) * np.power(1.0 + n, 5))
        - (77.30041152263375 * S1) / (np.power(n, 3) * np.power(1.0 + n, 5))
        - (2.897119341563786 * eta * S1) / (np.power(n, 3) * np.power(1.0 + n, 5))
        - (94.90260631001371 * S1) / (np.power(n, 2) * np.power(1.0 + n, 5))
        + (3.8189300411522638 * eta * S1) / (np.power(n, 2) * np.power(1.0 + n, 5))
        - (141.92375385883807 * S1) / (n * np.power(1.0 + n, 5))
        + (15.275720164609055 * eta * S1) / (n * np.power(1.0 + n, 5))
        - (140.3207353264853 * n * S1) / np.power(1.0 + n, 5)
        + (10.403292181069954 * eta * n * S1) / np.power(1.0 + n, 5)
        - (100.79602140092175 * np.power(n, 2) * S1) / np.power(1.0 + n, 5)
        + (1.5802469135802468 * eta * np.power(n, 2) * S1) / np.power(1.0 + n, 5)
        - (142.9973249821577 * np.power(n, 3) * S1) / np.power(1.0 + n, 5)
        + (0.3950617283950617 * eta * np.power(n, 3) * S1) / np.power(1.0 + n, 5)
        - (106.13898034903957 * np.power(n, 4) * S1) / np.power(1.0 + n, 5)
        - (21.70187014388199 * np.power(n, 5) * S1) / np.power(1.0 + n, 5)
        - (0.6386604072798434 * np.power(S1, 2)) / np.power(1.0 + n, 5)
        - (4.7407407407407405 * eta * np.power(S1, 2)) / np.power(1.0 + n, 5)
        + (5.530864197530864 * np.power(S1, 2))
        / (np.power(n, 3) * np.power(1.0 + n, 5))
        - (0.7901234567901234 * eta * np.power(S1, 2))
        / (np.power(n, 3) * np.power(1.0 + n, 5))
        + (22.814814814814824 * np.power(S1, 2))
        / (np.power(n, 2) * np.power(1.0 + n, 5))
        - (3.1604938271604937 * eta * np.power(S1, 2))
        / (np.power(n, 2) * np.power(1.0 + n, 5))
        + (38.81481481481481 * np.power(S1, 2)) / (n * np.power(1.0 + n, 5))
        - (5.530864197530864 * eta * np.power(S1, 2)) / (n * np.power(1.0 + n, 5))
        - (165.26737611047332 * n * np.power(S1, 2)) / np.power(1.0 + n, 5)
        - (1.5802469135802468 * eta * n * np.power(S1, 2)) / np.power(1.0 + n, 5)
        - (368.55944357897135 * np.power(n, 2) * np.power(S1, 2)) / np.power(1.0 + n, 5)
        - (378.23845592465034 * np.power(n, 3) * np.power(S1, 2)) / np.power(1.0 + n, 5)
        - (191.24268475244867 * np.power(n, 4) * np.power(S1, 2)) / np.power(1.0 + n, 5)
        - (38.465820901107016 * np.power(n, 5) * np.power(S1, 2)) / np.power(1.0 + n, 5)
        - (4.7407407407407405 * np.power(S1, 3)) / np.power(1.0 + n, 5)
        - (0.5267489711934156 * np.power(S1, 3))
        / (np.power(n, 2) * np.power(1.0 + n, 5))
        - (2.633744855967078 * np.power(S1, 3)) / (n * np.power(1.0 + n, 5))
        - (3.687242798353909 * n * np.power(S1, 3)) / np.power(1.0 + n, 5)
        - (1.0534979423868311 * np.power(n, 2) * np.power(S1, 3)) / np.power(1.0 + n, 5)
        - (33.30542001697012 * S2) / np.power(1.0 + n, 5)
        - (4.7407407407407405 * eta * S2) / np.power(1.0 + n, 5)
        - (7.111111111111112 * S2) / (np.power(n, 3) * np.power(1.0 + n, 5))
        - (0.7901234567901234 * eta * S2) / (np.power(n, 3) * np.power(1.0 + n, 5))
        - (16.16460905349794 * S2) / (np.power(n, 2) * np.power(1.0 + n, 5))
        - (3.1604938271604937 * eta * S2) / (np.power(n, 2) * np.power(1.0 + n, 5))
        - (11.050754458161864 * S2) / (n * np.power(1.0 + n, 5))
        - (5.530864197530864 * eta * S2) / (n * np.power(1.0 + n, 5))
        - (70.51612614795073 * n * S2) / np.power(1.0 + n, 5)
        - (1.5802469135802468 * eta * n * S2) / np.power(1.0 + n, 5)
        + (5.875840982562162 * np.power(n, 2) * S2) / np.power(1.0 + n, 5)
        + (120.24621135293253 * np.power(n, 3) * S2) / np.power(1.0 + n, 5)
        + (97.28634298785173 * np.power(n, 4) * S2) / np.power(1.0 + n, 5)
        + (22.12393526423702 * np.power(n, 5) * S2) / np.power(1.0 + n, 5)
        + (126.4636488340192 * S1 * S2) / np.power(1.0 + n, 5)
        + (0.7901234567901234 * S1 * S2) / (np.power(n, 2) * np.power(1.0 + n, 5))
        + (15.407407407407407 * S1 * S2) / (n * np.power(1.0 + n, 5))
        + (462.8367626886146 * n * S1 * S2) / np.power(1.0 + n, 5)
        + (843.5006858710562 * np.power(n, 2) * S1 * S2) / np.power(1.0 + n, 5)
        + (803.5994513031549 * np.power(n, 3) * S1 * S2) / np.power(1.0 + n, 5)
        + (382.63923182441704 * np.power(n, 4) * S1 * S2) / np.power(1.0 + n, 5)
        + (71.55006858710561 * np.power(n, 5) * S1 * S2) / np.power(1.0 + n, 5)
        + (3.1604938271604937 * np.power(S1, 2) * S2) / np.power(1.0 + n, 5)
        + (0.7901234567901234 * np.power(S1, 2) * S2) / (n * np.power(1.0 + n, 5))
        + (4.7407407407407405 * n * np.power(S1, 2) * S2) / np.power(1.0 + n, 5)
        + (3.1604938271604937 * np.power(n, 2) * np.power(S1, 2) * S2)
        / np.power(1.0 + n, 5)
        + (0.7901234567901234 * np.power(n, 3) * np.power(S1, 2) * S2)
        / np.power(1.0 + n, 5)
        - (0.5267489711934156 * np.power(S1, 3) * S2) / np.power(1.0 + n, 5)
        - (2.633744855967079 * n * np.power(S1, 3) * S2) / np.power(1.0 + n, 5)
        - (5.267489711934158 * np.power(n, 2) * np.power(S1, 3) * S2)
        / np.power(1.0 + n, 5)
        - (5.267489711934158 * np.power(n, 3) * np.power(S1, 3) * S2)
        / np.power(1.0 + n, 5)
        - (2.633744855967079 * np.power(n, 4) * np.power(S1, 3) * S2)
        / np.power(1.0 + n, 5)
        - (0.5267489711934156 * np.power(n, 5) * np.power(S1, 3) * S2)
        / np.power(1.0 + n, 5)
        - (66.79835390946502 * np.power(S2, 2)) / np.power(1.0 + n, 5)
        - (9.28395061728395 * np.power(S2, 2)) / (n * np.power(1.0 + n, 5))
        - (204.0164609053498 * n * np.power(S2, 2)) / np.power(1.0 + n, 5)
        - (333.761316872428 * np.power(n, 2) * np.power(S2, 2)) / np.power(1.0 + n, 5)
        - (305.90946502057614 * np.power(n, 3) * np.power(S2, 2)) / np.power(1.0 + n, 5)
        - (148.3127572016461 * np.power(n, 4) * np.power(S2, 2)) / np.power(1.0 + n, 5)
        - (29.662551440329217 * np.power(n, 5) * np.power(S2, 2)) / np.power(1.0 + n, 5)
        + (18.567901234567906 * S1 * np.power(S2, 2)) / np.power(1.0 + n, 5)
        + (92.83950617283952 * n * S1 * np.power(S2, 2)) / np.power(1.0 + n, 5)
        + (185.67901234567904 * np.power(n, 2) * S1 * np.power(S2, 2))
        / np.power(1.0 + n, 5)
        + (185.67901234567904 * np.power(n, 3) * S1 * np.power(S2, 2))
        / np.power(1.0 + n, 5)
        + (92.83950617283952 * np.power(n, 4) * S1 * np.power(S2, 2))
        / np.power(1.0 + n, 5)
        + (18.567901234567906 * np.power(n, 5) * S1 * np.power(S2, 2))
        / np.power(1.0 + n, 5)
        + (62.81481481481482 * S21) / np.power(1.0 + n, 5)
        + (7.901234567901234 * S21) / (np.power(n, 2) * np.power(1.0 + n, 5))
        + (26.271604938271597 * S21) / (n * np.power(1.0 + n, 5))
        + (99.95061728395063 * n * S21) / np.power(1.0 + n, 5)
        + (49.77777777777778 * np.power(n, 2) * S21) / np.power(1.0 + n, 5)
        - (71.70370370370368 * np.power(n, 3) * S21) / np.power(1.0 + n, 5)
        - (126.02469135802468 * np.power(n, 4) * S21) / np.power(1.0 + n, 5)
        - (81.38271604938268 * np.power(n, 5) * S21) / np.power(1.0 + n, 5)
        - (21.333333333333332 * np.power(n, 6) * S21) / np.power(1.0 + n, 5)
        - (79.20987654320989 * S1 * S21) / np.power(1.0 + n, 5)
        - (15.802469135802468 * S1 * S21) / (n * np.power(1.0 + n, 5))
        - (174.8148148148148 * n * S1 * S21) / np.power(1.0 + n, 5)
        - (223.20987654320987 * np.power(n, 2) * S1 * S21) / np.power(1.0 + n, 5)
        - (175.80246913580245 * np.power(n, 3) * S1 * S21) / np.power(1.0 + n, 5)
        - (80.0 * np.power(n, 4) * S1 * S21) / np.power(1.0 + n, 5)
        - (16.0 * np.power(n, 5) * S1 * S21) / np.power(1.0 + n, 5)
        + (15.802469135802472 * np.power(S1, 2) * S21) / np.power(1.0 + n, 5)
        + (79.01234567901236 * n * np.power(S1, 2) * S21) / np.power(1.0 + n, 5)
        + (158.0246913580247 * np.power(n, 2) * np.power(S1, 2) * S21)
        / np.power(1.0 + n, 5)
        + (158.0246913580247 * np.power(n, 3) * np.power(S1, 2) * S21)
        / np.power(1.0 + n, 5)
        + (79.01234567901236 * np.power(n, 4) * np.power(S1, 2) * S21)
        / np.power(1.0 + n, 5)
        + (15.80246913580247 * np.power(n, 5) * np.power(S1, 2) * S21)
        / np.power(1.0 + n, 5)
        - (42.66666666666667 * S2 * S21) / np.power(1.0 + n, 5)
        - (213.33333333333337 * n * S2 * S21) / np.power(1.0 + n, 5)
        - (426.66666666666674 * np.power(n, 2) * S2 * S21) / np.power(1.0 + n, 5)
        - (426.66666666666674 * np.power(n, 3) * S2 * S21) / np.power(1.0 + n, 5)
        - (213.33333333333337 * np.power(n, 4) * S2 * S21) / np.power(1.0 + n, 5)
        - (42.666666666666664 * np.power(n, 5) * S2 * S21) / np.power(1.0 + n, 5)
        + (123.85185185185182 * S211) / np.power(1.0 + n, 5)
        + (22.51851851851852 * S211) / (n * np.power(1.0 + n, 5))
        + (304.0 * n * S211) / np.power(1.0 + n, 5)
        + (427.85185185185185 * np.power(n, 2) * S211) / np.power(1.0 + n, 5)
        + (360.2962962962963 * np.power(n, 3) * S211) / np.power(1.0 + n, 5)
        + (168.88888888888889 * np.power(n, 4) * S211) / np.power(1.0 + n, 5)
        + (33.77777777777777 * np.power(n, 5) * S211) / np.power(1.0 + n, 5)
        - (45.03703703703704 * S1 * S211) / np.power(1.0 + n, 5)
        - (225.18518518518522 * n * S1 * S211) / np.power(1.0 + n, 5)
        - (450.37037037037044 * np.power(n, 2) * S1 * S211) / np.power(1.0 + n, 5)
        - (450.37037037037044 * np.power(n, 3) * S1 * S211) / np.power(1.0 + n, 5)
        - (225.18518518518522 * np.power(n, 4) * S1 * S211) / np.power(1.0 + n, 5)
        - (45.03703703703704 * np.power(n, 5) * S1 * S211) / np.power(1.0 + n, 5)
        - (19.906721536351156 * S3) / np.power(1.0 + n, 5)
        - (0.2633744855967078 * S3) / (np.power(n, 2) * np.power(1.0 + n, 5))
        + (13.958847736625515 * S3) / (n * np.power(1.0 + n, 5))
        - (282.6447187928669 * n * S3) / np.power(1.0 + n, 5)
        - (668.3347050754458 * np.power(n, 2) * S3) / np.power(1.0 + n, 5)
        - (728.4499314128943 * np.power(n, 3) * S3) / np.power(1.0 + n, 5)
        - (402.67764060356654 * np.power(n, 4) * S3) / np.power(1.0 + n, 5)
        - (99.37997256515774 * np.power(n, 5) * S3) / np.power(1.0 + n, 5)
        - (5.333333333333333 * np.power(n, 6) * S3) / np.power(1.0 + n, 5)
        - (17.90946502057613 * S1 * S3) / np.power(1.0 + n, 5)
        - (1.1851851851851851 * S1 * S3) / (n * np.power(1.0 + n, 5))
        - (72.95473251028807 * n * S1 * S3) / np.power(1.0 + n, 5)
        - (136.42798353909464 * np.power(n, 2) * S1 * S3) / np.power(1.0 + n, 5)
        - (132.87242798353907 * np.power(n, 3) * S1 * S3) / np.power(1.0 + n, 5)
        - (65.84362139917695 * np.power(n, 4) * S1 * S3) / np.power(1.0 + n, 5)
        - (13.16872427983539 * np.power(n, 5) * S1 * S3) / np.power(1.0 + n, 5)
        + (1.1851851851851851 * np.power(S1, 2) * S3) / np.power(1.0 + n, 5)
        + (5.925925925925927 * n * np.power(S1, 2) * S3) / np.power(1.0 + n, 5)
        + (11.851851851851855 * np.power(n, 2) * np.power(S1, 2) * S3)
        / np.power(1.0 + n, 5)
        + (11.851851851851855 * np.power(n, 3) * np.power(S1, 2) * S3)
        / np.power(1.0 + n, 5)
        + (5.925925925925927 * np.power(n, 4) * np.power(S1, 2) * S3)
        / np.power(1.0 + n, 5)
        + (1.1851851851851851 * np.power(n, 5) * np.power(S1, 2) * S3)
        / np.power(1.0 + n, 5)
        + (45.1687242798354 * S2 * S3) / np.power(1.0 + n, 5)
        + (225.84362139917698 * n * S2 * S3) / np.power(1.0 + n, 5)
        + (451.68724279835396 * np.power(n, 2) * S2 * S3) / np.power(1.0 + n, 5)
        + (451.68724279835396 * np.power(n, 3) * S2 * S3) / np.power(1.0 + n, 5)
        + (225.84362139917698 * np.power(n, 4) * S2 * S3) / np.power(1.0 + n, 5)
        + (45.16872427983539 * np.power(n, 5) * S2 * S3) / np.power(1.0 + n, 5)
        - (75.3909465020576 * S31) / np.power(1.0 + n, 5)
        - (5.530864197530864 * S31) / (n * np.power(1.0 + n, 5))
        - (299.52263374485597 * n * S31) / np.power(1.0 + n, 5)
        - (554.798353909465 * np.power(n, 2) * S31) / np.power(1.0 + n, 5)
        - (538.2057613168724 * np.power(n, 3) * S31) / np.power(1.0 + n, 5)
        - (266.33744855967075 * np.power(n, 4) * S31) / np.power(1.0 + n, 5)
        - (53.26748971193416 * np.power(n, 5) * S31) / np.power(1.0 + n, 5)
        + (11.06172839506173 * S1 * S31) / np.power(1.0 + n, 5)
        + (55.308641975308646 * n * S1 * S31) / np.power(1.0 + n, 5)
        + (110.61728395061729 * np.power(n, 2) * S1 * S31) / np.power(1.0 + n, 5)
        + (110.61728395061729 * np.power(n, 3) * S1 * S31) / np.power(1.0 + n, 5)
        + (55.308641975308646 * np.power(n, 4) * S1 * S31) / np.power(1.0 + n, 5)
        + (11.061728395061728 * np.power(n, 5) * S1 * S31) / np.power(1.0 + n, 5)
        - (14.650205761316872 * S4) / np.power(1.0 + n, 5)
        - (11.654320987654318 * S4) / (n * np.power(1.0 + n, 5))
        + (89.90946502057614 * n * S4) / np.power(1.0 + n, 5)
        + (273.0534979423868 * np.power(n, 2) * S4) / np.power(1.0 + n, 5)
        + (308.0164609053498 * np.power(n, 3) * S4) / np.power(1.0 + n, 5)
        + (159.83539094650206 * np.power(n, 4) * S4) / np.power(1.0 + n, 5)
        + (31.967078189300413 * np.power(n, 5) * S4) / np.power(1.0 + n, 5)
        + (23.308641975308646 * S1 * S4) / np.power(1.0 + n, 5)
        + (116.54320987654324 * n * S1 * S4) / np.power(1.0 + n, 5)
        + (233.0864197530865 * np.power(n, 2) * S1 * S4) / np.power(1.0 + n, 5)
        + (233.0864197530865 * np.power(n, 3) * S1 * S4) / np.power(1.0 + n, 5)
        + (116.54320987654324 * np.power(n, 4) * S1 * S4) / np.power(1.0 + n, 5)
        + (23.308641975308646 * np.power(n, 5) * S1 * S4) / np.power(1.0 + n, 5)
        + (0.7901234567901235 * S5) / np.power(1.0 + n, 5)
        + (3.950617283950618 * n * S5) / np.power(1.0 + n, 5)
        + (7.901234567901236 * np.power(n, 2) * S5) / np.power(1.0 + n, 5)
        + (7.901234567901236 * np.power(n, 3) * S5) / np.power(1.0 + n, 5)
        + (3.950617283950618 * np.power(n, 4) * S5) / np.power(1.0 + n, 5)
        + (0.7901234567901234 * np.power(n, 5) * S5) / np.power(1.0 + n, 5)
        + (37.48696844993141 * Sm2) / np.power(1.0 + n, 5)
        + (1.5802469135802468 * Sm2) / (np.power(n, 3) * np.power(1.0 + n, 5))
        + (2.897119341563786 * Sm2) / (np.power(n, 2) * np.power(1.0 + n, 5))
        + (8.252400548696844 * Sm2) / (n * np.power(1.0 + n, 5))
        + (69.79423868312756 * n * Sm2) / np.power(1.0 + n, 5)
        + (55.13305898491083 * np.power(n, 2) * Sm2) / np.power(1.0 + n, 5)
        + (15.890260631001372 * np.power(n, 3) * Sm2) / np.power(1.0 + n, 5)
        - (30.727023319615913 * S1 * Sm2) / np.power(1.0 + n, 5)
        - (1.5802469135802468 * S1 * Sm2) / (np.power(n, 2) * np.power(1.0 + n, 5))
        - (6.320987654320987 * S1 * Sm2) / (n * np.power(1.0 + n, 5))
        - (109.38820301783264 * n * S1 * Sm2) / np.power(1.0 + n, 5)
        - (202.97393689986282 * np.power(n, 2) * S1 * Sm2) / np.power(1.0 + n, 5)
        - (198.23319615912206 * np.power(n, 3) * S1 * Sm2) / np.power(1.0 + n, 5)
        - (98.32647462277092 * np.power(n, 4) * S1 * Sm2) / np.power(1.0 + n, 5)
        - (19.665294924554182 * np.power(n, 5) * S1 * Sm2) / np.power(1.0 + n, 5)
        + (6.320987654320987 * np.power(S1, 2) * Sm2) / np.power(1.0 + n, 5)
        + (1.5802469135802468 * np.power(S1, 2) * Sm2) / (n * np.power(1.0 + n, 5))
        + (9.481481481481481 * n * np.power(S1, 2) * Sm2) / np.power(1.0 + n, 5)
        + (6.320987654320987 * np.power(n, 2) * np.power(S1, 2) * Sm2)
        / np.power(1.0 + n, 5)
        + (1.5802469135802468 * np.power(n, 3) * np.power(S1, 2) * Sm2)
        / np.power(1.0 + n, 5)
        - (1.0534979423868311 * np.power(S1, 3) * Sm2) / np.power(1.0 + n, 5)
        - (5.267489711934158 * n * np.power(S1, 3) * Sm2) / np.power(1.0 + n, 5)
        - (10.534979423868316 * np.power(n, 2) * np.power(S1, 3) * Sm2)
        / np.power(1.0 + n, 5)
        - (10.534979423868316 * np.power(n, 3) * np.power(S1, 3) * Sm2)
        / np.power(1.0 + n, 5)
        - (5.267489711934158 * np.power(n, 4) * np.power(S1, 3) * Sm2)
        / np.power(1.0 + n, 5)
        - (1.0534979423868311 * np.power(n, 5) * np.power(S1, 3) * Sm2)
        / np.power(1.0 + n, 5)
        + (5.267489711934158 * S2 * Sm2) / np.power(1.0 + n, 5)
        + (26.337448559670783 * n * S2 * Sm2) / np.power(1.0 + n, 5)
        + (52.674897119341566 * np.power(n, 2) * S2 * Sm2) / np.power(1.0 + n, 5)
        + (52.674897119341566 * np.power(n, 3) * S2 * Sm2) / np.power(1.0 + n, 5)
        + (26.337448559670783 * np.power(n, 4) * S2 * Sm2) / np.power(1.0 + n, 5)
        + (5.267489711934156 * np.power(n, 5) * S2 * Sm2) / np.power(1.0 + n, 5)
        + (6.320987654320988 * S21 * Sm2) / np.power(1.0 + n, 5)
        + (31.604938271604944 * n * S21 * Sm2) / np.power(1.0 + n, 5)
        + (63.20987654320989 * np.power(n, 2) * S21 * Sm2) / np.power(1.0 + n, 5)
        + (63.20987654320989 * np.power(n, 3) * S21 * Sm2) / np.power(1.0 + n, 5)
        + (31.604938271604944 * np.power(n, 4) * S21 * Sm2) / np.power(1.0 + n, 5)
        + (6.320987654320987 * np.power(n, 5) * S21 * Sm2) / np.power(1.0 + n, 5)
        - (2.1069958847736623 * S3 * Sm2) / np.power(1.0 + n, 5)
        - (10.534979423868316 * n * S3 * Sm2) / np.power(1.0 + n, 5)
        - (21.069958847736633 * np.power(n, 2) * S3 * Sm2) / np.power(1.0 + n, 5)
        - (21.069958847736633 * np.power(n, 3) * S3 * Sm2) / np.power(1.0 + n, 5)
        - (10.534979423868316 * np.power(n, 4) * S3 * Sm2) / np.power(1.0 + n, 5)
        - (2.1069958847736623 * np.power(n, 5) * S3 * Sm2) / np.power(1.0 + n, 5)
        + (11.237311385459535 * Sm21) / np.power(1.0 + n, 5)
        + (3.1604938271604937 * Sm21) / (np.power(n, 2) * np.power(1.0 + n, 5))
        + (5.794238683127572 * Sm21) / (n * np.power(1.0 + n, 5))
        + (69.88203017832647 * n * Sm21) / np.power(1.0 + n, 5)
        + (172.42249657064468 * np.power(n, 2) * Sm21) / np.power(1.0 + n, 5)
        + (189.80521262002742 * np.power(n, 3) * Sm21) / np.power(1.0 + n, 5)
        + (98.32647462277092 * np.power(n, 4) * Sm21) / np.power(1.0 + n, 5)
        + (19.665294924554182 * np.power(n, 5) * Sm21) / np.power(1.0 + n, 5)
        - (2.1069958847736623 * S1 * Sm21) / np.power(1.0 + n, 5)
        - (3.1604938271604937 * S1 * Sm21) / (n * np.power(1.0 + n, 5))
        + (33.7119341563786 * n * S1 * Sm21) / np.power(1.0 + n, 5)
        + (92.70781893004114 * np.power(n, 2) * S1 * Sm21) / np.power(1.0 + n, 5)
        + (102.18930041152262 * np.power(n, 3) * S1 * Sm21) / np.power(1.0 + n, 5)
        + (52.67489711934156 * np.power(n, 4) * S1 * Sm21) / np.power(1.0 + n, 5)
        + (10.534979423868311 * np.power(n, 5) * S1 * Sm21) / np.power(1.0 + n, 5)
        + (3.160493827160494 * np.power(S1, 2) * Sm21) / np.power(1.0 + n, 5)
        + (15.802469135802472 * n * np.power(S1, 2) * Sm21) / np.power(1.0 + n, 5)
        + (31.604938271604944 * np.power(n, 2) * np.power(S1, 2) * Sm21)
        / np.power(1.0 + n, 5)
        + (31.604938271604944 * np.power(n, 3) * np.power(S1, 2) * Sm21)
        / np.power(1.0 + n, 5)
        + (15.802469135802472 * np.power(n, 4) * np.power(S1, 2) * Sm21)
        / np.power(1.0 + n, 5)
        + (3.1604938271604937 * np.power(n, 5) * np.power(S1, 2) * Sm21)
        / np.power(1.0 + n, 5)
        - (9.481481481481481 * S2 * Sm21) / np.power(1.0 + n, 5)
        - (47.40740740740742 * n * S2 * Sm21) / np.power(1.0 + n, 5)
        - (94.81481481481484 * np.power(n, 2) * S2 * Sm21) / np.power(1.0 + n, 5)
        - (94.81481481481484 * np.power(n, 3) * S2 * Sm21) / np.power(1.0 + n, 5)
        - (47.40740740740742 * np.power(n, 4) * S2 * Sm21) / np.power(1.0 + n, 5)
        - (9.481481481481481 * np.power(n, 5) * S2 * Sm21) / np.power(1.0 + n, 5)
        + (4.213991769547325 * Sm211) / np.power(1.0 + n, 5)
        + (6.320987654320987 * Sm211) / (n * np.power(1.0 + n, 5))
        - (67.4238683127572 * n * Sm211) / np.power(1.0 + n, 5)
        - (185.41563786008228 * np.power(n, 2) * Sm211) / np.power(1.0 + n, 5)
        - (204.37860082304525 * np.power(n, 3) * Sm211) / np.power(1.0 + n, 5)
        - (105.34979423868312 * np.power(n, 4) * Sm211) / np.power(1.0 + n, 5)
        - (21.069958847736622 * np.power(n, 5) * Sm211) / np.power(1.0 + n, 5)
        - (12.641975308641976 * S1 * Sm211) / np.power(1.0 + n, 5)
        - (63.20987654320989 * n * S1 * Sm211) / np.power(1.0 + n, 5)
        - (126.41975308641977 * np.power(n, 2) * S1 * Sm211) / np.power(1.0 + n, 5)
        - (126.41975308641977 * np.power(n, 3) * S1 * Sm211) / np.power(1.0 + n, 5)
        - (63.20987654320989 * np.power(n, 4) * S1 * Sm211) / np.power(1.0 + n, 5)
        - (12.641975308641975 * np.power(n, 5) * S1 * Sm211) / np.power(1.0 + n, 5)
        - (1.0534979423868311 * Sm22) / np.power(1.0 + n, 5)
        - (1.5802469135802468 * Sm22) / (n * np.power(1.0 + n, 5))
        + (16.8559670781893 * n * Sm22) / np.power(1.0 + n, 5)
        + (46.35390946502057 * np.power(n, 2) * Sm22) / np.power(1.0 + n, 5)
        + (51.09465020576131 * np.power(n, 3) * Sm22) / np.power(1.0 + n, 5)
        + (26.33744855967078 * np.power(n, 4) * Sm22) / np.power(1.0 + n, 5)
        + (5.2674897119341555 * np.power(n, 5) * Sm22) / np.power(1.0 + n, 5)
        + (3.160493827160494 * S1 * Sm22) / np.power(1.0 + n, 5)
        + (15.802469135802472 * n * S1 * Sm22) / np.power(1.0 + n, 5)
        + (31.604938271604944 * np.power(n, 2) * S1 * Sm22) / np.power(1.0 + n, 5)
        + (31.604938271604944 * np.power(n, 3) * S1 * Sm22) / np.power(1.0 + n, 5)
        + (15.802469135802472 * np.power(n, 4) * S1 * Sm22) / np.power(1.0 + n, 5)
        + (3.1604938271604937 * np.power(n, 5) * S1 * Sm22) / np.power(1.0 + n, 5)
        - (25.108367626886142 * Sm3) / np.power(1.0 + n, 5)
        - (3.423868312757201 * Sm3) / (n * np.power(1.0 + n, 5))
        - (74.44718792866941 * n * Sm3) / np.power(1.0 + n, 5)
        - (116.76268861454045 * np.power(n, 2) * Sm3) / np.power(1.0 + n, 5)
        - (103.33058984910835 * np.power(n, 3) * Sm3) / np.power(1.0 + n, 5)
        - (49.16323731138546 * np.power(n, 4) * Sm3) / np.power(1.0 + n, 5)
        - (9.832647462277091 * np.power(n, 5) * Sm3) / np.power(1.0 + n, 5)
        + (11.588477366255143 * S1 * Sm3) / np.power(1.0 + n, 5)
        + (1.5802469135802468 * S1 * Sm3) / (n * np.power(1.0 + n, 5))
        + (35.81893004115226 * n * S1 * Sm3) / np.power(1.0 + n, 5)
        + (58.995884773662546 * np.power(n, 2) * S1 * Sm3) / np.power(1.0 + n, 5)
        + (54.25514403292181 * np.power(n, 3) * S1 * Sm3) / np.power(1.0 + n, 5)
        + (26.33744855967078 * np.power(n, 4) * S1 * Sm3) / np.power(1.0 + n, 5)
        + (5.2674897119341555 * np.power(n, 5) * S1 * Sm3) / np.power(1.0 + n, 5)
        - (1.580246913580247 * np.power(S1, 2) * Sm3) / np.power(1.0 + n, 5)
        - (7.901234567901236 * n * np.power(S1, 2) * Sm3) / np.power(1.0 + n, 5)
        - (15.802469135802472 * np.power(n, 2) * np.power(S1, 2) * Sm3)
        / np.power(1.0 + n, 5)
        - (15.802469135802472 * np.power(n, 3) * np.power(S1, 2) * Sm3)
        / np.power(1.0 + n, 5)
        - (7.901234567901236 * np.power(n, 4) * np.power(S1, 2) * Sm3)
        / np.power(1.0 + n, 5)
        - (1.5802469135802468 * np.power(n, 5) * np.power(S1, 2) * Sm3)
        / np.power(1.0 + n, 5)
        - (1.580246913580247 * S2 * Sm3) / np.power(1.0 + n, 5)
        - (7.901234567901236 * n * S2 * Sm3) / np.power(1.0 + n, 5)
        - (15.802469135802472 * np.power(n, 2) * S2 * Sm3) / np.power(1.0 + n, 5)
        - (15.802469135802472 * np.power(n, 3) * S2 * Sm3) / np.power(1.0 + n, 5)
        - (7.901234567901236 * np.power(n, 4) * S2 * Sm3) / np.power(1.0 + n, 5)
        - (1.5802469135802468 * np.power(n, 5) * S2 * Sm3) / np.power(1.0 + n, 5)
        + (11.588477366255143 * Sm4) / np.power(1.0 + n, 5)
        + (1.5802469135802468 * Sm4) / (n * np.power(1.0 + n, 5))
        + (35.81893004115226 * n * Sm4) / np.power(1.0 + n, 5)
        + (58.995884773662546 * np.power(n, 2) * Sm4) / np.power(1.0 + n, 5)
        + (54.25514403292181 * np.power(n, 3) * Sm4) / np.power(1.0 + n, 5)
        + (26.33744855967078 * np.power(n, 4) * Sm4) / np.power(1.0 + n, 5)
        + (5.2674897119341555 * np.power(n, 5) * Sm4) / np.power(1.0 + n, 5)
        - (3.160493827160494 * S1 * Sm4) / np.power(1.0 + n, 5)
        - (15.802469135802472 * n * S1 * Sm4) / np.power(1.0 + n, 5)
        - (31.604938271604944 * np.power(n, 2) * S1 * Sm4) / np.power(1.0 + n, 5)
        - (31.604938271604944 * np.power(n, 3) * S1 * Sm4) / np.power(1.0 + n, 5)
        - (15.802469135802472 * np.power(n, 4) * S1 * Sm4) / np.power(1.0 + n, 5)
        - (3.1604938271604937 * np.power(n, 5) * S1 * Sm4) / np.power(1.0 + n, 5)
        - (3.160493827160494 * Sm5) / np.power(1.0 + n, 5)
        - (15.802469135802472 * n * Sm5) / np.power(1.0 + n, 5)
        - (31.604938271604944 * np.power(n, 2) * Sm5) / np.power(1.0 + n, 5)
        - (31.604938271604944 * np.power(n, 3) * Sm5) / np.power(1.0 + n, 5)
        - (15.802469135802472 * np.power(n, 4) * Sm5) / np.power(1.0 + n, 5)
        - (3.1604938271604937 * np.power(n, 5) * Sm5) / np.power(1.0 + n, 5)
    )
    # Parametrized part
    if eta == 1:
        a_qqNS_l0_nf0_param = (
            147.83931709186118
            + 45156.430239607704 / n
            - 14435.546514027483 / (1.0 + n)
            - 1603.7997548321273 / (2.0 + n)
            - 104.98338120239582 / (3.0 + n)
            - (21482.59283158752 * S1) / np.power(n, 2)
            + (11376.066484683422 * S1) / n
            - (759.6781596720134 * np.power(S1, 2)) / np.power(n, 2)
            + (6073.669498185047 * np.power(S1, 2)) / n
            - (1230.7827652169453 * np.power(S1, 3)) / np.power(n, 2)
            - (759.6781596720134 * S2) / np.power(n, 2)
            + (6069.288084740374 * S2) / n
            - (3692.348295650836 * S1 * S2) / np.power(n, 2)
            - (1519.3563193440268 * S1 * S2) / n
            - (3692.348295650836 * np.power(S1, 2) * S2) / n
            - (3692.348295650836 * np.power(S2, 2)) / n
            - (2461.5655304338907 * S3) / np.power(n, 2)
            - (1519.3563193440268 * S3) / n
            - (7384.696591301672 * S1 * S3) / n
            - (7384.696591301672 * S4) / n
            + 6848.966829905777 * lm11(n, S1)
            + 835.9127189853539 * lm12(n, S1, S2)
            + 47.35861099725678 * lm13(n, S1, S2, S3)
        )
    else:
        a_qqNS_l0_nf0_param = (
            147.89971311728414
            + 46561.09914811763 / n
            - 14657.885447966839 / (1.0 + n)
            - 1543.3606675830035 / (2.0 + n)
            - 110.45052602390243 / (3.0 + n)
            - (22051.33713946243 * S1) / np.power(n, 2)
            + (11978.92236311467 * S1) / n
            - (891.7160774865839 * np.power(S1, 2)) / np.power(n, 2)
            + (6188.938434370643 * np.power(S1, 2)) / n
            - (1254.1411353199808 * np.power(S1, 3)) / np.power(n, 2)
            - (891.7160774865839 * S2) / np.power(n, 2)
            + (6175.0769601369975 * S2) / n
            - (3762.423405959942 * S1 * S2) / np.power(n, 2)
            - (1783.4321549731678 * S1 * S2) / n
            - (3762.423405959942 * np.power(S1, 2) * S2) / n
            - (3762.423405959942 * np.power(S2, 2)) / n
            - (2508.2822706399616 * S3) / np.power(n, 2)
            - (1783.4321549731678 * S3) / n
            - (7524.846811919884 * S1 * S3) / n
            - (7524.846811919884 * S4) / n
            + 7144.446781844289 * lm11(n, S1)
            + 878.1419311589154 * lm12(n, S1, S2)
            + 49.54580001940568 * lm13(n, S1, S2, S3)
        )
    a_qqNS_l0 = a_qqNS_l0_nf0 + a_qqNS_l0_nf0_param + nf * a_qqNS_l0_nf1
    a_qqNS_l3 = (
        8.592592592592593 / (1.0 + n)
        + 5.728395061728395 / (n * (1.0 + n))
        + (8.592592592592593 * n) / (1.0 + n)
        - (0.5925925925925926 * nf) / (1.0 + n)
        - (0.3950617283950617 * nf) / (n * (1.0 + n))
        - (0.5925925925925926 * n * nf) / (1.0 + n)
        - 11.45679012345679 * S1
        + 0.7901234567901234 * nf * S1
    )
    a_qqNS_l2 = (
        113.33333333333333 / np.power(1.0 + n, 3)
        + 5.925925925925926 / (np.power(n, 3) * np.power(1.0 + n, 3))
        - (1.1851851851851851 * eta) / (np.power(n, 3) * np.power(1.0 + n, 3))
        + 21.333333333333332 / (np.power(n, 2) * np.power(1.0 + n, 3))
        - (2.3703703703703702 * eta) / (np.power(n, 2) * np.power(1.0 + n, 3))
        + 60.74074074074074 / (n * np.power(1.0 + n, 3))
        - (2.3703703703703702 * eta) / (n * np.power(1.0 + n, 3))
        + (124.0 * n) / np.power(1.0 + n, 3)
        + (89.33333333333333 * np.power(n, 2)) / np.power(1.0 + n, 3)
        + (29.77777777777778 * np.power(n, 3)) / np.power(1.0 + n, 3)
        + 4.6419753086419755 / np.power(1.0 + n, 2)
        - 1.1851851851851851 / (np.power(n, 2) * np.power(1.0 + n, 2))
        + 1.9753086419753085 / (n * np.power(1.0 + n, 2))
        + (0.5925925925925926 * n) / np.power(1.0 + n, 2)
        + (0.2962962962962963 * np.power(n, 2)) / np.power(1.0 + n, 2)
        - 44.839506172839506 * S1
        - (7.111111111111111 * S1) / np.power(1.0 + n, 2)
        - (9.481481481481481 * S1) / (np.power(n, 2) * np.power(1.0 + n, 2))
        - (18.962962962962962 * S1) / (n * np.power(1.0 + n, 2))
        - (14.222222222222221 * n * S1) / np.power(1.0 + n, 2)
        - (7.111111111111111 * np.power(n, 2) * S1) / np.power(1.0 + n, 2)
        + 2.3703703703703702 * S2
        - (14.222222222222221 * S2) / (1.0 + n)
        - (9.481481481481481 * S2) / (n * (1.0 + n))
        - (14.222222222222221 * n * S2) / (1.0 + n)
        + 18.962962962962962 * S1 * S2
        - 2.3703703703703702 * S3
        + (2.3703703703703702 * Sm2) / (n * (1.0 + n))
        - 4.7407407407407405 * S1 * Sm2
        + 4.7407407407407405 * Sm21
        - 2.3703703703703702 * Sm3
    )
    a_qqNS_l1 = (
        -198.09876543209876 / np.power(1.0 + n, 4)
        + (13.82716049382716 * eta) / np.power(1.0 + n, 4)
        + 16.59259259259259 / (np.power(n, 4) * np.power(1.0 + n, 4))
        - (2.3703703703703702 * eta) / (np.power(n, 4) * np.power(1.0 + n, 4))
        + 14.024691358024691 / (np.power(n, 3) * np.power(1.0 + n, 4))
        - (1.9753086419753085 * eta) / (np.power(n, 3) * np.power(1.0 + n, 4))
        + 31.80246913580247 / (np.power(n, 2) * np.power(1.0 + n, 4))
        + (7.703703703703703 * eta) / (np.power(n, 2) * np.power(1.0 + n, 4))
        + 34.074074074074076 / (n * np.power(1.0 + n, 4))
        + (15.209876543209877 * eta) / (n * np.power(1.0 + n, 4))
        - (113.77777777777777 * n) / np.power(1.0 + n, 4)
        + (1.7777777777777777 * eta * n) / np.power(1.0 + n, 4)
        + (445.28395061728395 * np.power(n, 2)) / np.power(1.0 + n, 4)
        + (0.5925925925925926 * eta * np.power(n, 2)) / np.power(1.0 + n, 4)
        + (469.037037037037 * np.power(n, 3)) / np.power(1.0 + n, 4)
        + (117.25925925925925 * np.power(n, 4)) / np.power(1.0 + n, 4)
        - 70.23315829196848 / (1.0 + n)
        - 46.82210552797899 / (n * (1.0 + n))
        - (70.23315829196848 * n) / (1.0 + n)
        - (16.016460905349795 * nf) / np.power(1.0 + n, 3)
        + (1.1851851851851851 * nf) / (np.power(n, 3) * np.power(1.0 + n, 3))
        - (0.7901234567901234 * nf) / (np.power(n, 2) * np.power(1.0 + n, 3))
        - (8.823045267489713 * nf) / (n * np.power(1.0 + n, 3))
        - (25.267489711934157 * n * nf) / np.power(1.0 + n, 3)
        - (25.925925925925927 * np.power(n, 2) * nf) / np.power(1.0 + n, 3)
        - (8.641975308641975 * np.power(n, 3) * nf) / np.power(1.0 + n, 3)
        + 93.64421105595798 * S1
        + (143.60493827160494 * S1) / np.power(1.0 + n, 3)
        - (29.62962962962963 * S1) / (np.power(n, 3) * np.power(1.0 + n, 3))
        - (2.3703703703703702 * eta * S1) / (np.power(n, 3) * np.power(1.0 + n, 3))
        - (27.65432098765432 * S1) / (np.power(n, 2) * np.power(1.0 + n, 3))
        - (4.7407407407407405 * eta * S1) / (np.power(n, 2) * np.power(1.0 + n, 3))
        + (73.48148148148148 * S1) / (n * np.power(1.0 + n, 3))
        - (4.7407407407407405 * eta * S1) / (n * np.power(1.0 + n, 3))
        + (127.4074074074074 * n * S1) / np.power(1.0 + n, 3)
        + (127.4074074074074 * np.power(n, 2) * S1) / np.power(1.0 + n, 3)
        + (42.46913580246913 * np.power(n, 3) * S1) / np.power(1.0 + n, 3)
        + 8.954732510288066 * nf * S1
        - 132.74074074074073 * S2
        + (62.41975308641975 * S2) / np.power(1.0 + n, 2)
        - (18.962962962962962 * S2) / (np.power(n, 2) * np.power(1.0 + n, 2))
        + (12.641975308641975 * S2) / (n * np.power(1.0 + n, 2))
        + (23.703703703703702 * n * S2) / np.power(1.0 + n, 2)
        + (11.851851851851851 * np.power(n, 2) * S2) / np.power(1.0 + n, 2)
        + 3.950617283950617 * nf * S2
        - 63.20987654320987 * S1 * S2
        + 18.962962962962962 * np.power(S2, 2)
        + (18.567901234567902 * S3) / (1.0 + n)
        - (5.925925925925926 * S3) / (n * (1.0 + n))
        + (18.567901234567902 * n * S3) / (1.0 + n)
        - 2.3703703703703702 * nf * S3
        + 11.851851851851851 * S1 * S3
        + 47.407407407407405 * S31
        - 30.814814814814813 * S4
        - (12.641975308641975 * Sm2) / np.power(1.0 + n, 2)
        + (2.3703703703703702 * Sm2) / (np.power(n, 2) * np.power(1.0 + n, 2))
        - (7.901234567901234 * Sm2) / (n * np.power(1.0 + n, 2))
        + 15.802469135802468 * S1 * Sm2
        - 4.7407407407407405 * S2 * Sm2
        - (15.802469135802468 * Sm21) / (1.0 + n)
        + (4.7407407407407405 * Sm21) / (n * (1.0 + n))
        - (15.802469135802468 * n * Sm21) / (1.0 + n)
        - 9.481481481481481 * S1 * Sm21
        + 18.962962962962962 * Sm211
        - 4.7407407407407405 * Sm22
        + (7.901234567901234 * Sm3) / (1.0 + n)
        + (2.3703703703703702 * Sm3) / (n * (1.0 + n))
        + (7.901234567901234 * n * Sm3) / (1.0 + n)
        - 4.7407407407407405 * S1 * Sm3
        - 4.7407407407407405 * Sm4
    )
    return a_qqNS_l0 + a_qqNS_l1 * L + a_qqNS_l2 * L**2 + a_qqNS_l3 * L**3
