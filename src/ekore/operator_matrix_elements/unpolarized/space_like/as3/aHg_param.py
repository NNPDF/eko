"""The approximated part of renormalization constant :math:`a_{Hg}^{(3)}(N)`."""

# pylint: skip-file
import numba as nb
import numpy as np

from .....harmonics import cache as c
from .....harmonics.log_functions import lm11, lm11m1, lm12, lm13, lm14, lm15


@nb.njit(cache=True)
def a_Hg3(n, cache, nf):
    r"""Compute :math:`a_{Hg}^{(3)}(N)`.

    This is composed by two parts:

    1. the exact part proportional to :math:`n_f T_{F}` and presented in :cite:`Blumlein:2017wxd` :eqref:`3.1`.
    2. a parametrized expression for the :math:`n_f^0` piece
       derived from: the 5 lowest moments, presented in
       :cite:`Bierenbaum:2009mv` :eqref:`8.50-8.54`;
       and the :math:`x \to 0,1` limits from :eqref:`4.4-4.5`
       of :cite:`Ablinger:2024xtt`. The |LL| small-x contribution
       was originally computed in :cite:`Kawamura:2012cr`, :eqref:`3.47`.

    The parametrized part has been tested to be in reasonable agreement
    with the one provided in :cite:`Kawamura:2012cr` :eqref:`3.49`, :eqref:`3.50`.

    Parameters
    ----------
    n : complex
        Mellin moment
    cache: numpy.ndarray
        Harmonic sum cache
    nf : int
        number of active flavor below the threshold

    Returns
    -------
    complex
        :math:`a_{Hg}^{(3)}(N)`

    """
    S1 = c.get(c.S1, cache, n)
    S2 = c.get(c.S2, cache, n)
    Sm2 = c.get(c.Sm2, cache, n, is_singlet=True)
    S3 = c.get(c.S3, cache, n)
    S21 = c.get(c.S21, cache, n)
    Sm21 = c.get(c.Sm21, cache, n, is_singlet=True)
    Sm3 = c.get(c.Sm3, cache, n, is_singlet=True)
    S4 = c.get(c.S4, cache, n)
    S31 = c.get(c.S31, cache, n)
    S211 = c.get(c.S211, cache, n)
    Sm22 = c.get(c.Sm22, cache, n, is_singlet=True)
    Sm211 = c.get(c.Sm211, cache, n, is_singlet=True)
    Sm31 = c.get(c.Sm31, cache, n, is_singlet=True)
    Sm4 = c.get(c.Sm4, cache, n, is_singlet=True)
    S5 = c.get(c.S5, cache, n)

    Lm11 = lm11(n, S1)
    Lm12 = lm12(n, S1, S2)
    Lm13 = lm13(n, S1, S2, S3)
    Lm14 = lm14(n, S1, S2, S3, S4)
    Lm15 = lm15(n, S1, S2, S3, S4, S5)
    Lm11m1 = lm11m1(n, S1)

    # parametrized nf^0 part
    aHg_nf0 = (
        -(10505.541212 / (-1 + n) ** 2)
        - 581.3333332799999 / n**6
        - 522.2222222400001 / n**5
        - 3084.5476332000003 / n**4
        - 1440.0967656 / n**3
        - 10739.21741 / n**2
        - 6890.392506169613 / n
        + (8956.649545 * n) / (-1.0 + n) ** 2
        + 7861.809052567688 / (1 + n) ** 2
        - 795.4199930418246 / (n + n**2)
        - 19687.320434140434 / (2 + 3 * n + n**2)
        + 737.165347 * Lm11
        - 332.5368214 * Lm12
        + 4.380199906 * Lm13
        - 8.20987654 * Lm14
        + 3.703703704 * Lm15
        - 12429.982192922555 * Lm11m1
    )

    # exact nf^1 part
    aHg_nf1 = (
        1
        / (n**6 * (1 + n) ** 6 * (2 + n) ** 5)
        * (
            (1 / (-1 + n))
            * (
                -1706.6666666666665
                - 10875.259259259257 * n
                - 33284.675378028754 * n**2
                - 64169.664061405594 * n**3
                - 84478.38609014948 * n**4
                - 79641.6883203241 * n**5
                - 34188.28213390343 * n**6
                + 50383.00160333119 * n**7
                + 137380.89089511195 * n**8
                + 163502.0013461959 * n**9
                + 100003.51351417531 * n**10
                + 3669.940256853264 * n**11
                - 48764.606785121505 * n**12
                - 45256.82055708685 * n**13
                - 22071.646154429887 * n**14
                - 6434.244292978784 * n**15
                - 1064.9350137879046 * n**16
                - 77.39386145946845 * n**17
            )
            - 1.646090534979424
            * n**4
            * (1.0 + n) ** 4
            * (2.0 + n) ** 3
            * (-3.84 - 6.98 * n + 9.83 * n**2 + 10.96 * n**3 + 3.31 * n**4 + n**5)
            * S1**3
            + 0.49382716049382713
            * n**5
            * (1.0 + n) ** 5
            * (2.0 + n) ** 4
            * (2 + n + n**2)
            * S1**4
            + (1 / (-1 + n))
            * 12.50566219331883
            * n**2
            * (1 + n) ** 2
            * (2 + n) ** 2
            * (
                -40.94145452557776
                - 144.43235346523267 * n
                - 253.73592804740787 * n**2
                - 354.8177148989626 * n**3
                - 320.47393623567154 * n**4
                - 164.90366681355158 * n**5
                + 24.11092748813364 * n**6
                + 91.48066657983938 * n**7
                + 58.29138222882927 * n**8
                + 25.787008256870585 * n**9
                + 7.333676013446309 * n**10
                + n**11
            )
            * S2
            + 1.9259259259259258
            * n**5
            * (1 + n) ** 5
            * (2.0 + n) ** 4
            * (2 + n + n**2)
            * S2**2
            + n**4
            * (1 + n) ** 3
            * (2 + n) ** 2
            * S1**2
            * (
                -74.27160493827161
                - 300.6991145317517 * n
                - 720.0024564166865 * n**2
                - 631.8555364768818 * n**3
                - 176.73340470935162 * n**4
                + 14.961120650448093 * n**5
                + 14.715435278544426 * n**6
                + 3.9681662390865937 * n**7
                + 12.296296296296296
                * n
                * (1.0 + n) ** 2
                * (2.0 + n) ** 2
                * (2.0 + n + n**2)
                * S2
            )
            - 8.88888888888889
            * n**4
            * (1.0 + n) ** 4
            * (2.0 + n) ** 3
            * (-6.4 - 15.2 * n + 2.6 * n**2 + 10 * n**3 + 3.8 * n**4 + n**5)
            * S21
            - 6.222222222222222
            * n**5
            * (1.0 + n) ** 5
            * (2.0 + n) ** 4
            * (2.0 + n + n**2)
            * S211
            - (1 / (-1.0 + n))
            * 21.16872427983539
            * n**3
            * (1.0 + n) ** 3
            * (2.0 + n) ** 3
            * (
                12.093312597200622
                + 25.791601866251945 * n
                + 37.262830482115085 * n**2
                + 35.36236391912908 * n**3
                + 43.72161741835148 * n**4
                + 31.71384136858476 * n**5
                + 14.762052877138414 * n**6
                + 3.878693623639191 * n**7
                + n**8
            )
            * S3
            - 16.88888888888889
            * n**5
            * (1.0 + n) ** 5
            * (2.0 + n) ** 4
            * (2.0 + n + n**2)
            * S31
            + 62.81481481481482
            * n**5
            * (1.0 + n) ** 5
            * (2.0 + n) ** 4
            * (2.0 + n + n**2)
            * S4
            + 24.0
            * n**5
            * (1.0 + n) ** 3
            * (2.0 + n) ** 2
            * (
                9.91735504245947
                - 8.888888888888888 * S1
                + 8.0 * S1**2
                + 13.333333333333334 * S2
                + n**6
                * (
                    1.1285582691963223
                    - 1.111111111111111 * S1
                    + 1.0 * S1**2
                    + 1.6666666666666667 * S2
                )
                + n**5
                * (
                    7.270278254744628
                    - 6.444444444444444 * S1
                    + 7.0 * S1**2
                    + 11.666666666666666 * S2
                )
                + n**4
                * (
                    27.0330569864561
                    - 23.333333333333332 * S1
                    + 21.0 * S1**2
                    + 35.0 * S2
                )
                + n
                * (
                    18.858890796756288
                    - 49.77777777777777 * S1
                    + 28.0 * S1**2
                    + 46.666666666666664 * S2
                )
                + n**3
                * (
                    51.79369299730096
                    - 59.77777777777777 * S1
                    + 37.0 * S1**2
                    + 61.666666666666664 * S2
                )
                + n**2
                * (
                    45.17722508402332
                    - 82.66666666666664 * S1
                    + 42.0 * S1**2
                    + 70.0 * S2
                )
            )
            * Sm2
            + 26.666666666666664
            * n**5
            * (1.0 + n) ** 4
            * (2.0 + n) ** 3
            * (4.0 + 16.4 * n + 10.6 * n**2 + 2.8 * n**3 + n**4)
            * Sm21
            + n**4
            * (1.0 + n) ** 2
            * (2.0 + n)
            * S1
            * (
                (1 / (-1.0 + n))
                * (
                    -519.7183890539501
                    - 2800.054284509767 * n
                    - 3831.2973294216836 * n**2
                    - 3450.917504245779 * n**3
                    - 337.3605543706711 * n**4
                    + 4392.313928071448 * n**5
                    + 5284.589150336902 * n**6
                    + 2749.8405498667044 * n**7
                    + 725.8130102575197 * n**8
                    + 90.15064415072688 * n**9
                    + 0.6407789185504204 * n**10
                )
                - 13.82716049382716
                * (1.0 + n) ** 2
                * (2.0 + n) ** 2
                * (
                    -1.3714285714285714
                    + 0.07857142857142857 * n
                    + 14.439285714285715 * n**2
                    + 10.342857142857143 * n**3
                    + 2.5964285714285715 * n**4
                    + n**5
                )
                * S2
                + 4.444444444444445
                * n
                * (1.0 + n) ** 3
                * (2.0 + n) ** 3
                * (2.0 + n + n**2)
                * S21
                + 49.28395061728395
                * n
                * (1.0 + n) ** 3
                * (2.0 + n) ** 3
                * (2.0 + n + n**2)
                * S3
                - 48.0 * n * (1.0 + n) ** 3 * (2.0 + n) ** 3 * (2.0 + n + n**2) * Sm21
            )
            + 48.0 * n**5 * (1.0 + n) ** 5 * (2.0 + n) ** 4 * (2.0 + n + n**2) * Sm211
            - 32.0 * n**5 * (1.0 + n) ** 5 * (2.0 + n) ** 4 * (2.0 + n + n**2) * Sm22
            + 40.0
            * n**5
            * (1.0 + n) ** 4
            * (2.0 + n) ** 3
            * (
                -2.2222222222222223
                + 4.0 * S1
                + n**4 * (-0.5555555555555556 + S1)
                + n**3 * (-1.5555555555555554 + 4.0 * S1)
                + n**2 * (-5.888888888888888 + 7.0 * S1)
                + n * (-9.11111111111111 + 8.0 * S1)
            )
            * Sm3
            - 40.0 * n**5 * (1.0 + n) ** 5 * (2.0 + n) ** 4 * (2.0 + n + n**2) * Sm31
            + 29.333333333333332
            * n**5
            * (1.0 + n) ** 5
            * (2.0 + n) ** 4
            * (2.0 + n + n**2)
            * Sm4
        )
    )
    return aHg_nf0 + nf * aHg_nf1
