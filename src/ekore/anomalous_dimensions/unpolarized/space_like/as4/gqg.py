# pylint: skip-file
# fmt: off
r"""The anomalous dimension :math:`\gamma_{qg}^{(3)}`."""
import numba as nb
import numpy as np

from .....harmonics.log_functions import lm11, lm12, lm13, lm14, lm15


@nb.njit(cache=True)
def gamma_qg_nf3(n, sx):
    r"""Implement the part proportional to :math:`nf^3` of :math:`\gamma_{qg}^{(3)}`.

    The expression is copied exact from Eq. 3.12 of :cite:`Davies:2016jie`.

    Parameters
    ----------
    n : complex
        Mellin moment
    sx : list
        harmonic sums cache

    Returns
    -------
    complex
        |N3LO| non-singlet anomalous dimension :math:`\gamma_{qg}^{(3)}|_{nf^3}`

    """
    S1 = sx[0][0]
    S2, Sm2 = sx[1]
    S3, S21, _, _, _, Sm3 = sx[2]
    S4, S31, S211, _, _, _, Sm4 = sx[3]
    return 1.3333333333333333 * (
        44.56685134331718 / (-1.0 + n)
        - 82.37037037037037 / np.power(n, 5)
        + 95.30864197530865 / np.power(n, 4)
        - 298.6951686088834 / np.power(n, 3)
        + 334.4519003852186 / np.power(n, 2)
        - 576.1641081960868 / n
        - 156.44444444444446 / np.power(1.0 + n, 6)
        + 271.4074074074074 / np.power(1.0 + n, 5)
        - 142.6172839506173 / np.power(1.0 + n, 4)
        + 49.20926725891911 / np.power(1.0 + n, 3)
        + 242.3162373306182 / np.power(1.0 + n, 2)
        + 383.95514040473176 / (1.0 + n)
        + 75.85185185185185 / np.power(2.0 + n, 5)
        - 18.962962962962962 / np.power(2.0 + n, 4)
        - 28.97119341563786 / np.power(2.0 + n, 3)
        + 57.904384241653375 / np.power(2.0 + n, 2)
        + 153.56036440484917 / (2.0 + n)
        - (7.725651577503429 * S1) / (-1.0 + n)
        + (35.55555555555556 * S1) / np.power(n, 5)
        - (53.333333333333336 * S1) / np.power(n, 4)
        + (149.7283950617284 * S1) / np.power(n, 3)
        - (189.49794238683128 * S1) / np.power(n, 2)
        + (219.77429764880566 * S1) / n
        - (71.11111111111111 * S1) / np.power(1.0 + n, 5)
        + (75.85185185185185 * S1) / np.power(1.0 + n, 4)
        + (45.4320987654321 * S1) / np.power(1.0 + n, 3)
        - (24.691358024691358 * S1) / np.power(1.0 + n, 2)
        - (242.01773110008048 * S1) / (1.0 + n)
        + (37.925925925925924 * S1) / np.power(2.0 + n, 4)
        + (53.72839506172839 * S1) / np.power(2.0 + n, 3)
        + (39.76954732510288 * S1) / np.power(2.0 + n, 2)
        + (33.84214810968268 * S1) / (2.0 + n)
        - (8.954732510288066 * S2) / (-1.0 + n)
        + (28.444444444444443 * S2) / np.power(n, 4)
        - (47.407407407407405 * S2) / np.power(n, 3)
        + (117.33333333333333 * S2) / np.power(n, 2)
        - (128.52674897119343 * S2) / n
        - (71.11111111111111 * S2) / np.power(1.0 + n, 4)
        + (9.481481481481481 * S2) / np.power(1.0 + n, 3)
        + (60.44444444444444 * S2) / np.power(1.0 + n, 2)
        - (11.588477366255145 * S2) / (1.0 + n)
        + (56.888888888888886 * S2) / np.power(2.0 + n, 3)
        + (112.19753086419753 * S2) / np.power(2.0 + n, 2)
        + (144.98765432098764 * S2) / (2.0 + n)
        - (2.3703703703703702 * (np.power(S1, 2) + S2)) / (-1.0 + n)
        + (2.3703703703703702 * (np.power(S1, 2) + S2)) / np.power(n, 3)
        + (3.3580246913580245 * (np.power(S1, 2) + S2)) / np.power(n, 2)
        - (13.695473251028806 * (np.power(S1, 2) + S2)) / n
        + (7.111111111111111 * (np.power(S1, 2) + S2)) / np.power(1.0 + n, 4)
        + (9.481481481481481 * (np.power(S1, 2) + S2)) / np.power(1.0 + n, 3)
        - (2.962962962962963 * (np.power(S1, 2) + S2)) / np.power(1.0 + n, 2)
        + (53.76131687242798 * (np.power(S1, 2) + S2)) / (1.0 + n)
        - (9.481481481481481 * (np.power(S1, 2) + S2)) / np.power(2.0 + n, 3)
        - (21.333333333333332 * (np.power(S1, 2) + S2)) / np.power(2.0 + n, 2)
        - (38.650205761316876 * (np.power(S1, 2) + S2)) / (2.0 + n)
        - (3.1604938271604937 * S21) / (-1.0 + n)
        + (7.111111111111111 * S21) / np.power(n, 3)
        - (10.666666666666666 * S21) / np.power(n, 2)
        + (32.0 * S21) / n
        - (14.222222222222221 * S21) / np.power(1.0 + n, 3)
        - (53.333333333333336 * S21) / (1.0 + n)
        + (9.481481481481481 * S21) / np.power(2.0 + n, 2)
        + (24.493827160493826 * S21) / (2.0 + n)
        - (3.1604938271604937 * S3) / (-1.0 + n)
        + (7.111111111111111 * S3) / np.power(n, 3)
        - (10.666666666666666 * S3) / np.power(n, 2)
        + (28.049382716049383 * S3) / n
        - (14.222222222222221 * S3) / np.power(1.0 + n, 3)
        - (43.06172839506173 * S3) / (1.0 + n)
        + (9.481481481481481 * S3) / np.power(2.0 + n, 2)
        + (14.222222222222221 * S3) / (2.0 + n)
        - (3.1604938271604937 * (S1 * S2 - 1.0 * S21 + S3)) / (-1.0 + n)
        + (7.111111111111111 * (S1 * S2 - 1.0 * S21 + S3)) / np.power(n, 3)
        - (10.666666666666666 * (S1 * S2 - 1.0 * S21 + S3)) / np.power(n, 2)
        + (32.0 * (S1 * S2 - 1.0 * S21 + S3)) / n
        - (14.222222222222221 * (S1 * S2 - 1.0 * S21 + S3)) / np.power(1.0 + n, 3)
        - (53.333333333333336 * (S1 * S2 - 1.0 * S21 + S3)) / (1.0 + n)
        + (9.481481481481481 * (S1 * S2 - 1.0 * S21 + S3)) / np.power(2.0 + n, 2)
        + (24.493827160493826 * (S1 * S2 - 1.0 * S21 + S3)) / (2.0 + n)
        + (0.5267489711934157 * (np.power(S1, 3) + 3.0 * S1 * S2 + 2.0 * S3))
        / (-1.0 + n)
        - (1.1851851851851851 * (np.power(S1, 3) + 3.0 * S1 * S2 + 2.0 * S3))
        / np.power(n, 3)
        + (1.9753086419753085 * (np.power(S1, 3) + 3.0 * S1 * S2 + 2.0 * S3))
        / np.power(n, 2)
        - (4.674897119341564 * (np.power(S1, 3) + 3.0 * S1 * S2 + 2.0 * S3)) / n
        + (2.3703703703703702 * (np.power(S1, 3) + 3.0 * S1 * S2 + 2.0 * S3))
        / np.power(1.0 + n, 3)
        + (7.57201646090535 * (np.power(S1, 3) + 3.0 * S1 * S2 + 2.0 * S3)) / (1.0 + n)
        - (1.5802469135802468 * (np.power(S1, 3) + 3.0 * S1 * S2 + 2.0 * S3))
        / np.power(2.0 + n, 2)
        - (2.765432098765432 * (np.power(S1, 3) + 3.0 * S1 * S2 + 2.0 * S3)) / (2.0 + n)
        - (
            1.1851851851851851
            * (
                0.041666666666666664 * np.power(S1, 4)
                + 0.25 * np.power(S1, 2) * S2
                + 0.125 * np.power(S2, 2)
                + 0.3333333333333333 * S1 * S3
                + 0.25 * S4
            )
        )
        / n
        + (
            2.3703703703703702
            * (
                0.041666666666666664 * np.power(S1, 4)
                + 0.25 * np.power(S1, 2) * S2
                + 0.125 * np.power(S2, 2)
                + 0.3333333333333333 * S1 * S3
                + 0.25 * S4
            )
        )
        / (1.0 + n)
        - (
            2.3703703703703702
            * (
                0.041666666666666664 * np.power(S1, 4)
                + 0.25 * np.power(S1, 2) * S2
                + 0.125 * np.power(S2, 2)
                + 0.3333333333333333 * S1 * S3
                + 0.25 * S4
            )
        )
        / (2.0 + n)
        + (3.5555555555555554 * S4) / n
        - (7.111111111111111 * S4) / (1.0 + n)
        + (7.111111111111111 * S4) / (2.0 + n)
    ) + 3.0 * (
        2.5381463063368415 / (-1.0 + n)
        + 3.5555555555555554 / np.power(n, 5)
        + 5.728395061728395 / np.power(n, 4)
        + 4.559670781893004 / np.power(n, 3)
        + 2.036401939671693 / np.power(n, 2)
        - 1.1169664019346115 / n
        + 26.074074074074073 / np.power(1.0 + n, 5)
        - 56.098765432098766 / np.power(1.0 + n, 4)
        + 70.0246913580247 / np.power(1.0 + n, 3)
        - 56.58563233464838 / np.power(1.0 + n, 2)
        + 23.268759906664844 / (1.0 + n)
        + 18.962962962962962 / np.power(2.0 + n, 5)
        - 37.925925925925924 / np.power(2.0 + n, 4)
        + 22.386831275720166 / np.power(2.0 + n, 3)
        + 25.899964373170548 / np.power(2.0 + n, 2)
        - 33.71051594275432 / (2.0 + n)
        + (0.3511659807956104 * S1) / (-1.0 + n)
        - (9.481481481481481 * S1) / np.power(n, 4)
        + (8.938271604938272 * S1) / np.power(n, 3)
        - (17.432098765432098 * S1) / np.power(n, 2)
        + (15.015825807984449 * S1) / n
        + (14.222222222222221 * S1) / np.power(1.0 + n, 4)
        - (1.7777777777777777 * S1) / np.power(1.0 + n, 3)
        - (14.534979423868313 * S1) / np.power(1.0 + n, 2)
        + (48.28933603835209 * S1) / (1.0 + n)
        + (9.481481481481481 * S1) / np.power(2.0 + n, 4)
        - (46.617283950617285 * S1) / np.power(2.0 + n, 3)
        - (42.27160493827161 * S1) / np.power(2.0 + n, 2)
        - (64.96148967346869 * S1) / (2.0 + n)
        + (1.7119341563786008 * S2) / (-1.0 + n)
        - (2.3703703703703702 * S2) / np.power(n, 3)
        + (0.7407407407407407 * S2) / np.power(n, 2)
        - (7.703703703703703 * S2) / n
        + (9.481481481481481 * S2) / np.power(1.0 + n, 3)
        - (15.012345679012345 * S2) / np.power(1.0 + n, 2)
        + (27.308641975308642 * S2) / (1.0 + n)
        - (4.7407407407407405 * S2) / np.power(2.0 + n, 3)
        + (2.765432098765432 * S2) / np.power(2.0 + n, 2)
        - (21.020576131687243 * S2) / (2.0 + n)
        + (0.8559670781893004 * (np.power(S1, 2) + S2)) / (-1.0 + n)
        - (1.1851851851851851 * (np.power(S1, 2) + S2)) / np.power(n, 3)
        + (0.37037037037037035 * (np.power(S1, 2) + S2)) / np.power(n, 2)
        - (2.60082304526749 * (np.power(S1, 2) + S2)) / n
        + (2.9135802469135803 * (np.power(S1, 2) + S2)) / np.power(1.0 + n, 2)
        + (5.275720164609053 * (np.power(S1, 2) + S2)) / (1.0 + n)
        + (2.3703703703703702 * (np.power(S1, 2) + S2)) / np.power(2.0 + n, 3)
        - (6.518518518518518 * (np.power(S1, 2) + S2)) / np.power(2.0 + n, 2)
        - (2.8724279835390947 * (np.power(S1, 2) + S2)) / (2.0 + n)
        - (3.950617283950617 * S21) / n
        - (2.3703703703703702 * S21) / np.power(1.0 + n, 2)
        + (7.901234567901234 * S21) / (1.0 + n)
        + (2.3703703703703702 * S21) / np.power(2.0 + n, 2)
        - (7.901234567901234 * S21) / (2.0 + n)
        + (1.1851851851851851 * S211) / n
        - (2.3703703703703702 * S211) / (1.0 + n)
        + (2.3703703703703702 * S211) / (2.0 + n)
        - (3.950617283950617 * S3) / n
        + (2.3703703703703702 * S3) / np.power(1.0 + n, 2)
        + (3.1604938271604937 * S3) / (1.0 + n)
        - (2.3703703703703702 * S3) / np.power(2.0 + n, 2)
        - (3.1604938271604937 * S3) / (2.0 + n)
        + (3.950617283950617 * (S1 * S2 - 1.0 * S21 + S3)) / n
        + (2.3703703703703702 * (S1 * S2 - 1.0 * S21 + S3)) / np.power(1.0 + n, 2)
        - (7.901234567901234 * (S1 * S2 - 1.0 * S21 + S3)) / (1.0 + n)
        - (2.3703703703703702 * (S1 * S2 - 1.0 * S21 + S3)) / np.power(2.0 + n, 2)
        + (7.901234567901234 * (S1 * S2 - 1.0 * S21 + S3)) / (2.0 + n)
        - (0.6584362139917695 * (np.power(S1, 3) + 3.0 * S1 * S2 + 2.0 * S3)) / n
        - (0.3950617283950617 * (np.power(S1, 3) + 3.0 * S1 * S2 + 2.0 * S3))
        / np.power(1.0 + n, 2)
        + (1.316872427983539 * (np.power(S1, 3) + 3.0 * S1 * S2 + 2.0 * S3)) / (1.0 + n)
        + (0.3950617283950617 * (np.power(S1, 3) + 3.0 * S1 * S2 + 2.0 * S3))
        / np.power(2.0 + n, 2)
        - (1.316872427983539 * (np.power(S1, 3) + 3.0 * S1 * S2 + 2.0 * S3)) / (2.0 + n)
        + (1.1851851851851851 * S31) / n
        - (2.3703703703703702 * S31) / (1.0 + n)
        + (2.3703703703703702 * S31) / (2.0 + n)
        + (
            1.1851851851851851
            * (
                0.041666666666666664 * np.power(S1, 4)
                + 0.25 * np.power(S1, 2) * S2
                + 0.125 * np.power(S2, 2)
                + 0.3333333333333333 * S1 * S3
                + 0.25 * S4
            )
        )
        / n
        - (
            2.3703703703703702
            * (
                0.041666666666666664 * np.power(S1, 4)
                + 0.25 * np.power(S1, 2) * S2
                + 0.125 * np.power(S2, 2)
                + 0.3333333333333333 * S1 * S3
                + 0.25 * S4
            )
        )
        / (1.0 + n)
        + (
            2.3703703703703702
            * (
                0.041666666666666664 * np.power(S1, 4)
                + 0.25 * np.power(S1, 2) * S2
                + 0.125 * np.power(S2, 2)
                + 0.3333333333333333 * S1 * S3
                + 0.25 * S4
            )
        )
        / (2.0 + n)
        + (3.5555555555555554 * S4) / n
        - (7.111111111111111 * S4) / (1.0 + n)
        + (7.111111111111111 * S4) / (2.0 + n)
        - (0.5925925925925926 * (np.power(S2, 2) + S4)) / n
        + (1.1851851851851851 * (np.power(S2, 2) + S4)) / (1.0 + n)
        - (1.1851851851851851 * (np.power(S2, 2) + S4)) / (2.0 + n)
        - (1.1851851851851851 * (S1 * S3 - 1.0 * S31 + S4)) / n
        + (2.3703703703703702 * (S1 * S3 - 1.0 * S31 + S4)) / (1.0 + n)
        - (2.3703703703703702 * (S1 * S3 - 1.0 * S31 + S4)) / (2.0 + n)
        + (
            1.1851851851851851
            * (S1 * S21 - 2.0 * S211 + S31 + 0.5 * (np.power(S2, 2) + S4))
        )
        / n
        - (
            2.3703703703703702
            * (S1 * S21 - 2.0 * S211 + S31 + 0.5 * (np.power(S2, 2) + S4))
        )
        / (1.0 + n)
        + (
            2.3703703703703702
            * (S1 * S21 - 2.0 * S211 + S31 + 0.5 * (np.power(S2, 2) + S4))
        )
        / (2.0 + n)
        - (
            1.1851851851851851
            * (
                S211
                + 0.5 * (S1 * S3 + S1 * (S1 * S2 - 2.0 * S21 + S3) - 2.0 * S31 + S4)
            )
        )
        / n
        + (
            2.3703703703703702
            * (
                S211
                + 0.5 * (S1 * S3 + S1 * (S1 * S2 - 2.0 * S21 + S3) - 2.0 * S31 + S4)
            )
        )
        / (1.0 + n)
        - (
            2.3703703703703702
            * (
                S211
                + 0.5 * (S1 * S3 + S1 * (S1 * S2 - 2.0 * S21 + S3) - 2.0 * S31 + S4)
            )
        )
        / (2.0 + n)
        + (2.5020576131687244 * Sm2) / n
        + (0.5925925925925926 * Sm2) / np.power(1.0 + n, 2)
        - (0.6584362139917695 * Sm2) / (1.0 + n)
        + (1.8436213991769548 * Sm2) / (2.0 + n)
        - (7.901234567901234 * Sm3) / n
        + (11.061728395061728 * Sm3) / (1.0 + n)
        - (11.061728395061728 * Sm3) / (2.0 + n)
        + (4.7407407407407405 * Sm4) / n
        - (9.481481481481481 * Sm4) / (1.0 + n)
        + (9.481481481481481 * Sm4) / (2.0 + n)
    )


@nb.njit(cache=True)
def gamma_qg_nf1(n, sx, variation):
    r"""Implement the part proportional to :math:`nf^1` of :math:`\gamma_{qg}^{(3)}`.

    Parameters
    ----------
    n : complex
        Mellin moment
    sx : list
        harmonic sums cache
    variation : int
        |N3LO| anomalous dimension variation

    Returns
    -------
    complex
        |N3LO| non-singlet anomalous dimension :math:`\gamma_{qg}^{(3)}|_{nf^1}`

    """
    S1 = sx[0][0]
    S2 = sx[1][0]
    S3 = sx[2][0]
    S4 = sx[3][0]
    S5 = sx[4][0]
    S1m2 = ((1 - 2 * n)/((-1 + n) * n) + S1)/n
    common = -7871.5226542038545/np.power(-1. + n,3) + 14103.703703703704/np.power(n,7) + 2588.8395061728397/np.power(n,6) + 68802.34242841466/np.power(n,5) - 35.68779444531073*lm14(n,S1,S2,S3,S4) - 1.8518518518518519*lm15(n,S1,S2,S3,S4,S5)
    if variation == 1:
        fit = 22662.196259673117/np.power(-1. + n,2) - 55296.166653123095/np.power(n,4) - 112686.37563977773/np.power(n,3) + (241.1574545771679*np.power(S1,3))/n
    elif variation == 2:
        fit = 56607.59402339656/np.power(-1. + n,2) - 602239.1145695101/np.power(n,4) - 55630.877490700674/np.power(n,2) + (276.9849501348952*np.power(S1,3))/n
    elif variation == 3:
        fit = -69415.53557755498/np.power(-1. + n,2) + 1.0342538810177236e6/np.power(n,4) + 21537.269407330128/n - (276.518279252217*np.power(S1,3))/n
    elif variation == 4:
        fit = -42256.29910745439/np.power(-1. + n,2) + 674946.0126266627/np.power(n,4) + 17669.127725290993/(1. + n) - (171.96671407169904*np.power(S1,3))/n
    elif variation == 5:
        fit = 541544.0314509501/np.power(n,4) - 47304.45426282653/(2. - 3.*n + np.power(n,3)) - (67658.34810075657*n)/(2. - 3.*n + np.power(n,3)) + (17602.44838773732*np.power(n,2))/(2. - 3.*n + np.power(n,3)) - (157.81964080420298*np.power(S1,3))/n
    elif variation == 6:
        fit = 174196.72296242672/np.power(-1. + n,2) - 2.2459460555719677e6/np.power(n,4) - 261034.52559020324/np.power(1. + n,2) + (418.420018364515*np.power(S1,3))/n
    elif variation == 7:
        fit = 29212.32511669653/np.power(-1. + n,2) - 261916.13470256352/np.power(n,4) - 208176.38791171624/np.power(1. + n,3) + (234.08117630588183*np.power(S1,3))/n
    elif variation == 8:
        fit = -32466.788602970562/np.power(-1. + n,2) + 540679.1707007522/np.power(n,4) - (308.6236821405436*np.power(S1,3))/n - 6296.646655020534*lm11(n,S1)
    elif variation == 9:
        fit = -26876.801232045284/np.power(-1. + n,2) + 463896.56408899446/np.power(n,4) - (628.7508480577625*np.power(S1,3))/n + 2555.214357748731*lm12(n,S1,S2)
    elif variation == 10:
        fit = -30372.008010707403/np.power(-1. + n,2) + 512520.9997169825/np.power(n,4) - (1393.2150953871235*np.power(S1,3))/n - 1105.3934391718133*lm13(n,S1,S2,S3)
    elif variation == 11:
        fit = -20353.3653920453/np.power(-1. + n,2) + 374871.3949211111/np.power(n,4) + (3317.942373743694*np.power(S1,2))/n - (759.371773336959*np.power(S1,3))/n
    elif variation == 12:
        fit = -15211.41048046458/np.power(-1. + n,2) + 337107.9526744566/np.power(n,4) - (195.84857375364354*np.power(S1,3))/n + 5073.3446674977085*S1m2
    elif variation == 13:
        fit = 23807.49045792023/np.power(-1. + n,2) - (11854.720432149517*n)/np.power(-1. + n,2) - (1607.9062676535248*np.power(S1,3))/n - 1447.5794358264566*lm13(n,S1,S2,S3)
    elif variation == 14:
        fit = 17497.52641286655/np.power(-1. + n,2) - 101712.5534731317/np.power(n,3) + (81.9961219358003*np.power(S1,3))/n - 107.64736159785465*lm13(n,S1,S2,S3)
    elif variation == 15:
        fit = 9617.647178953872/np.power(-1. + n,2) - 25576.796820467393/np.power(n,2) - (625.3255861663762*np.power(S1,3))/n - 597.1788526752734*lm13(n,S1,S2,S3)
    elif variation == 16:
        fit = 7982.15462353061/np.power(-1. + n,2) - 21157.000533105136/n - (2490.195157596885*np.power(S1,3))/n - 2191.2697004349143*lm13(n,S1,S2,S3)
    elif variation == 17:
        fit = 7128.058295086571/np.power(-1. + n,2) - 55753.72194016617/(1. + n) - (5246.780689023155*np.power(S1,3))/n - 4593.386700653348*lm13(n,S1,S2,S3)
    elif variation == 18:
        fit = 7636.700597270715/np.power(-1. + n,2) - 48500.00864053313/np.power(1. + n,2) - (1056.6147224219835*np.power(S1,3))/n - 900.0122114211894*lm13(n,S1,S2,S3)
    elif variation == 19:
        fit = 9060.78856459587/np.power(-1. + n,2) - 137770.73142283142/np.power(1. + n,3) - (316.2735659382186*np.power(S1,3))/n - 373.8461962189581*lm13(n,S1,S2,S3)
    elif variation == 20:
        fit = 7756.144700393487/np.power(-1. + n,2) - (21134.407650893074*np.power(S1,3))/n + 114608.42539649413*lm11(n,S1) - 21225.2141069047*lm13(n,S1,S2,S3)
    elif variation == 21:
        fit = 13924.153155817088/np.power(-1. + n,2) + (2105.2446659695315*np.power(S1,3))/n + 14823.274122046285*S1m2 + 2124.3398108730667*lm13(n,S1,S2,S3)
    else:
        fit = 7149.394949780256/np.power(-1. + n,2) + 62591.54931906992/np.power(n,4) - 10209.472814900448/np.power(n,3) - 3867.032110055622/np.power(n,2) + 18.108041629761523/n - (564.5104967690246*n)/np.power(-1. + n,2) - 16473.672349264172/np.power(1. + n,3) - 14739.73972527316/np.power(1. + n,2) - 1813.5521054702465/(1. + n) - 2252.5930601345967/(2. - 3.*n + np.power(n,3)) - (3221.826100036027*n)/(2. - 3.*n + np.power(n,3)) + (838.2118279874913*np.power(n,2))/(2. - 3.*n + np.power(n,3)) + (157.99725589255686*np.power(S1,2))/n - (1571.9873266290274*np.power(S1,3))/n + 947.458037597333*S1m2 + 5157.70374959398*lm11(n,S1) + 121.67687417851099*lm12(n,S1,S2) - 1448.4375330491162*lm13(n,S1,S2,S3)
    return common + fit


@nb.njit(cache=True)
def gamma_qg_nf2(n, sx, variation):
    r"""Implement the part proportional to :math:`nf^2` of :math:`\gamma_{qg}^{(3)}`.

    Parameters
    ----------
    n : complex
        Mellin moment
    sx : list
        harmonic sums cache
    variation : int
        |N3LO| anomalous dimension variation

    Returns
    -------
    complex
        |N3LO| non-singlet anomalous dimension :math:`\gamma_{qg}^{(3)}|_{nf^2}`

    """
    S1 = sx[0][0]
    S2 = sx[1][0]
    S3 = sx[2][0]
    S4 = sx[3][0]
    S5 = sx[4][0]
    S1m2 = ((1 - 2 * n)/((-1 + n) * n) + S1)/n
    common = -1991.111111111111/np.power(n,7) + 2069.3333333333335/np.power(n,6) - 7229.376633440217/np.power(n,5) + 3.511659807956104*lm14(n,S1,S2,S3,S4) + 0.411522633744856*lm15(n,S1,S2,S3,S4,S5)
    if variation == 1:
        fit = -754.165966543179/np.power(-1. + n,2) + 8384.765050006823/np.power(n,4) + 6073.25999132819/np.power(n,3) - (63.59909073552146*np.power(S1,3))/n
    elif variation == 2:
        fit = -2583.661546267657/np.power(-1. + n,2) + 37862.390044693086/np.power(n,4) + 2998.239854894151/np.power(n,2) - (65.53002243977451*np.power(S1,3))/n
    elif variation == 3:
        fit = 4208.386087193173/np.power(-1. + n,2) - 50336.803333929085/np.power(n,4) - 1160.7564434597264/n - (35.69882945817087*np.power(S1,3))/n
    elif variation == 4:
        fit = 2744.632343118886/np.power(-1. + n,2) - 30971.817200693396/np.power(n,4) - 952.2819940425645/(1. + n) - (41.333661834636516*np.power(S1,3))/n
    elif variation == 5:
        fit = -23782.084542787543/np.power(n,4) + 3483.922596452864/(2. - 3.*n + np.power(n,3)) + (4113.682034999507*n)/(2. - 3.*n + np.power(n,3)) - (948.68829470923*np.power(n,2))/(2. - 3.*n + np.power(n,3)) - (42.09612183551995*np.power(S1,3))/n
    elif variation == 6:
        fit = -8921.156635145617/np.power(-1. + n,2) + 126450.3807896444/np.power(n,4) + 14068.520099449477/np.power(1. + n,2) - (73.15270030453787*np.power(S1,3))/n
    elif variation == 7:
        fit = -1107.1867758428937/np.power(-1. + n,2) + 19520.599158076515/np.power(n,4) + 11219.717740191132/np.power(1. + n,3) - (63.2177129738486*np.power(S1,3))/n
    elif variation == 8:
        fit = 2217.0242614495883/np.power(-1. + n,2) - 23735.472659474737/np.power(n,4) - (33.968500855798965*np.power(S1,3))/n + 339.3593235415719*lm11(n,S1)
    elif variation == 9:
        fit = 1915.750514209785/np.power(-1. + n,2) - 19597.255149882232/np.power(n,4) - (16.71516834009708*np.power(S1,3))/n - 137.71390764923026*lm12(n,S1,S2)
    elif variation == 10:
        fit = 2104.125545084184/np.power(-1. + n,2) - 22217.881093557753/np.power(n,4) + (24.485820703580586*np.power(S1,3))/n + 59.575451874140164*lm13(n,S1,S2,S3)
    elif variation == 11:
        fit = 1564.1683316421595/np.power(-1. + n,2) - 14799.221713640667/np.power(n,4) - (178.82132207717467*np.power(S1,2))/n - (9.675321375239982*np.power(S1,3))/n
    elif variation == 12:
        fit = 1287.041404234847/np.power(-1. + n,2) - 12763.951685393362/np.power(n,4) - (40.046543120404976*np.power(S1,3))/n - 273.42916139061344*S1m2
    elif variation == 13:
        fit = -244.56583604807125/np.power(-1. + n,2) + (513.9043455864482*n)/np.power(-1. + n,2) + (33.79272313272125*np.power(S1,3))/n + 74.4092787607492*lm13(n,S1,S2,S3)
    elif variation == 14:
        fit = 28.972284214409314/np.power(-1. + n,2) + 4409.258196319865/np.power(n,3) - (39.464861185478554*np.power(S1,3))/n + 16.322972999434448*lm13(n,S1,S2,S3)
    elif variation == 15:
        fit = 370.566521225854/np.power(-1. + n,2) + 1108.75892075646/np.power(n,2) - (8.802332988225691*np.power(S1,3))/n + 37.54425459826842*lm13(n,S1,S2,S3)
    elif variation == 16:
        fit = 441.4654290674009/np.power(-1. + n,2) + 917.1599259356036/n + (72.04011135242985*np.power(S1,3))/n + 106.64839067739553*lm13(n,S1,S2,S3)
    elif variation == 17:
        fit = 478.49066447881427/np.power(-1. + n,2) + 2416.9342627402943/(1. + n) + (191.53860916085057*np.power(S1,3))/n + 210.7806114315443*lm13(n,S1,S2,S3)
    elif variation == 18:
        fit = 456.4409256479742/np.power(-1. + n,2) + 2102.4844359683207/np.power(1. + n,2) + (9.894131647489687*np.power(S1,3))/n + 50.67213727916304*lm13(n,S1,S2,S3)
    elif variation == 19:
        fit = 394.7064461978274/np.power(-1. + n,2) + 5972.386947296229/np.power(1. + n,3) - (22.19979580622702*np.power(S1,3))/n + 27.86274221498096*lm13(n,S1,S2,S3)
    elif variation == 20:
        fit = 451.26300146150294/np.power(-1. + n,2) + (880.2702062906312*np.power(S1,3))/n - 4968.296653571867*lm11(n,S1) + 931.7734368664478*lm13(n,S1,S2,S3)
    elif variation == 21:
        fit = 183.87868253148338/np.power(-1. + n,2) - (127.17306357889817*np.power(S1,3))/n - 642.5917026672018*S1m2 - 80.43408793599755*lm13(n,S1,S2,S3)
    else:
        fit = 249.34169913859375/np.power(-1. + n,2) - 285.0643969970461/np.power(n,4) + 499.16753274514554/np.power(n,3) + 195.57137026907668/np.power(n,2) - 11.599834167815368/n + (24.47163550411658*n)/np.power(-1. + n,2) + 818.6716517851124/np.power(1. + n,3) + 770.0478350198952/np.power(1. + n,2) + 69.74534612846332/(1. + n) + 165.90107602156496/(2. - 3.*n + np.power(n,3)) + (195.8896207142622*n)/(2. - 3.*n + np.power(n,3)) - (45.1756330813919*np.power(n,2))/(2. - 3.*n + np.power(n,3)) - (8.515301051294031*np.power(S1,2))/n + (25.207041688348706*np.power(S1,3))/n - 43.62004114561025*S1m2 - 220.42558714429975*lm11(n,S1) - 6.557805126153822*lm12(n,S1,S2) + 68.34072327457744*lm13(n,S1,S2,S3)
    return common + fit


@nb.njit(cache=True)
def gamma_qg(n, nf, sx, variation):
    r"""Compute the |N3LO| quark-gluon singlet anomalous dimension.

    Parameters
    ----------
    n : complex
        Mellin moment
    nf : int
        Number of active flavors
    sx : list
        harmonic sums cache
    variation : int
        |N3LO| anomalous dimension variation

    Returns
    -------
    complex
        |N3LO| quark-gluon singlet anomalous dimension
        :math:`\gamma_{qg}^{(3)}(N)`

    See Also
    --------
    gamma_qg_nf1: :math:`\gamma_{qg}^{(3)}|_{nf^1}`
    gamma_qg_nf2: :math:`\gamma_{qg}^{(3)}|_{nf^2}`
    gamma_qg_nf3: :math:`\gamma_{qg}^{(3)}|_{nf^3}`

    """
    return (
        +nf * gamma_qg_nf1(n, sx, variation)
        + nf**2 * gamma_qg_nf2(n, sx, variation)
        + nf**3 * gamma_qg_nf3(n, sx)
    )
