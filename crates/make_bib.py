"""Parse bibtex file to rust crate."""

import datetime
import pathlib
import re

import bibtexparser

# path to bib file
BIBFILE = pathlib.Path(__file__).parent / "ekore" / "refs.bib"

# A single entry
ENTRY = """/// {title}
///
/// {author}
///
/// {publication}
///
/// {eprint}
///
/// {doi}"""
# Combine publication information
PUB = """Published in: {journal} {volume} ({year}), {pages}"""
PHD = """Published as PhD thesis at {school} ({year})"""


def clean_nl(t: str) -> str:
    """Shrink whitespace to one."""
    return re.sub("\n\\s+", " ", t)


# collect output
out = "//! List of References (autogenerated on {now}).\n\n".format(
    now=datetime.datetime.now().isoformat()
)
# Parse .bib file
bib_str = pathlib.Path(BIBFILE).read_text("utf8")
bib_database = bibtexparser.parse_string(bib_str)
# iterate on all elements
for el in bib_database.entries:
    title = re.sub(r"^\{(.+)\}$", r"\1", clean_nl(el.fields_dict["title"].value))
    author = el.fields_dict["author"].value
    if el.entry_type == "phdthesis":
        publication = PHD.format(
            school=el.fields_dict["school"].value,
            year=el.fields_dict["year"].value,
        )
    else:
        publication = PUB.format(
            journal=el.fields_dict["journal"].value,
            volume=el.fields_dict["volume"].value,
            year=el.fields_dict["year"].value,
            pages=el.fields_dict["pages"].value,
        )
    eprint = ""
    if (
        "eprint" in el.fields_dict
        and "archivePrefix" in el.fields_dict
        and el.fields_dict["archivePrefix"].value == "arXiv"
    ):
        ar = el.fields_dict["eprint"].value
        eprint = f"e-Print: [{ar}](https://arxiv.org/abs/{ar})"
    doi = ""
    if "doi" in el.fields_dict:
        ddoi = el.fields_dict["doi"].value
        url = ddoi if "http" in ddoi else f"https:dx.doi.org/{ddoi}"
        doi = f"DOI: [{ddoi}]({url})"
    doc = ENTRY.format(
        title=title, author=author, publication=publication, eprint=eprint, doi=doi
    )
    out += doc + "\n" + f"pub fn {el.key}() {{}} \n\n"

# Print to terminal - the user can dump to the relevant file
out = re.sub(r" +\n", "\n", out.strip())
print(out)
