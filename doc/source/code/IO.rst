Input & Output
==============

We use `yaml <https://github.com/yaml/pyyaml>`_ runcards for piping input and output files.

Input
-----

The input is split into two runcard

- a theory runcard (compatible with the NNPDF theory database) that defines the physical setup
  and environment
- a operator runcard that defines the numerical setup and the requested operators

.. list-table:: theory input runcard
  :header-rows: 1

  * - Name
    - Type
    - default
    - description
  * - ``PTO``
    - :py:obj:`int`
    - [required]
    - order of perturbation theory: ``0`` = LO, ...
  * - ``alphas``
    - :py:obj:`float`
    - [required]
    - reference value of the strong coupling :math:`\alpha_s(\mu_0^2)` (Note that we have to use
      :math:`\alpha_s(\mu_0^2)` here, instead of :math:`a_s(\mu_0^2)` for legacy reasons)

.. include:: IO-tabs/ThresholdConfig.rst

.. include:: IO-tabs/InterpolatorDispatcher.rst

- :py:obj:`list(float)` ``Q2grid`` the target grid in :math:`Q^2`; **Required**


Output
------

The :class:`~eko.output.Output` instance represents the following runcard:

.. list-table:: output runcard
  :header-rows: 1

  * - Name
    - Type
    - description
  * - ``interpolation_xgrid``
    - :py:obj:`list(float)`
    - the interpolation grid
  * - ``interpolation_polynomial_degree``
    - :py:obj:`int`
    - polynomial degree of the interpolating function
  * - ``interpolation_is_log``
    - :py:obj:`bool`
    - use logarithmic interpolation?
  * - ``q2_ref``
    - :py:obj:`float`
    - starting scale
  * - ``pids``
    - :py:obj:`list(int)`
    - participating partons listed by their PDG id
  * - ``Q2grid``
    - :py:obj:`dict`
    - all operators at the requested values of :math:`Q^2` represented by the key

The grid elements contains two keys each

- ``operators`` a :py:obj:`dict` with all evolution kernel operators where the key indicates which distribution is generated by which other one
  and the value represents the eko in matrix representation - this can either be the plain list representation or the binary representation
  (as provided by :py:meth:`numpy.ndarray.tobytes`)
- ``operator_errors`` a :py:obj:`dict` with the integration errors associated to the respective operators following the same conventions as
  the ``operator`` dictionary
- each element (|EKO|) is a rank-4 tensor with the indices ordered in the following way: ``EKO[pid_out][x_out][pid_in][x_in]`` where ``pid_out`` and ``x_out``
  refer to the outgoing |PDF| and ``pid_in`` and ``x_in`` to the incoming |PDF|. The ordering of ``pid_out/pid_in`` is determined by the ``pids``
  parameter of the output and the order of ``x_out/x_in`` by ``interpolation_xgrid``.

Example Output dump
^^^^^^^^^^^^^^^^^^^
.. code-block:: yaml

  interpolation_is_log: true
  interpolation_polynomial_degree: 4
  interpolation_xgrid: [0.0001, 0.001, 0.01, 0.1, 1.0]
  pids: [22, -6, ..., -1, 21, 1, ..., 6] # with ... logically continued
  q2_ref: 1.0
  Q2grid:
    1000.0:
      operators:
        - - - - 0
              - 0
              # more values ...
      operator_errors:
        - - - - 0
              - 0
              # more values ...
    10000.0:
      operators:
        - - - - 0
              - 0
              # more values ...
      operator_errors:
        - - - - 0
              - 0
              # more values ...
    # more q2 values ...

Note that by default `PyYAML <https://github.com/yaml/pyyaml>`_ will put each element of the matrices on a new
line - instead here we have (partially) chosen the more compact inline list representation for a better overview.
